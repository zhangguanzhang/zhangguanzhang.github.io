<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangguanzhang</title>
  
  <subtitle>站在巨人的肩膀上</subtitle>
  <link href="http://zhangguanzhang.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhangguanzhang.github.io/"/>
  <updated>2025-04-21T10:40:30.000Z</updated>
  <id>http://zhangguanzhang.github.io/</id>
  
  <author>
    <name>Zhangguanzhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kube-log-runner 使用和适配 logrotate 改造</title>
    <link href="http://zhangguanzhang.github.io/2025/04/21/kube-log-runner/"/>
    <id>http://zhangguanzhang.github.io/2025/04/21/kube-log-runner/</id>
    <published>2025-04-21T10:40:30.000Z</published>
    <updated>2025-04-21T10:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用 kube-log-runner 的经历…..</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>kubelet 和一些 kube 组件在二进制 systemd service 管理下，日志最终会在 <code>/var/log/messages</code> 里，我们的客户对该文件会有关键字（Error、Failed …）监控，让我们把相关组件日志写到其他文件里去。</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><h3 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h3><p>根据官方文档 <a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/system-logs/">系统日志</a> 得知 <code>v1.26</code> 开始移除了以前的日志文件、目录和轮转之类的参数，而是让使用 <code>kube-log-runner</code> 代替，该二进制已经内置在二进制下载压缩包里了。如果是使用镜像，官方的容器镜像内置了，只是名字叫做 <code>/go-runner</code>。</p><p>根据 <a href="https://github.com/kubernetes/component-base/tree/master/logs/kube-log-runner">github kube-log-runner</a> 得知使用方式和源码，它就是 golang 写的一个简单工具，启动命令，把命令的标准输出和错误输出捕获写到文件，然后转发信号给进程。</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl cat --no-pager kube-apiserver</span><br><span class="line">...</span><br><span class="line">ExecStart=/usr/local/bin/kube-log-runner \</span><br><span class="line">  --log-file=/var/logs/kube-apiserver.log \</span><br><span class="line">  /usr/local/bin/kube-apiserver </span><br></pre></td></tr></table></figure><p>直接测试了下发现启动报错下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4月 18 10:30:25 xxx systemd[1]: Got notification message from PID 9885, but reception only permitted for main PID 9880</span><br></pre></td></tr></table></figure><p>如果对 systemd 比较熟悉，可以直接看出问题。因为我们这边用的 <code>Type=notify</code>，该设置下，服务启动后会发送 <code>sd_notify</code> 给 systemd，这样 systemd 确认该服务正常启动。这个报错就是：</p><ol><li>systemd 拉起的主进程 Pid 是 9880</li><li>从非主进程的 9885 收到了 notification 消息</li></ol><p>解决该问题很简单，systemd 给了配置选项接收所有的 notify ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotifyAccess=all</span><br></pre></td></tr></table></figure><h3 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h3><p>日志要写入到文件，那就一定要遵守 Linux 规范配置 logrotate 避免日志写满分区。然后相关配置完，写完配置用一个小的 size 参数测试了 logrotate 发现不行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logrotate -v /etc/logrotate.d/kube-apiserver</span><br></pre></td></tr></table></figure><p>logrotate 轮转日志分为两种模式，create 和 copytruncate，默认是 create，两种大致原理如下：</p><ul><li>create：重命名日志文件，再创建原有的日志文件，等同于 mv + touch</li><li>copytruncate：<code>cp xx.log xx.log.1 &amp;&amp; truncate -s 0 xx.log</code></li></ul><p>Linux 上打开文件名实际是操作 inode，文件名在打开 inode 后改名或者删掉文件 path 对进程并不会有影响，create 方式需要进程支持 reopen 日志文件路径使用新的 inode，类似 nginx 的 logrotate 配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/*.log /var/log/nginx/*/*.log&#123;</span><br><span class="line">daily</span><br><span class="line">missingok</span><br><span class="line">rotate 14</span><br><span class="line">compress</span><br><span class="line">delaycompress</span><br><span class="line">notifempty</span><br><span class="line">create 640 root adm</span><br><span class="line">sharedscripts</span><br><span class="line">postrotate</span><br><span class="line">[ ! -f /var/run/nginx.pid ] || kill -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kube-apiserver 并没有支持这种行为，就尝试了下 <code>copytruncate</code> 发现也不行，然后去 <a href="https://github.com/kubernetes/enhancements/issues/2845">kep 的 kube-log-runner</a> 下回复了下请求添加 logrotate 支持。</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>等官方估计很久了，先自己修改下源码支持下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">logFilePath    = flag.String(<span class="string">&quot;log-file&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;If non-empty, save stdout to this file&quot;</span>)</span><br><span class="line">alsoToStdOut   = flag.Bool(<span class="string">&quot;also-stdout&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;useful with log-file, log to standard output as well as the log file&quot;</span>)</span><br><span class="line">redirectStderr = flag.Bool(<span class="string">&quot;redirect-stderr&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;treat stderr same as stdout&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增全局变量</span></span><br><span class="line">logFile         *os.File</span><br><span class="line">logFileMu       sync.Mutex</span><br><span class="line">globalLogFile   <span class="type">string</span></span><br><span class="line">globalAlsoStdOut <span class="type">bool</span></span><br><span class="line">globalRedirectStderr <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SyncWriter 支持动态切换 Writer</span></span><br><span class="line"><span class="keyword">type</span> SyncWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">mu sync.Mutex</span><br><span class="line">w  io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sw *SyncWriter)</span></span> Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">sw.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> sw.mu.Unlock()</span><br><span class="line"><span class="keyword">return</span> sw.w.Write(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sw *SyncWriter)</span></span> SetWriter(w io.Writer) &#123;</span><br><span class="line">sw.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> sw.mu.Unlock()</span><br><span class="line">sw.w = w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">outputSync = &amp;SyncWriter&#123;w: os.Stdout&#125;</span><br><span class="line">errSync    = &amp;SyncWriter&#123;w: os.Stderr&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := configureAndRun(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAndRun</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 保存参数到全局变量</span></span><br><span class="line">globalLogFile = *logFilePath</span><br><span class="line">globalAlsoStdOut = *alsoToStdOut</span><br><span class="line">globalRedirectStderr = *redirectStderr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化日志文件</span></span><br><span class="line"><span class="keyword">if</span> globalLogFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">logFile, err = os.OpenFile(globalLogFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to open log file: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> globalAlsoStdOut &#123;</span><br><span class="line">outputSync.SetWriter(io.MultiWriter(os.Stdout, logFile))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">outputSync.SetWriter(logFile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> globalRedirectStderr &#123;</span><br><span class="line">errSync.SetWriter(outputSync)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">args := flag.Args()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not enough arguments to run&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exe := args[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> exeArgs []<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">exeArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line">cmd := exec.Command(exe, exeArgs...)</span><br><span class="line">cmd.Stdout = outputSync</span><br><span class="line">cmd.Stderr = errStream()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Running command:\n%v&quot;</span>, cmdInfo(cmd))</span><br><span class="line">err := cmd.Start()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;starting command: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号处理</span></span><br><span class="line"><span class="keyword">go</span> setupSigHandler(cmd.Process)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;running command: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errStream</span><span class="params">()</span></span> io.Writer &#123;</span><br><span class="line"><span class="keyword">if</span> *redirectStderr &#123;</span><br><span class="line"><span class="keyword">return</span> outputSync</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os.Stderr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmdInfo</span><span class="params">(cmd *exec.Cmd)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(</span><br><span class="line"><span class="string">`Command env: (log-file=%v, also-stdout=%v, redirect-stderr=%v)</span></span><br><span class="line"><span class="string">Run from directory: %v</span></span><br><span class="line"><span class="string">Executable path: %v</span></span><br><span class="line"><span class="string">Args (comma-delimited): %v`</span>, *logFilePath, *alsoToStdOut, *redirectStderr,</span><br><span class="line">cmd.Dir, cmd.Path, strings.Join(cmd.Args, <span class="string">&quot;,&quot;</span>),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后的信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupSigHandler</span><span class="params">(process *os.Process)</span></span> &#123;</span><br><span class="line">signals := []os.Signal&#123;</span><br><span class="line">syscall.SIGHUP, syscall.SIGINT,</span><br><span class="line">syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGUSR1,</span><br><span class="line">&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(c, signals...)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;Now listening for signals&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> s := <span class="keyword">range</span> c &#123;</span><br><span class="line"><span class="keyword">if</span> s == syscall.SIGUSR1 &#123;</span><br><span class="line">handleLogRotate()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">forwardSignal(process, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理日志轮转</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleLogRotate</span><span class="params">()</span></span> &#123;</span><br><span class="line">logFileMu.Lock()</span><br><span class="line"><span class="keyword">defer</span> logFileMu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> globalLogFile == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;No log file configured, ignoring SIGUSR1&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭旧文件</span></span><br><span class="line"><span class="keyword">if</span> logFile != <span class="literal">nil</span> &#123;</span><br><span class="line">logFile.Sync()</span><br><span class="line"><span class="keyword">if</span> err := logFile.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Error closing log file: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开新文件</span></span><br><span class="line">newFile, err := os.OpenFile(globalLogFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;ERROR: Failed to reopen log file: %v (logging to stdout)&quot;</span>, err)</span><br><span class="line">outputSync.SetWriter(os.Stdout)</span><br><span class="line"><span class="keyword">if</span> globalRedirectStderr &#123;</span><br><span class="line">errSync.SetWriter(os.Stdout)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logFile = newFile</span><br><span class="line">log.SetOutput(logFile)</span><br><span class="line">log.Println(<span class="string">&quot;Successfully reopened log file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新输出流</span></span><br><span class="line"><span class="keyword">if</span> globalAlsoStdOut &#123;</span><br><span class="line">outputSync.SetWriter(io.MultiWriter(os.Stdout, logFile))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">outputSync.SetWriter(logFile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> globalRedirectStderr &#123;</span><br><span class="line">errSync.SetWriter(outputSync)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forwardSignal</span><span class="params">(process *os.Process, s os.Signal)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Forwarding signal %v to PID %v&quot;</span>, s, process.Pid)</span><br><span class="line"><span class="keyword">if</span> err := process.Signal(s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Error forwarding signal %v: %v&quot;</span>, s, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码不转发 USR1 信号给套娃的进程，自身处理 USR1 信号就是 reopen 日志文件。然后 logrotate 触发需要 pid 文件，systemd 里增加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStartPost=/bin/sh -c &quot;echo $MAINPID &gt; /var/run/kube-apiserver.pid&quot;</span><br></pre></td></tr></table></figure><p>logrotate 配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/var/logs/kube-apiserver.log &#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 5</span><br><span class="line">    size 400M</span><br><span class="line">    missingok</span><br><span class="line">    compress</span><br><span class="line">    nomail</span><br><span class="line">    delaycompress</span><br><span class="line">    create</span><br><span class="line">    postrotate</span><br><span class="line">        [ ! -f /var/run/kube-apiserver.pid ] || kill -USR1 `cat /var/run/kube-apiserver.pid`</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wsgzao.github.io/post/logrotate/">https://wsgzao.github.io/post/logrotate/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用 kube-log-runner 的经历…..&lt;/p&gt;</summary>
    
    
    
    
    <category term="kube-log-runner" scheme="http://zhangguanzhang.github.io/tags/kube-log-runner/"/>
    
    <category term="logrotate" scheme="http://zhangguanzhang.github.io/tags/logrotate/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 ecs 上 etcd SSL reset</title>
    <link href="http://zhangguanzhang.github.io/2025/02/14/aliyun-ecs-ssl/"/>
    <id>http://zhangguanzhang.github.io/2025/02/14/aliyun-ecs-ssl/</id>
    <published>2025-02-14T13:40:30.000Z</published>
    <updated>2025-02-14T13:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾一些时间的 etcd ssl reset 问题…..</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>几年前的 120 块的腾讯云轻量应用服务器买了后再 240 块续费两年，快到期了后阿里云 90 快去买了一年。然后上面把我之前的 etcd 迁移过去了，证书当初生成的时候可以预留了 cert SAN 域名相关：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># openssl  x509 -in s1.pem -noout -text | grep -A1 &#x27;X509v3 Subject Alternative Name&#x27;</span><br><span class="line">            X509v3 Subject Alternative Name: </span><br><span class="line">                DNS:localhost, DNS:xxx.com, IP Address:127.0.0.1, IP Address:10.0.x.x, IP Address:10.2.0.1</span><br></pre></td></tr></table></figure><p>避免其他 etcd 客户端换证书的，一些非云上会用到该 etcd 的直接本地配置 hosts xxx.com ，这样后续 ecs 换 ip 了直接改 hosts 文件即可。</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>过年放假之前 etcd 整到阿里云 ecs 上了，然后看着也正常，后面突然几个 agent 连不上 etcd，包括 curl 也有问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v https://xxx.com:22379 --resolve xxx.com:22379:x.x.x.x</span><br><span class="line">* Added xxx.com:22379:x.x.x.x to DNS cache</span><br><span class="line">* Hostname xxx.com was found <span class="keyword">in</span> DNS cache</span><br><span class="line">*   Trying x.x.x.x:22379...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to xxx.com (x.x.x.x) port 22379 (<span class="comment">#0)</span></span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/1.1</span><br><span class="line">* successfully <span class="built_in">set</span> certificate verify locations:</span><br><span class="line">*   CAfile: /etc/ssl/certs/ca-certificates.crt</span><br><span class="line">  CApath: /etc/ssl/certs</span><br><span class="line">* TLSv1.3 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="keyword">in</span> connection to xxx.com:22379 </span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="keyword">in</span> connection to xxx.com:22379</span><br></pre></td></tr></table></figure><p>但是直接 ip 就没问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v https://x.x.x.x:22379 --resolve xxx.com:22379:x.x.x.x</span><br><span class="line">* Added xxx.com:22379:x.x.x.x to DNS cache</span><br><span class="line">*   Trying x.x.x.x:22379...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to x.x.x.x (x.x.x.x) port 22379 (#0)</span><br><span class="line">* ALPN, offering h2</span><br><span class="line">* ALPN, offering http/1.1</span><br><span class="line">* successfully set certificate verify locations:</span><br><span class="line">*   CAfile: /etc/ssl/certs/ca-certificates.crt</span><br><span class="line">  CApath: /etc/ssl/certs</span><br><span class="line">* TLSv1.3 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Request CERT (13):</span><br><span class="line">* TLSv1.3 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.3 (OUT), TLS alert, unknown CA (560):</span><br><span class="line">* SSL certificate problem: unable to get local issuer certificate</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (60) SSL certificate problem: unable to get local issuer certificate</span><br><span class="line">More details here: https://curl.haxx.se/docs/sslcerts.html</span><br><span class="line"></span><br><span class="line">curl failed to verify the legitimacy of the server and therefore could not</span><br><span class="line">establish a secure connection to it. To learn more about this situation and</span><br><span class="line">how to fix it, please visit the web page mentioned above.</span><br></pre></td></tr></table></figure><p>这些日子没那么忙了就看了下，发现好几个地方网络访问都这样，根据排除法一定是阿里云有问题了。搜了下 aliyun ssl reset 搜到果然是阿里云有问题。访问阿里云 ecs 的流量会先进云盾，会根据 SSL 的 SNI 域名做判断，如果没备案则 tcp reset。无语了，我这又不是 80、8080、443 端口，没办法暂时用 IP 吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.aliyun.com/article/708243">https://developer.aliyun.com/article/708243</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;折腾一些时间的 etcd ssl reset 问题…..&lt;/p&gt;</summary>
    
    
    
    
    <category term="etcd" scheme="http://zhangguanzhang.github.io/tags/etcd/"/>
    
    <category term="ssl" scheme="http://zhangguanzhang.github.io/tags/ssl/"/>
    
    <category term="aliyun" scheme="http://zhangguanzhang.github.io/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>给鲲鹏920和低版本飞腾编译arm64 clickhouse</title>
    <link href="http://zhangguanzhang.github.io/2025/02/13/clickhouse-arm64-v8.0-build/"/>
    <id>http://zhangguanzhang.github.io/2025/02/13/clickhouse-arm64-v8.0-build/</id>
    <published>2025-02-13T12:10:30.000Z</published>
    <updated>2025-02-13T12:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>clickhouse 官方 docker 镜像无法在老的 arm64 cpu 上运行，需要编译</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>业务方有在使用 clickhouse，当时版本是 <code>22.8.5.29</code>，随着后面也有 arm64 需求，在 arm64 机器上部署了 ck 后即使没有业务数据内存占用也非常高，在持续刷下面日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__1::__function::__policy_storage const*) @ 0x8e8379c in /usr/bin/clickhouse</span><br><span class="line">26. ThreadPoolImpl&lt;std::__1::thread&gt;::worker(std::__1::__list_iterator&lt;std::__1::thread, void*&gt;) @ 0x8e7f950 in /usr/bin/clickhouse</span><br><span class="line">27. ? @ 0x8e82844 in /usr/bin/clickhouse</span><br><span class="line">28. start_thread @ 0x7624 in /usr/lib/aarch64-linux-gnu/libpthread-2.31.so</span><br><span class="line">29. ? @ 0xd149c in /usr/lib/aarch64-linux-gnu/libc-2.31.so</span><br><span class="line"> (version 22.8.5.29 (official build))</span><br><span class="line">2025.02.08 16:10:33.504961 [ 54 ] &#123;&#125; &lt;Error&gt; void DB::MergeTreeBackgroundExecutor&lt;DB::MergeMutateRuntimeQueue&gt;::routine(DB::TaskRuntimeDataPtr) [Queue = DB::MergeMutateRuntimeQueue]: Code: 241. DB::Exception: Memory limit (total) exceeded: would use 18.44 GiB (attempt to allocate chunk of 8709611 bytes), maximum: 18.00 GiB. OvercommitTracker decision: Memory overcommit isn&#x27;t used. Waiting time or overcommit denominator are set to zero. (MEMORY_LIMIT_EXCEEDED), Stack trace (when copying this message, always include the lines below):</span><br><span class="line"></span><br><span class="line">0. DB::Exception::Exception(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, int, bool) @ 0x8dcd368 in /usr/bin/clickhouse</span><br><span class="line">1. DB::Exception::Exception&lt;char const*, char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, long&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;(int, fmt::v8::basic_format_string&lt;char, fmt::v8::type_identity&lt;char const*&gt;::type, fmt::v8::type_identity&lt;char const*&gt;::type, fmt::v8::type_identity&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::type, fmt::v8::type_identity&lt;long&amp;&gt;::type, fmt::v8::type_identity&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::type, fmt::v8::type_identity&lt;std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt;::type&gt;, char const*&amp;&amp;, char const*&amp;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;&amp;, long&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;&amp;&amp;, std::__1::basic_string_view&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;&amp;) @ 0x8dbfe08 in /usr/bin/clickhouse</span><br><span class="line">2. MemoryTracker::allocImpl(long, bool, MemoryTracker*) @ 0x8dbf6d4 in /usr/bin/clickhouse</span><br><span class="line">3. MemoryTracker::allocImpl(long, bool, MemoryTracker*) @ 0x8dbf0f0 in /usr/bin/clickhouse</span><br><span class="line">4. MemoryTracker::allocImpl(long, bool, MemoryTracker*) @ 0x8dbf0f0 in /usr/bin/clickhouse</span><br><span class="line">5. DB::Memory&lt;Allocator&lt;false, false&gt; &gt;::alloc(unsigned long) @ 0x8e26118 in /usr/bin/clickhouse</span><br><span class="line">6. DB::WriteBufferFromFile::WriteBufferFromFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long, int, unsigned int, char*, unsigned long) @ 0x8e46138 in /usr/bin/clickhouse</span><br><span class="line">7. DB::DiskLocal::writeFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long, DB::WriteMode, DB::WriteSettings const&amp;) @ 0x1141bc88 in /usr/bin/clickhouse</span><br><span class="line">8. DB::DataPartStorageBuilderOnDisk::writeFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long, DB::WriteSettings const&amp;) @ 0x1230e6e8 in /usr/bin/clickhouse</span><br><span class="line">9. DB::MergeTreeDataPartWriterOnDisk::Stream::Stream(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::IDataPartStorageBuilder&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::shared_ptr&lt;DB::ICompressionCodec&gt; const&amp;, unsigned long, DB::WriteSettings const&amp;) @ 0x12441ef0 in /usr/bin/clickhouse</span><br></pre></td></tr></table></figure><p>搜索了看到几个 issue 都建议升级版本：</p><ul><li><a href="https://github.com/ClickHouse/ClickHouse/issues/47642">https://github.com/ClickHouse/ClickHouse/issues/47642</a></li><li><a href="https://github.com/ClickHouse/ClickHouse/issues/40215">https://github.com/ClickHouse/ClickHouse/issues/40215</a></li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="arm64-运行环境"><a href="#arm64-运行环境" class="headerlink" title="arm64 运行环境"></a>arm64 运行环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ lscpu</span><br><span class="line">架构：                           aarch64</span><br><span class="line">CPU 运行模式：                   64-bit</span><br><span class="line">字节序：                         Little Endian</span><br><span class="line">CPU:                             16</span><br><span class="line">在线 CPU 列表：                  0-15</span><br><span class="line">每个核的线程数：                 1</span><br><span class="line">每个座的核数：                   1</span><br><span class="line">座：                             16</span><br><span class="line">NUMA 节点：                      1</span><br><span class="line">厂商 ID：                        Phytium</span><br><span class="line">型号：                           3</span><br><span class="line">型号名称：                       ARMv8 CPU</span><br><span class="line">步进：                           0x1</span><br><span class="line">CPU 最大 MHz：                   2100.0000</span><br><span class="line">CPU 最小 MHz：                   2100.0000</span><br><span class="line">BogoMIPS：                       100.00</span><br><span class="line">L1d 缓存：                       1 MiB</span><br><span class="line">L1i 缓存：                       1 MiB</span><br><span class="line">L2 缓存：                        8 MiB</span><br><span class="line">L3 缓存：                        512 MiB</span><br><span class="line">NUMA 节点0 CPU：                 0-15</span><br><span class="line">Vulnerability Itlb multihit:     Not affected</span><br><span class="line">Vulnerability L1tf:              Not affected</span><br><span class="line">Vulnerability Mds:               Not affected</span><br><span class="line">Vulnerability Meltdown:          Not affected</span><br><span class="line">Vulnerability Mmio stale data:   Not affected</span><br><span class="line">Vulnerability Spec store bypass: Not affected</span><br><span class="line">Vulnerability Spectre v1:        Mitigation; __user pointer sanitization</span><br><span class="line">Vulnerability Spectre v2:        Not affected</span><br><span class="line">Vulnerability Srbds:             Not affected</span><br><span class="line">Vulnerability Tsx async abort:   Not affected</span><br><span class="line">标记：                           fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br></pre></td></tr></table></figure><h3 id="升级后起不来"><a href="#升级后起不来" class="headerlink" title="升级后起不来"></a>升级后起不来</h3><p>根据 ck <a href="https://clickhouse.com/docs/en/operations/update">官方 update 文档</a> 里可知官方努力保持一年兼容期，两个版本之前差异小于一年或者 LTS 版本少于两个可以升级。而 23 的 LTS 版本是 <code>v23.8.16.40-lts</code> 。然后换了镜像后运行不起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/entrypoint.sh: line 40:    23 Illegal instruction     (core dumped) clickhouse extract-from-config --config-file &quot;$CLICKHOUSE_CONFIG&quot; --key=&#x27;storage_configuration.disks.*.path&#x27;</span><br><span class="line">/entrypoint.sh: line 41:    25 Illegal instruction     (core dumped) clickhouse extract-from-config --config-file &quot;$CLICKHOUSE_CONFIG&quot; --key=&#x27;storage_configuration.disks.*.metadata_path&#x27;</span><br></pre></td></tr></table></figure><p>然后尝试了下列版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">23.5.5.92</span><br><span class="line">23.3.22.3</span><br><span class="line">23.3.9.55</span><br><span class="line">23.3.1</span><br><span class="line">22.12.6.22</span><br><span class="line">22.8.21.38</span><br><span class="line">22.10.7.13</span><br><span class="line">22.10.1</span><br><span class="line">22.9.1.2603</span><br><span class="line">22.9.7.34</span><br></pre></td></tr></table></figure><p>发现 22.9 才能启动，查看 changelog <a href="https://clickhouse.com/docs/en/whats-new/changelog/2022#-clickhouse-release-2210-2022-10-25">https://clickhouse.com/docs/en/whats-new/changelog/2022#-clickhouse-release-2210-2022-10-25</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Aarch64 binaries now require at least ARMv8.2, released in 2016. Most notably, this enables use of ARM LSE, i.e. native atomic operations. \</span><br><span class="line">Also, CMake build option &quot;NO_ARMV81_OR_HIGHER&quot; has been added to allow compilation of binaries for older ARMv8.0 hardware, e.g. Raspberry Pi 4. #41610 (Robert Schulze).</span><br></pre></td></tr></table></figure><p>22.10 开始使用 arm LSE 指令集做原子操作，但是该指令集 armv8.2 才有，但是也在 Cmake 添加了选项 <code>NO_ARMV81_OR_HIGHER</code> 对于 armv8.0 编译支持。</p><h3 id="查看编译文档"><a href="#查看编译文档" class="headerlink" title="查看编译文档"></a>查看编译文档</h3><p>官方虽然文档写得比较多，但是感觉比较琐碎。跟着前面 changelog 的 pr <a href="https://github.com/ClickHouse/ClickHouse/pull/41987">#41987</a> 看了下官方是 github action 编译的。github action 构建历史有上限，找 pr 里的 <code>BuilderBinAarch64V80Compat</code> 找不到，然后在新版本 <code>.github/workflows/master.yml</code> 里找到了 <code>build_arm_v80compat</code>。但是用的是下面编译命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m praktika run &#x27;Build (arm_v80compat)&#x27; --workflow &quot;MasterCI&quot; --ci</span><br></pre></td></tr></table></figure><p><code>praktika</code> 这个 pip 仓库上找不到，于是找到相关最新的 action 里看下具体怎么编译的，找到了相关日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INFO:root:Pulling image clickhouse/binary-builder:54b46bb22708 - done</span><br><span class="line">INFO:root:Going to run packager with cd /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/docker/packager &amp;&amp; \</span><br><span class="line">  CMAKE_FLAGS=&#x27;-DENABLE_CLICKHOUSE_SELF_EXTRACTING=1&#x27; ./packager \</span><br><span class="line">  --output-dir=/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build \</span><br><span class="line">  --package-type=binary --compiler=clang-19-aarch64-v80compat \</span><br><span class="line">  --cache=sccache --s3-rw-access --s3-bucket=clickhouse-builds \</span><br><span class="line">  --docker-image-version=54b46bb22708 --with-profiler --with-buzzhouse --version=25.2.1.1773 --official</span><br><span class="line"></span><br><span class="line">2025-02-10 22:37:56,547 Will build ClickHouse pkg with cmd: &#x27;docker run --network=host --user=1000:1000 --rm  \</span><br><span class="line">  --volume=/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build:/output \</span><br><span class="line">  --volume=/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse:/build \</span><br><span class="line">   -e OUTPUT_DIR=/output -e DEB_ARCH=arm64 -e CC=clang-19 -e CXX=clang++-19 \</span><br><span class="line">   -e BUILD_TYPE=None -e SCCACHE_BUCKET=clickhouse-builds -e SCCACHE_S3_KEY_PREFIX=ccache/sccache \</span><br><span class="line">   -e VERSION_STRING=&#x27;25.2.1.1773&#x27; \</span><br><span class="line">   -e CMAKE_FLAGS=&quot;$CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=/build/cmake/linux/toolchain-aarch64.cmake \</span><br><span class="line">   -DNO_ARMV81_OR_HIGHER=1 -DCMAKE_C_COMPILER=clang-19 -DCMAKE_CXX_COMPILER=clang++-19 \</span><br><span class="line">   -DCOMPILER_CACHE=sccache -DENABLE_BUILD_PROFILING=1 \</span><br><span class="line">   -DENABLE_BUZZHOUSE=1 -DCLICKHOUSE_OFFICIAL_BUILD=1&quot; \</span><br><span class="line">   -e BUILD_TARGET=&#x27;clickhouse-bundle&#x27; --volume=/home/ubuntu/.cargo/registry:/rust/cargo/registry  \</span><br><span class="line">   clickhouse/binary-builder:54b46bb22708&#x27;</span><br></pre></td></tr></table></figure><p>搜了下相关源码相关关键字 <code>binary-builder</code>，大体了解了下官方编译步骤：</p><ul><li><code>docker/packager</code> 下提供了 <code>packager</code> 二进制(实际是python脚本)来编译</li><li><code>docker/packager/binary-builder</code> 是利用 docker 打包一个镜像，里面包含 llvm、rust、clang 之类的编译环境</li></ul><p>该容器镜像由 CI 构建定期推送到 dockerhub 上，然后不想宿主机上安装环境可以使用它来进行编译，具体参数查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd docker/packager</span><br><span class="line">$ packager --help</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>并且官方文档有 <a href="https://clickhouse.com/docs/en/development/build#building-in-docker">building-in-docker</a> ，所以打算使用官方的 docker 镜像构建，机器要提前安装好 docker，硬盘最好有 50G 容量，源码非常大，自备稳定猫咪之类的。拉取源码和编译全程建议开个 screen 里操作：</p><h4 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h4><p>因为子模块非常多，建议使用 git2 避免一些奇怪问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ClickHouse/ClickHouse.git</span><br></pre></td></tr></table></figure><p>切到指定分支和拉取子模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout v23.8.16.40-lts</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>查看子模块完整性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git submodule status</span><br></pre></td></tr></table></figure><p>确认拉取完成后再开始后面操作</p><h4 id="失败的编译"><a href="#失败的编译" class="headerlink" title="失败的编译"></a>失败的编译</h4><p>查看 <code>docker/packager/packager</code> 内容编译 arm64v8.0 执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./docker/packager</span><br><span class="line">packager --package-type=binary --output-dir=build_results \</span><br><span class="line"> --compiler=clang-16-aarch64-v80compat</span><br></pre></td></tr></table></figure><p>然后报错 clang 版本相关，默认拉取的 <code>clickhouse/binary-builder:latest</code>，查看了下 <code>packager</code> 源码和 <code>--help</code> 有选项 <code>--docker-image-version</code> 指定镜像 tag，去 dockerhub 上找了下 <code>clickhouse/binary-builder</code> 的 clang 16 版本，发现 tag 好像是 commitid 相关：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git log -n1</span><br><span class="line">commit e143a9039ba36ad0c25f2ed85503f36e88f61063 (HEAD, tag: v23.8.16.40-lts)</span><br><span class="line">Merge: 8afc5bd5d1c a60c914df11</span><br><span class="line">Author: Antonio Andelic &lt;antonio2368@users.noreply.github.com&gt;</span><br><span class="line">Date:   Thu Jul 25 20:50:17 2024 +0100</span><br><span class="line"></span><br><span class="line">    Merge pull request #66717 from ClickHouse/backport/23.8/66548</span><br><span class="line">    </span><br><span class="line">    Backport #66548 to 23.8: Correctly track memory for `Allocator::realloc`</span><br></pre></td></tr></table></figure><p>搜索了下 <a href="https://hub.docker.com/r/clickhouse/binary-builder/tags?name=e143a903">e143a903</a> 找到了 tag <code>54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</code>，但是镜像比较大，然后用 daoCloud 的同步了下，拉取下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull m.daocloud.io/docker.io/clickhouse/binary-builder:54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br><span class="line">docker tag m.daocloud.io/docker.io/clickhouse/binary-builder:54187-e143a9039ba36ad0c25f2ed85503f36e88f61063 \</span><br><span class="line">        clickhouse/binary-builder:54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br></pre></td></tr></table></figure><p>然后编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./docker/packager/packager --package-type=binary --compiler=clang-16-aarch64-v80compat  \</span><br><span class="line">  --output-dir=build_results --docker-image-version 54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br></pre></td></tr></table></figure><p>相关报错一直无法解决，提了 <a href="https://github.com/ClickHouse/ClickHouse/issues/75923">issue 75923</a>，官方说该版本已经不维护不提供帮助，让我不要自己编译，而是去下载官方编译的。下载了当然是 core dump。然后自己找了下官方编译的 <code>build_arm_v80compat</code> ，只有一个下载直链，不存在老版本，action 里可以看到下载链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2025-02-10 22:46:45,343 Output placed into /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build</span><br><span class="line">INFO:root:Built successfully</span><br><span class="line">INFO:root:Build finished as success, log path /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build_log/build_log.log</span><br><span class="line">INFO:botocore.credentials:Found credentials from IAM Role: ec2_admin</span><br><span class="line">INFO:root:Processing file without compression</span><br><span class="line">INFO:root:File is too large, do not provide content type</span><br><span class="line">INFO:root:Upload /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse to https://s3.amazonaws.com/clickhouse-builds/master/aarch64v80compat/clickhouse-full Meta: &#123;&#125;</span><br><span class="line">Notice: Binary static URL (with debug info): https://s3.amazonaws.com/clickhouse-builds/master/aarch64v80compat/clickhouse-full</span><br><span class="line">INFO:root:Processing file without compression</span><br><span class="line">INFO:root:File is too large, do not provide content type</span><br><span class="line">INFO:root:Upload /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse-stripped to https://s3.amazonaws.com/clickhouse-builds/master/aarch64v80compat/clickhouse Meta: &#123;&#125;</span><br><span class="line">Notice: Binary static URL (compact): https://s3.amazonaws.com/clickhouse-builds/master/aarch64v80compat/clickhouse</span><br><span class="line">Run action done for: [binary_aarch64_v80compat]</span><br><span class="line">INFO:botocore.credentials:Found credentials from IAM Role: ec2_admin</span><br><span class="line">INFO:root:Get token with 4322 remaining requests</span><br><span class="line">INFO:root:User robot-clickhouse-ci-1 with 4322 remaining requests is used</span><br><span class="line">&#123;&#125;</span><br><span class="line">=== Run script finished ===</span><br></pre></td></tr></table></figure><p>每个 action 里都有链接，但是太早的就没有了，因为 github action 只保留上限的构建历史。看了下应该是构建都存在 s3 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=== Post run script [Build (arm_v80compat)], workflow [MasterCI] ===</span><br><span class="line">Job provides s3 artifacts [[Artifact.Config(name=&#x27;CH_ARMV80C_DARWIN_BIN&#x27;, type=&#x27;s3&#x27;, path=&#x27;/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse&#x27;, _provided_by=&#x27;Build (arm_v80compat)&#x27;, _s3_path=&#x27;&#x27;)]]</span><br><span class="line">Run command: [ls -l /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse]</span><br><span class="line">-rwxr-xr-x 1 ubuntu ubuntu 770032980 Feb 10 23:27 /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse</span><br><span class="line">Run command [aws s3 cp /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/ci/tmp/build/clickhouse s3://clickhouse-builds/REFs/master/57b1cafdcb704280f05ee61345e8fbad9a6af5ed/build_arm_v80compat/clickhouse]</span><br><span class="line">Artifact report enabled and will be uploaded: [&#123;&#x27;build_urls&#x27;: [&#x27;https://clickhouse-builds.s3.amazonaws.com/REFs/master/57b1cafdcb704280f05ee61345e8fbad9a6af5ed/build_arm_v80compat/clickhouse&#x27;]&#125;]</span><br><span class="line">Run command [aws s3 cp ./ci/tmp/artifact_report_build_arm_v80compat.json s3://clickhouse-builds/REFs/master/57b1cafdcb704280f05ee61345e8fbad9a6af5ed/build_arm_v80compat/artifact_report_build_arm_v80compat.json]</span><br><span class="line">Insert results to CIDB</span><br></pre></td></tr></table></figure><p>根据链接规则推断了下下载 url，发现 403：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://clickhouse-builds.s3.amazonaws.com/REFs/master/e143a9039ba36ad0c25f2ed85503f36e88f61063/build_arm_v80compat/clickhouse</span><br></pre></td></tr></table></figure><p>既然说 v23 不维护，然后尝试了 v24 的 lts 版本也一样，相关报错也提了 <a href="https://github.com/ClickHouse/ClickHouse/issues/75960">issue 75960</a></p><h4 id="成功的编译"><a href="#成功的编译" class="headerlink" title="成功的编译"></a>成功的编译</h4><p>报错都是 <code>contrib/sysroot</code> 和 <code>contrib/thrift</code> 这俩子模块，github 上看了下历史记录，这俩模块基本没怎么更新到新版本，感觉不是模块问题。搜了一些相关编译，发现都是编译 22.10 之前的版本居多。麒麟的 yum 源里版本也比较老，联系了麒麟有没有新版本 rpm 包，然后麒麟发了个新版本源码编译安装的文档过来，看了下是在 arm64 上编译的 25 版本，大体步骤为：</p><ul><li>rpm 包安装 cmake 3.26</li><li>编译安装 gcc-11.3.0 并换 std 库</li><li>编译安装 clang-18.1.0</li><li>编译安装 llvm-18.1.0</li><li>安装 rust 1.80.0</li><li>安装 ccache src.rpm</li><li>声明 CC&#x3D;clang CXX&#x3D;clang++ 后<ul><li><code>mkdir build &amp;&amp; cd build</code></li><li><code>cmake .. -DCMAKE_INSTALL_PREFIX=/opt/clickhouse-bin -DNO_ARMV81_OR_HIGHER=1</code></li><li><code>ninja -j32</code></li><li><code>ninja install</code></li></ul></li></ul><p>根据编译相关，<code>packager</code> 的 <code>--compiler=clang-16-aarch64-v80compat</code> 相关逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARM_V80COMPAT_SUFFIX = <span class="string">&quot;-aarch64-v80compat&quot;</span></span><br><span class="line">...</span><br><span class="line">is_cross_arm_v80compat = compiler.endswith(ARM_V80COMPAT_SUFFIX)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> is_cross_arm_v80compat:</span><br><span class="line">        cc = compiler[: -<span class="built_in">len</span>(ARM_V80COMPAT_SUFFIX)]</span><br><span class="line">        cmake_flags.append(</span><br><span class="line">            <span class="string">&quot;-DCMAKE_TOOLCHAIN_FILE=/build/cmake/linux/toolchain-aarch64.cmake&quot;</span></span><br><span class="line">        )</span><br><span class="line">        cmake_flags.append(<span class="string">&quot;-DNO_ARMV81_OR_HIGHER=1&quot;</span>)</span><br><span class="line">        result.append(<span class="string">&quot;DEB_ARCH=arm64&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>-DNO_ARMV81_OR_HIGHER=1</code> 是必填的，而插入的 <code>-DCMAKE_TOOLCHAIN_FILE</code> 则是配置使用交叉编译工具链。交叉编译一直失败，是不是可以 arm64 机器上和麒麟那样源码编译 clang 等相关再尝试编译 ck，但是新开的麒麟 arm64 机器上没猫咪 gcc 和 llvm 下载非常慢。就同步看了下 <code>clickhouse/binary-builder</code> 发现还提供了 arm64 的镜像，想着直接 arm64 上不指定 <code>ARM_V80COMPAT_SUFFIX</code> 那就会用内置的 arm64 gcc 了，然后再指定 <code>-DNO_ARMV81_OR_HIGHER=1</code> 编译选项那就和麒麟一样了。和之前一样找了个高配置 arm64 机器上：</p><ul><li>拉源码，进去 checkout 到 <code>v23.8.16.40-lts</code>，拉取子模块源码</li><li>拉取对应的 <code>clickhouse/binary-builder</code> 并 tag</li></ul><p>查看脚本得到编译命令和选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_FLAGS=<span class="string">&#x27;-DNO_ARMV81_OR_HIGHER=1&#x27;</span> ./docker/packager/packager --package-type=binary \</span><br><span class="line">  --output-dir=build_results --docker-image-version 54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br></pre></td></tr></table></figure><p>执行后终于没卡在 <code>contrib/sysroot</code> 和 <code>contrib/thrift</code> 了，但是最后报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Feb 12 08:22:09 [3590/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/SubtargetFeatureInfo.cpp.o</span><br><span class="line">Feb 12 08:22:10 [3591/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/CompressInstEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:10 [3592/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/X86DisassemblerTables.cpp.o</span><br><span class="line">Feb 12 08:22:10 [3593/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/CodeExpander.cpp.o</span><br><span class="line">Feb 12 08:22:11 [3594/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDagEdge.cpp.o</span><br><span class="line">Feb 12 08:22:11 [3595/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/WebAssemblyDisassemblerEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:11 [3596/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/X86RecognizableInstr.cpp.o</span><br><span class="line">Feb 12 08:22:11 [3596/10884] cd /build/build_docker/rust/skim &amp;&amp; /usr/bin/cmake -E make_directory /build/build_docker/rust/skim/RelWithDebInfo &amp;&amp; /usr/bin/cmake -E env CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/clang++-16 CC_aarch64-unknown-linux-gnu=/usr/bin/clang-16 HOST_CC=/usr/bin/clang-16 CXX_aarch64-unknown-linux-gnu=/usr/bin/clang++-16 HOST_CXX=/usr/bin/clang++-16 CORROSION_BUILD_DIR=/build/build_docker/rust/skim CARGO_BUILD_RUSTC=/rust/rustup/toolchains/nightly-2023-07-04-aarch64-unknown-linux-gnu/bin/rustc /rust/rustup/toolchains/nightly-2023-07-04-aarch64-unknown-linux-gnu/bin/cargo rustc --target=aarch64-unknown-linux-gnu --package _ch_rust_skim_rust --manifest-path /build/build_docker/rust/skim/Cargo.toml --target-dir /build/build_docker/RelWithDebInfo/cargo/build --profile=release -- -Cdefault-linker-libraries=no -Clink-args=--target=aarch64-linux-gnu &amp;&amp; /usr/bin/cmake -E copy_if_different /build/build_docker/RelWithDebInfo/cargo/build/aarch64-unknown-linux-gnu/release/lib_ch_rust_skim_rust.a /build/build_docker/rust/skim/RelWithDebInfo</span><br><span class="line">Feb 12 08:22:11 error: package `cxx v1.0.140` cannot be built because it requires rustc 1.73 or newer, while the currently active rustc version is 1.72.0-nightly</span><br><span class="line">Feb 12 08:22:11 Either upgrade to rustc 1.73 or newer, or use</span><br><span class="line">Feb 12 08:22:11 cargo update -p cxx@1.0.140 --precise ver</span><br><span class="line">Feb 12 08:22:11 where `ver` is the latest version of `cxx` supporting rustc 1.72.0-nightly</span><br><span class="line">Feb 12 08:22:12 [3600/10884] Linking CXX static library contrib/ulid-c-cmake/lib_ulid.a</span><br><span class="line">Feb 12 08:22:12 FAILED: rust/skim/CMakeFiles/cargo-build__ch_rust_skim_rust rust/skim/RelWithDebInfo/lib_ch_rust_skim_rust.a /build/build_docker/rust/skim/CMakeFiles/cargo-build__ch_rust_skim_rust /build/build_docker/rust/skim/RelWithDebInfo/lib_ch_rust_skim_rust.a </span><br><span class="line">Feb 12 08:22:12 cd /build/build_docker/rust/skim &amp;&amp; /usr/bin/cmake -E make_directory /build/build_docker/rust/skim/RelWithDebInfo &amp;&amp; /usr/bin/cmake -E env CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/clang++-16 CC_aarch64-unknown-linux-gnu=/usr/bin/clang-16 HOST_CC=/usr/bin/clang-16 CXX_aarch64-unknown-linux-gnu=/usr/bin/clang++-16 HOST_CXX=/usr/bin/clang++-16 CORROSION_BUILD_DIR=/build/build_docker/rust/skim CARGO_BUILD_RUSTC=/rust/rustup/toolchains/nightly-2023-07-04-aarch64-unknown-linux-gnu/bin/rustc /rust/rustup/toolchains/nightly-2023-07-04-aarch64-unknown-linux-gnu/bin/cargo rustc --target=aarch64-unknown-linux-gnu --package _ch_rust_skim_rust --manifest-path /build/build_docker/rust/skim/Cargo.toml --target-dir /build/build_docker/RelWithDebInfo/cargo/build --profile=release -- -Cdefault-linker-libraries=no -Clink-args=--target=aarch64-linux-gnu &amp;&amp; /usr/bin/cmake -E copy_if_different /build/build_docker/RelWithDebInfo/cargo/build/aarch64-unknown-linux-gnu/release/lib_ch_rust_skim_rust.a /build/build_docker/rust/skim/RelWithDebInfo</span><br><span class="line">Feb 12 08:22:12 [3602/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/SearchableTableEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3603/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/CTagsEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3604/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/VarLenCodeEmitterGen.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3605/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/InstrInfoEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3606/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDagOperands.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3607/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDagInstr.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3608/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDag.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3609/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/X86FoldTablesEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3610/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDagPredicateDependencyEdge.cpp.o</span><br><span class="line">Feb 12 08:22:12 [3611/10884] Building CXX object contrib/llvm-project/llvm/lib/BinaryFormat/CMakeFiles/LLVMBinaryFormat.dir/COFF.cpp.o</span><br><span class="line">Feb 12 08:22:13 [3612/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchDagPredicate.cpp.o</span><br><span class="line">Feb 12 08:22:13 [3613/10884] Building CXX object contrib/llvm-project/llvm/lib/BinaryFormat/CMakeFiles/LLVMBinaryFormat.dir/AMDGPUMetadataVerifier.cpp.o</span><br><span class="line">Feb 12 08:22:14 [3614/10884] Building CXX object contrib/llvm-project/llvm/lib/BinaryFormat/CMakeFiles/LLVMBinaryFormat.dir/Dwarf.cpp.o</span><br><span class="line">Feb 12 08:22:15 [3615/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/SubtargetEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:18 [3616/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/RegisterInfoEmitter.cpp.o</span><br><span class="line">Feb 12 08:22:19 [3617/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/GlobalISel/CMakeFiles/LLVMTableGenGlobalISel.dir/GIMatchTree.cpp.o</span><br><span class="line">Feb 12 08:22:24 [3618/10884] Building CXX object contrib/llvm-project/llvm/utils/TableGen/CMakeFiles/llvm-tblgen.dir/GlobalISelEmitter.cpp.o</span><br></pre></td></tr></table></figure><p>报错说 rust 版本 1.72 低了，要求 1.73，搜了下 <code>nightly-2023-07-04</code> 搜不到有用的，<code>nightly</code> 是每日发行版本，找不到对应的 <code>1.73</code> 是啥日期。如果直接使用新版本 <code>binary-builder</code> ，里面的 clang 和要编译的 ck 版本对不上，于是根据 <code>clickhouse/binary-builder</code> 的 Dockerfile 找了下 rust 的临近更新是 <code>nightly-2024-12-01</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl https://sh.rustup.rs -sSf | bash -s -- -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 777 -R /rust &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup toolchain install nightly-2024-12-01 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup default nightly-2024-12-01 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup toolchain remove stable &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup component add rust-src &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup target add x86_64-unknown-linux-gnu &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    rustup target add aarch64-unknown-linux-gnu &amp;&amp; \</span></span><br></pre></td></tr></table></figure><p>前面编译报错结尾会有一个 <code>docker run ...</code> 完整命令，结尾加一个 <code>bash</code> run 起来后内部升级下 rust 尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记得依旧使用 screen</span></span><br><span class="line">docker run .... bash</span><br><span class="line">rustup toolchain install nightly-2024-12-01</span><br><span class="line">rustup default nightly-2024-12-01</span><br><span class="line">rustup component add rust-src <span class="comment">#&lt;--- 似乎没必要执行</span></span><br><span class="line">rustup target add aarch64-unknown-linux-gnu <span class="comment">#&lt;--- 似乎没必要执行</span></span><br></pre></td></tr></table></figure><p>实际 <code>clickhouse/binary-builder</code> 和 它的 Dockerfile CMD 都是执行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;bash&quot;</span> <span class="string">&quot;-c&quot;</span> <span class="string">&quot;/build.sh 2&gt;&amp;1&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>所以上面的容器里继续执行 <code>/build.sh</code> 就可以编译了，编译期间看了下 <code>build.sh</code> 存在以下逻辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> check_prebuild_exists /build/packages/pre-build</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment"># Execute all commands</span></span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> /build/packages/pre-build/*.sh ;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># The script may want to modify environment variables. Why not to allow it to do so?</span></span><br><span class="line">    <span class="comment"># shellcheck disable=SC1090</span></span><br><span class="line">    <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;There are no subcommands to execute :)&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>所以如果不交互式直接使用脚本自动化编译的步骤，在拉取 <code>clickhouse/binary-builder</code> 对应镜像后可以是下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p packages/pre-build</span><br><span class="line">cat &lt;&lt; EOF &gt; packages/pre-build/update-rust.sh</span><br><span class="line">rustup toolchain install nightly-2024-12-01</span><br><span class="line">rustup default nightly-2024-12-01</span><br><span class="line">EOF</span><br><span class="line">CMAKE_FLAGS=&#x27;-DNO_ARMV81_OR_HIGHER=1&#x27; ./docker/packager/packager --package-type=binary \</span><br><span class="line">  --output-dir=build_results --docker-image-version 54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br></pre></td></tr></table></figure><p>最后编译出来 2.9G 大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Feb 12 10:39:51 Average compiler                  0.000 s</span><br><span class="line">Feb 12 10:39:51 Average cache read hit            0.000 s</span><br><span class="line">Feb 12 10:39:51 Failed distributed compilations       0</span><br><span class="line">Feb 12 10:39:51 Cache location                  Local disk: &quot;/root/.cache/sccache&quot;</span><br><span class="line">Feb 12 10:39:51 Version (client)                0.5.4</span><br><span class="line">Feb 12 10:39:51 + ccache --evict-older-than 1d</span><br><span class="line">Feb 12 10:39:51 + &#x27;[&#x27; &#x27;&#x27; == 1 &#x27;]&#x27;</span><br><span class="line">Feb 12 10:39:51 + &#x27;[&#x27; -n &#x27;&#x27; &#x27;]&#x27;</span><br><span class="line">Feb 12 10:39:51 + ls -l /output</span><br><span class="line">Feb 12 10:39:51 total 6200956</span><br><span class="line">Feb 12 10:39:51 -rwxr-xr-x 1 root root 3336977696 Feb 12 10:39 clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-benchmark -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-client -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-compressor -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-copier -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-disks -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-extract-from-config -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-format -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-git-import -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-keeper -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-keeper-client -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-keeper-converter -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-local -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-obfuscator -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-server -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-static-files-disk-uploader -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 lrwxrwxrwx 1 root root         10 Feb 12 10:39 clickhouse-su -&gt; clickhouse</span><br><span class="line">Feb 12 10:39:51 -rwxr-xr-x 1 root root 3012799232 Feb 12 10:39 unit_tests_dbms</span><br></pre></td></tr></table></figure><p>然后加一些选项编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CMAKE_FLAGS=<span class="string">&#x27;-DNO_ARMV81_OR_HIGHER=1 -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=OFF -DENABLE_DEBUG=OFF -DSPLIT_DEBUG_SYMBOLS=ON&#x27;</span> \</span><br><span class="line">  ./docker/packager/packager --package-type=binary \</span><br><span class="line">  --output-dir=build_results --docker-image-version 54187-e143a9039ba36ad0c25f2ed85503f36e88f61063</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Feb 13 01:24:21 Failed distributed compilations       0</span><br><span class="line">Feb 13 01:24:21 Cache location                  Local disk: &quot;/root/.cache/sccache&quot;</span><br><span class="line">Feb 13 01:24:21 Version (client)                0.5.4</span><br><span class="line">Feb 13 01:24:21 + ccache --evict-older-than 1d</span><br><span class="line">Feb 13 01:24:21 + &#x27;[&#x27; &#x27;&#x27; == 1 &#x27;]&#x27;</span><br><span class="line">Feb 13 01:24:21 + &#x27;[&#x27; -n &#x27;&#x27; &#x27;]&#x27;</span><br><span class="line">Feb 13 01:24:21 + ls -l /output</span><br><span class="line">Feb 13 01:24:21 total 680996</span><br><span class="line">Feb 13 01:24:21 -rwxr-xr-x 1 root root 697336944 Feb 13 01:24 clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-benchmark -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-client -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-compressor -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-copier -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-disks -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-extract-from-config -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-format -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-git-import -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-keeper -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-keeper-client -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-keeper-converter -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-local -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-obfuscator -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-server -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-static-files-disk-uploader -&gt; clickhouse</span><br><span class="line">Feb 13 01:24:21 lrwxrwxrwx 1 root root        10 Feb 13 01:24 clickhouse-su -&gt; clickhouse</span><br></pre></td></tr></table></figure><p>上面的文件打包，然后 core dump 机器上测试下没问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./clickhouse <span class="built_in">local</span> -q <span class="string">&#x27;select 1&#x27;</span></span><br><span class="line">1</span><br><span class="line">./clickhouse-server --version</span><br><span class="line">ClickHouse server version 23.8.16.1.</span><br></pre></td></tr></table></figure><h3 id="打包-Docker-镜像"><a href="#打包-Docker-镜像" class="headerlink" title="打包 Docker 镜像"></a>打包 Docker 镜像</h3><p>根据 <code>docker histort --no-trunc</code> 确认了 Dockerfile 是用的 <a href="https://github.com/ClickHouse/ClickHouse/blob/v23.8.16.40-lts/docker/server/Dockerfile.ubuntu">docker&#x2F;server&#x2F;Dockerfile.ubuntu</a>，但是编译的镜像是基于 ubuntu:22.04 的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/os-release </span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 22.04.4 LTS&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;22.04&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;22.04.4 LTS (Jammy Jellyfish)&quot;</span></span><br><span class="line">VERSION_CODENAME=jammy</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">UBUNTU_CODENAME=jammy</span><br></pre></td></tr></table></figure><p>避免意外和 CVE，还是用 <code>ubuntu:22.04</code> 稳妥些，参考了下最新的 master 分支上的 22.04 整了下 <code>docker/server/Dockerfile.fix</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># see https://github.com/moby/moby/issues/4032#issuecomment-192327844</span></span><br><span class="line"><span class="comment"># It could be removed after we move on a version 23:04+</span></span><br><span class="line"><span class="keyword">ARG</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"><span class="comment"># ARG for quick switch to a given ubuntu mirror</span></span><br><span class="line"><span class="keyword">ARG</span> apt_archive=<span class="string">&quot;http://archive.ubuntu.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We shouldn&#x27;t use `apt upgrade` to not change the upstream image. It&#x27;s updated biweekly</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user/group precreated explicitly with fixed uid/gid on purpose.</span></span><br><span class="line"><span class="comment"># It is especially important for rootless containers: in that case entrypoint</span></span><br><span class="line"><span class="comment"># can&#x27;t do chown and owners of mounted volumes should be configured externally.</span></span><br><span class="line"><span class="comment"># We do that in advance at the begining of Dockerfile before any packages will be</span></span><br><span class="line"><span class="comment"># installed to prevent picking those uid / gid by some unrelated software.</span></span><br><span class="line"><span class="comment"># The same uid / gid (101) is used both for alpine and ubuntu.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&quot;s|http://archive.ubuntu.com|<span class="variable">$&#123;apt_archive&#125;</span>|g&quot;</span> /etc/apt/sources.list \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; groupadd -r clickhouse --gid=101 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; useradd -r -g clickhouse --uid=101 --home-dir=/var/lib/clickhouse --shell=/bin/bash clickhouse \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install --<span class="built_in">yes</span> --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">        ca-certificates \</span></span><br><span class="line"><span class="language-bash">        locales \</span></span><br><span class="line"><span class="language-bash">        tzdata \</span></span><br><span class="line"><span class="language-bash">        wget \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* /var/cache/debconf /tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> VERSION=<span class="string">&quot;25.1.3.23&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> single_binary_location_url=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install from a single binary</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;single_binary_location_url&#125;</span>&quot;</span> ]; <span class="keyword">then</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">echo</span> <span class="string">&quot;installing from single binary url: <span class="variable">$&#123;single_binary_location_url&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">rm</span> -rf /tmp/clickhouse_binary \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">mkdir</span> -p /tmp/clickhouse_binary \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; wget --progress=bar:force:noscroll <span class="string">&quot;<span class="variable">$&#123;single_binary_location_url&#125;</span>&quot;</span> -O /tmp/clickhouse_binary/clickhouse \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">chmod</span> +x /tmp/clickhouse_binary/clickhouse \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; /tmp/clickhouse_binary/clickhouse install --user <span class="string">&quot;clickhouse&quot;</span> --group <span class="string">&quot;clickhouse&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">rm</span> -rf /tmp/* ; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">fi</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The rest is the same in the official docker and in our build system</span></span><br><span class="line"><span class="comment">#docker-official-library:on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post install</span></span><br><span class="line"><span class="comment"># we need to allow &quot;others&quot; access to clickhouse folder, because docker container</span></span><br><span class="line"><span class="comment"># can be started with arbitrary uid (openshift usecase)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> clickhouse-local -q <span class="string">&#x27;SELECT * FROM system.build_options&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mkdir</span> -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">chmod</span> ugo+Xrw -R /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> locale-gen en_US.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=UTC</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /docker-entrypoint-initdb.d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker_related_config.xml /etc/clickhouse-server/config.d/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> entrypoint.sh /entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span> <span class="number">8123</span> <span class="number">9009</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /var/lib/clickhouse</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> CLICKHOUSE_CONFIG=/etc/clickhouse-server/config.xml</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>直接拷贝二进制进去执行 clickhouse install 会造成 overlay diff 浪费，所以需要起一个 web 下载，编译容器镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RANDOM_PORT=50358</span><br><span class="line">docker run -d --name ck -v <span class="variable">$PWD</span>/build_results:/usr/share/nginx/html/ \</span><br><span class="line">    -p 50358:80 \</span><br><span class="line">    m.daocloud.io/docker.io/library/nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> docker/server/</span><br><span class="line">docker build . --build-arg version=<span class="string">&quot;23.8.16.40&quot;</span> --network host \</span><br><span class="line">  --build-arg single_binary_location_url=http://127.0.0.1:50358/clickhouse \</span><br><span class="line">   -t clickhouse/clickhouse-server:23.8.16.40 -f Dockerfile.fix</span><br></pre></td></tr></table></figure><h3 id="一些其他信息"><a href="#一些其他信息" class="headerlink" title="一些其他信息"></a>一些其他信息</h3><p><code>clickhouse/binary-builder</code> 新版本的 tag 似乎不是 commidID 了，找了下一些版本 tag 和 clang 对应：</p><ul><li>dd5e777b6745 18</li><li>54187-e143a9039ba36ad0c25f2ed85503f36e88f61063 16</li></ul><p>官方和编译的二进制文件 file 信息对比：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clickhouse: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, <span class="keyword">for</span> GNU/Linux 3.7.0, BuildID[sha1]=3e70066de2db0f08f97ca310827184d61111dc22, not stripped</span><br><span class="line">clickhouse: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked (uses shared libs), <span class="keyword">for</span> GNU/Linux 3.7.0, BuildID[sha1]=586fe5a059c988b60f99dcd794e68f0e4cf69619, not stripped</span><br></pre></td></tr></table></figure><p>切换其他版本的时候要处理下子模块，相关命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --recursive --checkout</span><br><span class="line"></span><br><span class="line">git submodule foreach --recursive git reset --hard</span><br><span class="line">git submodule update  --recursive</span><br></pre></td></tr></table></figure><p>切版本还要记得清理 <code>build_docker</code> 目录</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>其实也没参考多少，就是这些是能搜到的 arm64 编译相关</p><ul><li><a href="https://clickhouse.com/docs/en/development/build#building-in-docker">https://clickhouse.com/docs/en/development/build#building-in-docker</a></li><li><a href="http://www.shadow-li.com.cn/kunpeng/">http://www.shadow-li.com.cn/kunpeng/</a></li><li><a href="https://blog.csdn.net/pzz490/article/details/103574403">https://blog.csdn.net/pzz490/article/details/103574403</a></li><li><a href="https://www.bookstack.cn/read/clickhouse-20.3-en/a6fe877844d4f2ad.md">https://www.bookstack.cn/read/clickhouse-20.3-en/a6fe877844d4f2ad.md</a></li><li><a href="https://programmersought.com/article/22059609594/">https://programmersought.com/article/22059609594/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;clickhouse 官方 docker 镜像无法在老的 arm64 cpu 上运行，需要编译&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="arm64" scheme="http://zhangguanzhang.github.io/tags/arm64/"/>
    
    <category term="clickhouse" scheme="http://zhangguanzhang.github.io/tags/clickhouse/"/>
    
  </entry>
  
  <entry>
    <title>docker login hang</title>
    <link href="http://zhangguanzhang.github.io/2025/01/08/docker-login-hang/"/>
    <id>http://zhangguanzhang.github.io/2025/01/08/docker-login-hang/</id>
    <published>2025-01-08T17:10:30.000Z</published>
    <updated>2025-01-08T17:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker login 和 pod 拉取镜像非常慢的排查</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>现场客户单机测试环境，反馈 docker login 和 docker pull 和 pod 拉取镜像非常慢，现场大致查了下查不出来后我上去远程查了下。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们私有化都会部署一个镜像仓库的，镜像都推送到仓库上，现场说拉取镜像很慢和 docker login 很慢</p><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/redhat-release </span><br><span class="line">Red Hat Enterprise Linux Server release 7.8 (Maipo)</span><br><span class="line">$ uname -a</span><br><span class="line">Linux poc-xxxx 3.10.0-1127.el7.x86_64 #1 SMP Tue Feb 18 16:39:12 EST 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>上去看了下，login 非常慢：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u xxx -p xxxx reg.xxx.lan:5000</span><br></pre></td></tr></table></figure><p>strace 看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ strace docker login -u xxx -p xxxx reg.xxx.lan:5000</span><br><span class="line">...</span><br><span class="line">write(3, &quot;HEAD /_ping HTTP/1.1\r\nHost: api.&quot;..., 92) = 92</span><br><span class="line">futex(0xc000700148, FUTEX_WAKE_PRIVATE, 1) = 1</span><br><span class="line">futex(0x1ac5448, FUTEX_WAIT_PRIVATE, 0, NULLWARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">) = 0</span><br><span class="line">futex(0x1ac5448, FUTEX_WAIT_PRIVATE, 0, NULL) = 0</span><br><span class="line">futex(0x1ac5448, FUTEX_WAIT_PRIVATE, 0, NULL) = 0</span><br></pre></td></tr></table></figure><p>发现卡在上面，但是 curl 发下 HEAD 请求正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -v reg.xxx.lan:5000/_ping -I</span></span><br><span class="line">* About to connect() to reg.xxx.lan port 5000 (#0)</span><br><span class="line">*   Trying 7.xx.x.125...</span><br><span class="line">* Connected to reg.xxx.lan (7.xx.x.125) port 5000 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET /_ping HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.29.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: reg.xxx.lan:5000</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&lt; HTTP/1.1 404 Not Found</span></span><br><span class="line">&lt; Content-Type: text/plain; charset=utf-8</span><br><span class="line">&lt; Docker-Distribution-Api-Version: registry/2.0</span><br><span class="line">&lt; X-Content-Type-Options: nosniff</span><br><span class="line">&lt; Date: Wed, 08 Jan 2025 07:05:33 GMT</span><br><span class="line">&lt; Content-Length: 19</span><br><span class="line">&lt;</span><br><span class="line">404 page not found</span><br><span class="line">* Connection #0 to host reg.xxx.lan left intact</span><br></pre></td></tr></table></figure><p>然后让客户准备第二台机器只安装同样的 docker 版本 ，上去 docker login 就很快，排除掉镜像仓库问题。看了下这块代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/moby/moby/blob/6c523afaedcbb2e3e219dbf4d417efad5b9397b3/client/ping.go#L21</span><br></pre></td></tr></table></figure><p>发现代码逻辑也没啥逻辑问题，先发 HEAD 请求有问题再尝试 GET 请求。机器上看了下也没安全软件啥的。最后尝试下 127 访问试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u xxx -p xxxx 127.0.0.1:5000</span><br></pre></td></tr></table></figure><p>发现很快，感觉不会是 hosts 解析相关吧，<code>tcpdump -nn -i ens224 port 53 -v | grep -A2 reg.xxx.lan</code> 看了下果然发往外面了。查看下 <code>/etc/nsswitch.conf</code> 发现果然被修改了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep hosts /etc/nsswitch.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hosts:     db files nisplus nis dns</span></span><br><span class="line">hosts:      dns files myhostname</span><br></pre></td></tr></table></figure><p>改回就正常了，询问客户没有人改，应该是他们制作虚机模板时候修改的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;docker login 和 pod 拉取镜像非常慢的排查&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="net" scheme="http://zhangguanzhang.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>inotifywait 和 confd 在一起踩的坑</title>
    <link href="http://zhangguanzhang.github.io/2024/11/24/inotifywait-and-confd/"/>
    <id>http://zhangguanzhang.github.io/2024/11/24/inotifywait-and-confd/</id>
    <published>2024-11-24T20:10:30.000Z</published>
    <updated>2024-11-24T20:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录最近碰到的一次 confd 和 inotifywait 配合踩的坑</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>版本快发版的时候，测试测出来经常部署应用阶段 sql 初始化服务偶现连接数据库 mysql 超时，导致没有创建库或者表，而业务功能不正常。然后临近发版测试人员上报了高风险。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>复现非常麻烦，不是一直超时是偶先。没办法询问了 sql 初始化业务的开发人员，和多个环境得到以下对比信息：</p><ul><li>最近无改动，初始化服务回退到上个版本依旧</li><li>每次超时是不同的库，并不是固定的，慢 sql 看了没有</li><li>k8s&#x2F;docker 部署均会发生</li></ul><p>就在一筹莫展之际，另一个部门的测试人员找过来，他们部署后，浏览器上测试很多接口报错超时（主要是内部涉及到的调用链长），有了稳定复现的环境真好。上去排查了下，发现 ipset 的条目被频繁清空和创建导致的。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们 toB 和 toG 为了避免客户现场漏扫和安全相关，每台机器起了容器，利用 ipset 和 iptables 做白名单端口策略。相关规则为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -w -N BASE-RULE</span><br><span class="line">iptables -w -A BASE-RULE -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -w -A BASE-RULE -m set ! --match-set whiteiplist src -m set  --match-set whiteportlist dst -j DROP</span><br><span class="line">iptables -w -A BASE-RULE -j RETURN</span><br><span class="line">iptables -A INPUT -j BASE-RULE</span><br></pre></td></tr></table></figure><p>默认行为是 DROP，也就是白名单实现。在每个节点机器都部署有 ipset 容器，内部 <code>entrypoint.sh</code> 内容大致如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exec inotifywait -mrq \</span><br><span class="line">    --timefmt &#x27;%d/%m/%y/%H:%M&#x27; \</span><br><span class="line">    --format &#x27;%T %w %f&#x27; \</span><br><span class="line">    -e modify,delete,close_write,move /data/kube/ | while read line;do</span><br><span class="line">        bash /iptables.sh</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><code>/iptables.sh</code> 内部就是检查链和每次清空 ipset 条目和创建。之前的逻辑是 ansible 分发 rule 文件，上个版本被其他同事修改成使用 confd 从 redis 内读取更新到该文件：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># confd 容器内目录</span></span><br><span class="line"><span class="section">[template]</span></span><br><span class="line"><span class="attr">src</span> = <span class="string">&quot;ipsets-whiteiplist.tmpl&quot;</span></span><br><span class="line"><span class="attr">dest</span> = <span class="string">&quot;/root/kube/rule/whiteiplist.txt&quot;</span>  <span class="comment"># 配置文件地址</span></span><br><span class="line"><span class="attr">keys</span> = [                 <span class="comment"># 监听的key</span></span><br><span class="line">    <span class="string">&quot;/ipsets/whiteiplist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/ipsets/mark&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="根源"><a href="#根源" class="headerlink" title="根源"></a>根源</h3><p>然后我在 ipset 容器内使用 inotifywait 观察了下发现一直产生临时文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">inotifywait -mrq     --timefmt <span class="string">&#x27;%d/%m/%y/%H:%M&#x27;</span>     --format <span class="string">&#x27;%T %w %f&#x27;</span> -e modify,delete,close_write,move /data/kube/</span></span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br><span class="line">26/11/24/14:51 /data/kube/ .whiteportlist.txt3298417101</span><br></pre></td></tr></table></figure><p>看这个文件名就是 confd 生成的对比临时文件，查看了下文档并没有发现有设置临时文件的 dir 相关参数，然后找到了相关逻辑：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/kelseyhightower/confd/blob/master/resource/template/resource.go#L138</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TemplateResource)</span></span> createStageFile() <span class="type">error</span> &#123;</span><br><span class="line">log.Debug(<span class="string">&quot;Using source template &quot;</span> + t.Src)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !util.IsFileExist(t.Src) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;Missing template: &quot;</span> + t.Src)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Debug(<span class="string">&quot;Compiling source template &quot;</span> + t.Src)</span><br><span class="line"></span><br><span class="line">tmpl, err := template.New(filepath.Base(t.Src)).Funcs(t.funcMap).ParseFiles(t.Src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Unable to process template %s, %s&quot;</span>, t.Src, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create TempFile in Dest directory to avoid cross-filesystem issues</span></span><br><span class="line">temp, err := ioutil.TempFile(filepath.Dir(t.Dest), <span class="string">&quot;.&quot;</span>+filepath.Base(t.Dest))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = tmpl.Execute(temp, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">temp.Close()</span><br><span class="line">os.Remove(temp.Name())</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> temp.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the owner, group, and mode on the stage file now to make it easier to</span></span><br><span class="line"><span class="comment">// compare against the destination configuration file later.</span></span><br><span class="line">os.Chmod(temp.Name(), t.FileMode)</span><br><span class="line">os.Chown(temp.Name(), t.Uid, t.Gid)</span><br><span class="line">t.StageFile = temp</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TemplateResource)</span></span> sync() <span class="type">error</span> &#123;</span><br><span class="line">staged := t.StageFile.Name()</span><br><span class="line"><span class="keyword">if</span> t.keepStageFile &#123;</span><br><span class="line">log.Info(<span class="string">&quot;Keeping staged file: &quot;</span> + staged)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> os.Remove(staged)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是这行 <code>ioutil.TempFile(filepath.Dir(t.Dest), &quot;.&quot;+filepath.Base(t.Dest))</code> 相当于 <code>目录下 + .文件名字 + TempFile随机后缀</code>，在下面的 sync 方法里对比后再删掉 stageFile。</p><p>从源码了解到并没有相关 StageFileDir 参数，没办法让同事把文件放其他地方， 在 reload_cmd cp 过去，大概类似这样：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[template]</span></span><br><span class="line"><span class="attr">src</span> = <span class="string">&quot;ipsets-whiteiplist.tmpl&quot;</span></span><br><span class="line"><span class="attr">dest</span> = <span class="string">&quot;/root/kube/whiteiplist.txt&quot;</span>  <span class="comment"># 配置文件地址</span></span><br><span class="line"><span class="attr">keys</span> = [                 <span class="comment"># 监听的key</span></span><br><span class="line">    <span class="string">&quot;/ipsets/whiteiplist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/ipsets/mark&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">check_cmd</span> = <span class="string">&quot;&quot;</span>    <span class="comment"># 服务配置检查命令</span></span><br><span class="line"><span class="attr">reload_cmd</span> = <span class="string">&quot;cp -f /root/kube/whiteiplist.txt /root/kube/rule/whiteiplist.txt&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>重写了那个 while 内过滤掉.开头的文件，然后 ipset 清空逻辑使用 swap 方式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录最近碰到的一次 confd 和 inotifywait 配合踩的坑&lt;/p&gt;</summary>
    
    
    
    
    <category term="ipset" scheme="http://zhangguanzhang.github.io/tags/ipset/"/>
    
    <category term="iptables" scheme="http://zhangguanzhang.github.io/tags/iptables/"/>
    
    <category term="inotifywait" scheme="http://zhangguanzhang.github.io/tags/inotifywait/"/>
    
    <category term="confd" scheme="http://zhangguanzhang.github.io/tags/confd/"/>
    
  </entry>
  
  <entry>
    <title>hostPort 不通排查，以及挖掘问题根源</title>
    <link href="http://zhangguanzhang.github.io/2024/09/16/hostPort-problem/"/>
    <id>http://zhangguanzhang.github.io/2024/09/16/hostPort-problem/</id>
    <published>2024-09-16T18:10:30.000Z</published>
    <updated>2024-09-16T18:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录最近碰到的一次 hostPort 不通排查的信息记录</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>内部有服务通过 hostPort 暴漏的，之前每次出问题都是有人去清理相关，这次完整记录下我处理过程</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="iptables-相关"><a href="#iptables-相关" class="headerlink" title="iptables 相关"></a>iptables 相关</h3><p>只有一个服务 hostPort 暴漏的，测试反馈部署了后无法访问，查看了下 iptables 的 nat 表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -S CNI-HOSTPORT-DNAT</span></span><br><span class="line">-N CNI-HOSTPORT-DNAT</span><br><span class="line">-A CNI-HOSTPORT-DNAT -p tcp -m comment --comment &quot;dnat name: \&quot;cbr0\&quot; id: \&quot;fb7cdb0a4f8da673da0a9818ec9a1576f953a8e8decf87a081827c11e4aa7138\&quot;&quot; \</span><br><span class="line">   -m multiport --dports 443,9001,80,9002,9003,19004,19003,50051,25,465,993,995,7010,7020,12321 -j CNI-DN-b24a4eb3a38dc5843c23a</span><br><span class="line">-A CNI-HOSTPORT-DNAT -p tcp -m comment --comment &quot;dnat name: \&quot;cbr0\&quot; id: \&quot;fb7cdb0a4f8da673da0a9818ec9a1576f953a8e8decf87a081827c11e4aa7138\&quot;&quot; \</span><br><span class="line">   -m multiport --dports 10001 -j CNI-DN-b24a4eb3a38dc5843c23a</span><br><span class="line">-A CNI-HOSTPORT-DNAT -p tcp -m comment --comment &quot;dnat name: \&quot;cbr0\&quot; id: \&quot;0961bad27f1a52a28701b7038120b8188e7a78df21f57a08428f021ab3c071e2\&quot;&quot; \</span><br><span class="line">   -m multiport --dports 443,9001,80,9002,9003,19004,19003,50051,25,465,993,995,7010,7020,12321 -j CNI-DN-f2390ee4e08c581b1ea73</span><br><span class="line">-A CNI-HOSTPORT-DNAT -p tcp -m comment --comment &quot;dnat name: \&quot;cbr0\&quot; id: \&quot;0961bad27f1a52a28701b7038120b8188e7a78df21f57a08428f021ab3c071e2\&quot;&quot; \</span><br><span class="line">   -m multiport --dports 10001 -j CNI-DN-f2390ee4e08c581b1ea73</span><br></pre></td></tr></table></figure><p>相关 PodIP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pod -o wide | grep xxxx-gateway</span></span><br><span class="line">xxxx-gateway-55fc694d76-rbxc7                   1/1     Running     0               3h53m   10.187.2.34   xxx.xx.xx.26   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>而两个 CNI-DN 链的最终 IP 为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -S CNI-DN-b24a4eb3a38dc5843c23a | grep -m1 to-destination</span></span><br><span class="line">-A CNI-DN-b24a4eb3a38dc5843c23a -p tcp -m tcp --dport 443 -j DNAT --to-destination 10.187.2.36:443</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -S CNI-DN-f2390ee4e08c581b1ea73 | grep -m1 to-destination</span></span><br><span class="line">-A CNI-DN-f2390ee4e08c581b1ea73 -p tcp -m tcp --dport 443 -j DNAT --to-destination 10.187.2.34:443</span><br></pre></td></tr></table></figure><p>后者的才是实际的 PodIP，前者的是没清理的，通过 cni plugin 文件也可以确认：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /var/lib/cni/networks/cbr0/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -l fb7cdb0a *</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -l 0961bad27f *</span></span><br><span class="line">10.187.2.34</span><br></pre></td></tr></table></figure><p>先匹配到第一个不存在 Pod 的 <code>CNI-DN-b24a4eb3a38dc5843c23a</code> 导致 dnat 到不存在的 PodIP 而无法访问到。清理掉它相关就行。但是根源要排查。</p><h2 id="排查相关"><a href="#排查相关" class="headerlink" title="排查相关"></a>排查相关</h2><p>根据 cni 配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/cni/net.d/10-flannel.conflist</span> </span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;cbr0&quot;,</span><br><span class="line">  &quot;cniVersion&quot;: &quot;0.3.1&quot;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;flannel&quot;,</span><br><span class="line">      &quot;delegate&quot;: &#123;</span><br><span class="line">        &quot;hairpinMode&quot;: true,</span><br><span class="line">        &quot;isDefaultGateway&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;portmap&quot;,</span><br><span class="line">      &quot;capabilities&quot;: &#123;</span><br><span class="line">        &quot;portMappings&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的 cni-plugins 只有 flannel 和 portmap，portmap 已经是最新版本 1.5.1 了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">portmap --version</span></span><br><span class="line">CNI portmap plugin v1.5.1</span><br><span class="line">CNI protocol versions supported: 0.1.0, 0.2.0, 0.3.0, 0.3.1, 0.4.0, 1.0.0</span><br></pre></td></tr></table></figure><p>集群和内核信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">uname</span> -a</span></span><br><span class="line">Linux centos79 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl  get node -o wide</span></span><br><span class="line">NAME          STATUS   ROLES         AGE     VERSION    INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">xx.xx.xx.37   Ready    master,node   4h10m   v1.27.16   xx.xx.xx.37   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   docker://26.1.4</span><br><span class="line">xx.xx.xx.38   Ready    master,node   4h10m   v1.27.16   xx.xx.xx.38   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   docker://26.1.4</span><br><span class="line">xx.xx.xx.26   Ready    master,node   4h10m   v1.27.16   xx.xx.xx.26   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   docker://26.1.4</span><br></pre></td></tr></table></figure><p>大概看了下 cni-plugin 的 portmap 源码，添加和删除逻辑都没问题，删除的时候检测链存在否，存在就删除，不存在则跳过。是 container runtime 调用的 cni-plugins，按照前面 iptables 的注释里的容器 ID 查看下 cri-dockerd 日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -xe --no-pager -u cri-dockerd | grep fb7cdb0a4f8da</span></span><br><span class="line">9月 14 11:39:49 centos79 cri-dockerd[9246]: &#123;&quot;cniVersion&quot;:&quot;0.3.1&quot;,&quot;hairpinMode&quot;:true,&quot;ipMasq&quot;:false,&quot;ipam&quot;:&#123;&quot;ranges&quot;:[[&#123;&quot;subnet&quot;:&quot;10.187.2.0/24&quot;&#125;]],&quot;routes&quot;:[&#123;&quot;dst&quot;:&quot;10.187.0.0/16&quot;&#125;],&quot;type&quot;:&quot;host-local&quot;&#125;,&quot;isDefaultGateway&quot;:true,&quot;isGateway&quot;:true,&quot;mtu&quot;:1450,&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;bridge&quot;&#125;time=&quot;2024-09-14T11:39:49+08:00&quot; level=info msg=&quot;Will attempt to re-write config file /data/kube/docker/containers/fb7cdb0a4f8da673da0a9818ec9a1576f953a8e8decf87a081827c11e4aa7138/resolv.conf as [nameserver 10.186.0.2 search default123.svc.cluster1.local. svc.cluster1.local. cluster1.local. options ndots:5]&quot;</span><br></pre></td></tr></table></figure><p>跳转的链名字 <code>CNI-DN-XXX</code> 看了下 portmap 源码是根据 名字+ 容器ID sha512 生成的，手动计算如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">&#x27;cbr0fb7cdb0a4f8da673da0a9818ec9a1576f953a8e8decf87a081827c11e4aa7138&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">   | <span class="built_in">sha512sum</span> | <span class="built_in">cut</span> -c 1-21</span></span><br><span class="line">b24a4eb3a38dc5843c23a</span><br></pre></td></tr></table></figure><p>说明确实是这个容器。看了下 portmap 源码使用的 iptables 库封装的命令选项是有带 <code>--wait</code> 选项的，即使 iptables 数量多也没问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -w -t nat -S | <span class="built_in">wc</span> -l</span></span><br><span class="line">1705</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -w -t nat -S | grep -Pv <span class="string">&#x27;KUBE-SVC|KUBE-SEP&#x27;</span> | <span class="built_in">wc</span> -l</span></span><br><span class="line">180</span><br></pre></td></tr></table></figure><p>理论上发生的可能性是 cri-dockerd 清理掉老 Pod 的时候没清理，但是看代码是有清理的：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Mirantis/cri-dockerd/blob/v0.3.14/core/sandbox_stop.go#L87-L92</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ds *dockerService)</span></span> StopPodSandbox(</span><br><span class="line">   ...</span><br><span class="line">ready, ok := ds.getNetworkReady(podSandboxID)</span><br><span class="line"><span class="keyword">if</span> !hostNetwork &amp;&amp; (ready || !ok) &#123;</span><br><span class="line"><span class="comment">// Only tear down the pod network if we haven&#x27;t done so already</span></span><br><span class="line">cID := config.BuildContainerID(runtimeName, podSandboxID)</span><br><span class="line">err := ds.network.TearDownPod(namespace, name, cID)</span><br></pre></td></tr></table></figure><p>清理的时候会打日志，也存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -xe --no-pager -u docker | grep fb7cdb0a4f8da</span><br><span class="line">9月 14 11:44:13 centos79 dockerd[2708]: time=&quot;2024-09-14T11:44:12.872235404+08:00&quot; level=warning msg=&quot;cleaning up after shim disconnected&quot; id=fb7cdb0a4f8da673da0a9818ec9a1576f953a8e8decf87a081827c11e4aa7138 namespace=moby</span><br></pre></td></tr></table></figure><p>而查看部署日志，相关时间点 <code>11:44:13</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-09-14 11:44:02,249 - xxx INFO - 开始卸载docker...</span><br></pre></td></tr></table></figure><p>询问了下测试人员，说这个时间点执行了卸载步骤，所以整个问题流程是:</p><ul><li>执行卸载流程，会先kubectl delete 删掉所有资源，触发 pod 删除</li><li>kubelet 调用 cri-dockerd 清理下线相关容器，但是同步的我们卸载步骤会停止了 docker 和删了 docker 目录</li><li>cri-dockerd 清理过程中连不上 docker ，导致 cri-dockerd 清理容器的时候无法执行完整的 <code>StopPodSandbox</code> 流程清理掉 nat 表的 <code>CNI-HOSTPORT-DNAT</code> 链规则。</li><li>卸载过程会完成后再部署环境，最后 hostPort 老规则还在先匹配</li></ul><p>避免就是卸载 docker 过程中，清理掉 nat 表的相关规则。</p><h2 id="类似的情况"><a href="#类似的情况" class="headerlink" title="类似的情况"></a>类似的情况</h2><ul><li><a href="https://github.com/rancher/rke/issues/3440">Kube-proxy doesn’t remove stale CNI-HOSTPORT-DNAT</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录最近碰到的一次 hostPort 不通排查的信息记录&lt;/p&gt;</summary>
    
    
    
    
    <category term="kubernetes" scheme="http://zhangguanzhang.github.io/tags/kubernetes/"/>
    
    <category term="hostPort" scheme="http://zhangguanzhang.github.io/tags/hostPort/"/>
    
    <category term="iptables" scheme="http://zhangguanzhang.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>在 IPv6 单栈下适配部署 K8S、中间件、应用适配</title>
    <link href="http://zhangguanzhang.github.io/2024/08/02/k8s-ipv6/"/>
    <id>http://zhangguanzhang.github.io/2024/08/02/k8s-ipv6/</id>
    <published>2024-08-02T18:10:30.000Z</published>
    <updated>2024-08-02T18:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录近期 IPv6 单栈下 一些坑</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>有客户的环境是 IPv6 单栈环境，需要部署我们产品，记录下适配遇到的坑。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>内部的虚机都是在 esxi 上，而到我们办公网台式机到 esxi 的链路上的交换机都不支持 IPv6 转发。但是视角放在同一个 esxi host 上，上面的所有虚机都是在 esxi 上的 vswitch 上，vswitch 是（内核）支持 IPv6 转发的。所以初步的模拟是一个 esxi host 上开下面的四台机器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                                             </span><br><span class="line">IPv4+IPv6       IPv6      IPv6      IPv6      </span><br><span class="line">┌──────┐      ┌───────┐ ┌───────┐ ┌───────┐  </span><br><span class="line">│      │      │       │ │       │ │       │  </span><br><span class="line">│      │      │       │ │       │ │       │  </span><br><span class="line">└──┬───┘      └───┬───┘ └───┬───┘ └───┬───┘  </span><br><span class="line">   │              │         │         │      </span><br><span class="line">   │              │         │         │      </span><br><span class="line">   │              │         │         │      </span><br><span class="line">   └──────────────┴─────────┴─────────┘ </span><br></pre></td></tr></table></figure><p>因为还涉及到后面的浏览器访问测试，所以左边是 Windows ：</p><table><thead><tr><th>Os</th><th>IPv4</th><th>IPv6</th><th>描述</th></tr></thead><tbody><tr><td>Windows</td><td>x.x.x.x</td><td><code>2002:db8:0:1::1/64</code></td><td>也是下面三台机器的网关</td></tr><tr><td>Centos 7.8</td><td></td><td><code>2002:db8:0:1::101/64</code></td><td></td></tr><tr><td>Centos 7.8</td><td></td><td><code>2002:db8:0:1::102/64</code></td><td></td></tr><tr><td>Centos 7.8</td><td></td><td><code>2002:db8:0:1::103/64</code></td><td></td></tr></tbody></table><p>网卡配置文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">#IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">NAME=ens160</span><br><span class="line">UUID=8813b773-201c-4fe1-80b3-5ab62586xxxx</span><br><span class="line">DEVICE=ens160</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPV6_PRIVACY=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=no</span><br><span class="line">IPV6ADDR=2002:db8:0:1::101/64</span><br><span class="line">IPV6_DEFAULTGW=2002:db8:0:1::1</span><br></pre></td></tr></table></figure><p>centos7 记得删掉 <code>IPV6_ADDR_GEN_MODE=stable-privacy</code>，不然我发现 IP 不生效，windows 记得开 <code>文件和打印机共享(回显请求)</code> 的 ipv4 ipv6 。</p><h3 id="一些知识"><a href="#一些知识" class="headerlink" title="一些知识"></a>一些知识</h3><p>IPv6 地址总长度为 128 比特，通常分为 8 组，每组为 4 个十六进制数的形式，每组十六进制数间用冒号分隔。 例如：</p><ul><li><code>FC00:0000:130F:0000:0000:09C0:876A:130B</code></li><li><code>FC00:0000:130F::09C0:876A:130B</code> 和上面是一样的，连续的 0 可以缩写，<strong>只能一处缩写</strong></li></ul><p>bind 的地址：</p><ul><li><code>::</code> 等同于 ipv4 的 <code>0.0.0.0</code></li><li><code>::1</code> 等同于ipv4 的 <code>127.0.0.1</code> 和 <code>localhost</code></li></ul><p>url 格式是 <code>http(s)://[xxx]:port</code> ，host 部分多了方括号。</p><h3 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h3><p>内部有 ansible 部署的，主要是基础上修改，之前节点名都是用的 IPv4 地址，直接部署后报错 kubelet 节点名无效，需要 <code>RFC 1123</code> 命名规范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubelet_node_status.go:92] &quot;Unable to register node with API server&quot; err=&quot;Node \&quot;2002.db8.0.1..101\&quot; is invalid: metadata.name: </span><br><span class="line">Invalid value: \&quot;2002.db8.0.1..101\&quot;: </span><br><span class="line">a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, &#x27;-&#x27; or &#x27;.&#x27;, </span><br><span class="line">and must start and end with an alphanumeric character (e.g. &#x27;example.com&#x27;, </span><br><span class="line">regex used for validation is &#x27;[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*&#x27;)&quot; node=&quot;2002.db8.0.1..101&quot;</span><br></pre></td></tr></table></figure><p>从1.21 版本支持双栈，下面的 CIDR 我只配置 IPv6 单栈，总结下改的点：</p><ul><li>把 <code>:</code> 改成 <code>.</code> 当 nodeName 不行，因为存在缩写情况会被替换成两个 <code>..</code> 而不匹配 <code>RFC 1123</code> 报错。</li><li>kubelet csr 的 CN <code>&quot;CN&quot;: &quot;system:node:xxx&quot;,</code> 也要和节点一致</li><li>因为是单栈，涉及到 127.0.0.1 和 0.0.0.0 的都改成对应 IPv6</li><li>Service CIDR 设置为 <code>2001:cafe:43::/112</code>：<ul><li>kubernetes service 会使用第一个主机位 IP <code>2001:cafe:43::1</code>，记得和 <code>::1</code> 加到 csr 的证书 IP 里</li><li>DNS IP 是第十个主机位，我设置的 <code>2001:cafe:43::a</code></li></ul></li><li>Cluster CIDR 设置为 <code>2001:cafe:42::/56</code>，如果选择更大的掩码段，需要设置 kube-controller-manager 的 <code>--node-cidr-mask-size-ipv6=</code></li></ul><p>两个网段来源于参考 <a href="https://docs.k3s.io/zh/networking/basic-network-options#dual-stack-ipv4--ipv6-networking">k3s 的 dual-stack-ipv4–ipv6-networking</a></p><h3 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h3><p>最终部署完发现 flannel 报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vxlan_network.go:265] failed to add v6 vxlanRoute (2002:db8:42:2::/64 -&gt; 2002:db8:42:2::): All attempts fail:</span><br><span class="line">#1: no route to host</span><br><span class="line">#2: no route to host</span><br><span class="line"></span><br><span class="line">retry.go:29] #0: no route to host</span><br><span class="line">retry.go:29] #1: no route to host</span><br><span class="line">retry.go:29] #2: no route to host</span><br><span class="line"></span><br><span class="line"># 路由信息</span><br><span class="line"># ip -6 r s | grep flannel</span><br><span class="line">2001:cafe:42:: dev flannel-v6.1 proto kernel metric 256 pref medium</span><br><span class="line">fe80::/64 dev flannel-v6.1 proto kernel metric 256 pref medium</span><br></pre></td></tr></table></figure><p>最终在官方仓库文档找到说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/flannel-io/flannel/blob/master/Documentation/configuration.md#dual-stack</span><br><span class="line">vxlan support ipv6 tunnel require kernel version &gt;= 3.12</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/zhangguanzhang/d006be666922f001be13b7a2432d96b3">Centos 7 升级内核</a>解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl  get node -o wide</span><br><span class="line">NAME                                      STATUS   ROLES         AGE   VERSION    INTERNAL-IP         EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION            CONTAINER-RUNTIME</span><br><span class="line">2002.0db8.0000.0001.0000.0000.0000.0101   Ready    master,node   11d   v1.27.15   2002:db8:0:1::101   &lt;none&gt;        CentOS Linux 7 (Core)   4.19.113-300.el7.x86_64   docker://25.0.5</span><br><span class="line">2002.0db8.0000.0001.0000.0000.0000.0102   Ready    master,node   11d   v1.27.15   2002:db8:0:1::102   &lt;none&gt;        CentOS Linux 7 (Core)   4.19.113-300.el7.x86_64   docker://25.0.5</span><br><span class="line">2002.0db8.0000.0001.0000.0000.0000.0103   Ready    master,node   11d   v1.27.15   2002:db8:0:1::103   &lt;none&gt;        CentOS Linux 7 (Core)   4.19.113-300.el7.x86_64   docker://25.0.5</span><br><span class="line">$  kubectl get pod -n kube-system  -o wide</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS       AGE    IP                   NODE                                      NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-5b69bc466f-bkv7t              1/1     Running   1 (7d4h ago)   11d    2001:cafe:42:2::1a   2002.0db8.0000.0001.0000.0000.0000.0103   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-5b69bc466f-f8g7g              1/1     Running   1 (7d4h ago)   7d6h   2001:cafe:42:1::1a   2002.0db8.0000.0001.0000.0000.0000.0102   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-5b69bc466f-svvgz              1/1     Running   1              11d    2001:cafe:42:1::1b   2002.0db8.0000.0001.0000.0000.0000.0102   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-g6bkw                 1/1     Running   5 (3d ago)     11d    2002:db8:0:1::101    2002.0db8.0000.0001.0000.0000.0000.0101   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-r8nnb                 1/1     Running   1 (7d4h ago)   11d    2002:db8:0:1::102    2002.0db8.0000.0001.0000.0000.0000.0102   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-rlnlb                 1/1     Running   1 (7d4h ago)   11d    2002:db8:0:1::103    2002.0db8.0000.0001.0000.0000.0000.0103   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-state-metrics-5d47d4878c-cf974   1/1     Running   1 (7d4h ago)   11d    2001:cafe:42:2::19   2002.0db8.0000.0001.0000.0000.0000.0103   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-local-dns-92td8                  1/1     Running   9 (3d ago)     11d    2002:db8:0:1::101    2002.0db8.0000.0001.0000.0000.0000.0101   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-local-dns-c7tq6                  1/1     Running   2 (7d4h ago)   11d    2002:db8:0:1::102    2002.0db8.0000.0001.0000.0000.0000.0102   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">node-local-dns-r6g5f                  1/1     Running   2 (7d4h ago)   11d    2002:db8:0:1::103    2002.0db8.0000.0001.0000.0000.0000.0103   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>测试跨节点通信：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ ping6 -c 2 2001:cafe:42:2::1a</span><br><span class="line">PING 2001:cafe:42:2::1a(2001:cafe:42:2::1a) 56 data bytes</span><br><span class="line">64 bytes from 2001:cafe:42:2::1a: icmp_seq=1 ttl=63 time=0.178 ms</span><br><span class="line">64 bytes from 2001:cafe:42:2::1a: icmp_seq=2 ttl=63 time=0.132 ms</span><br><span class="line"></span><br><span class="line">--- 2001:cafe:42:2::1a ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1027ms</span><br><span class="line">rtt min/avg/max/mdev = 0.132/0.155/0.178/0.023 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名解析</span></span><br><span class="line">$ dig @2001:cafe:42:2::1a  kubernetes.default.svc.cluster.local +short AAAA</span><br><span class="line">2001:cafe:43::1</span><br><span class="line"></span><br><span class="line">$ kubectl -n default describe svc kubernetes </span><br><span class="line">Name:              kubernetes</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            component=apiserver</span><br><span class="line">                   provider=kubernetes</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          &lt;none&gt;</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP Family Policy:  SingleStack</span><br><span class="line">IP Families:       IPv6</span><br><span class="line">IP:                2001:cafe:43::1</span><br><span class="line">IPs:               2001:cafe:43::1</span><br><span class="line">Port:              https  443/TCP</span><br><span class="line">TargetPort:        6443/TCP</span><br><span class="line">Endpoints:         [2002:db8:0:1::101]:6443,[2002:db8:0:1::102]:6443,[2002:db8:0:1::103]:6443</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="nodelocaldns-和-link-local-问题"><a href="#nodelocaldns-和-link-local-问题" class="headerlink" title="nodelocaldns 和 link local 问题"></a>nodelocaldns 和 link local 问题</h3><p>发现 nodelocaldns 有 <a href="https://github.com/kubernetes/dns/pull/418/files">Add ipv6 support to node-local-dns</a> 支持，之前 IPv4 nodelocaldns 是使用 IPv4 的 <code>Link-local address</code> 的 <code>169.254.20.10</code> ，然后参照 pr 里面的 IPv6 <code>fe80:169:254::1</code> 发现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error listening: listen tcp6 [fe80:169:254::1]:8080: bind: invalid argument</span><br></pre></td></tr></table></figure><p>最后怀疑不是 nodelocaldns 问题，写了个小 demo 验证：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">serverIP := os.Args[<span class="number">1</span>]</span><br><span class="line">serverPort := <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听地址和端口</span></span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp6&quot;</span>, fmt.Sprintf(<span class="string">&quot;[%s]:%d&quot;</span>, serverIP, serverPort))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error listening:&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Listening on [%s]:%d\n&quot;</span>, serverIP, serverPort)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Error accepting connection:&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;Connection accepted.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现无法 bind <code>fe80</code> 开头报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr add ee80:169:254::1/128 dev lo</span><br><span class="line">$ ip addr add fe80:169:254::1/128 dev lo</span><br><span class="line">$ go run main.go ee80:169:254::1</span><br><span class="line">Listening on [ee80:169:254::1]:8080</span><br><span class="line">^Csignal: interrupt</span><br><span class="line">$ go run main.go fe80:169:254::1</span><br><span class="line">Error listening: listen tcp6 [fe80:169:254::1]:8080: <span class="built_in">bind</span>: invalid argument</span><br><span class="line">[root@guan ~/test/gotest]<span class="comment"># uname -a</span></span><br><span class="line">Linux guan 5.4.0-182-generic <span class="comment">#202-Ubuntu SMP Fri Apr 26 12:29:36 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@guan ~/test/gotest]<span class="comment"># ip -6 a s lo</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    inet6 ee80:169:254::1/128 scope global </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80:169:254::1/128 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>调试发现最终是 syscall 报错，使用 python 写类似代码也一样，然发现后这个网段 <code>fe80::/10</code> 只能指定网卡名或者 index：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go fe80:169:254::1%lo</span><br><span class="line">Listening on [fe80:169:254::1%lo]:8080</span><br><span class="line"><span class="comment"># 其他窗口 curl，带网卡名才行</span></span><br><span class="line">$ curl -g [fe80:169:254::1%lo]:8080</span><br><span class="line">curl: (56) Recv failure: Connection reset by peer</span><br><span class="line">$ curl -g [fe80:169:254::1]:8080</span><br><span class="line">curl: (7) Couldn<span class="string">&#x27;t connect to server</span></span><br></pre></td></tr></table></figure><p>需要获取网卡名字，可以参照抄了下 calico 的 autoDetect 方法修改了下写了个传入 ipv6 目标地址，获取从本机哪张网卡出去的名字：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/projectcalico/calico/blob/5d7c8554e2c7b75ec31ec2a7d234c42049742a4d/node/pkg/lifecycle/startup/autodetection/reachaddr.go#L27</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReachDestinationInterfaceName</span><span class="params">(dest <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a UDP connection to determine which external IP address is</span></span><br><span class="line"><span class="comment">// used to access the supplied destination.</span></span><br><span class="line">protocol := <span class="string">&quot;udp6&quot;</span></span><br><span class="line"><span class="keyword">if</span> dest[<span class="number">0</span>] != <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">dest = fmt.Sprintf(<span class="string">&quot;[%s]&quot;</span>, dest)</span><br><span class="line">&#125;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;%s:80&quot;</span>, dest)</span><br><span class="line">conn, err := net.Dial(protocol, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close() <span class="comment">// nolint: errcheck</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the local address as a golang IP and use that to find the matching</span></span><br><span class="line"><span class="comment">// interface CIDR.</span></span><br><span class="line">addr := conn.LocalAddr()</span><br><span class="line"><span class="keyword">if</span> addr == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;no address detected by connecting to %s&quot;</span>, dest)</span><br><span class="line">&#125;</span><br><span class="line">udpAddr := addr.(*net.UDPAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a full list of interface and IPs and find the CIDR matching the</span></span><br><span class="line"><span class="comment">// found IP.</span></span><br><span class="line">netIfaces, err := net.Interfaces()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, iface := <span class="keyword">range</span> netIfaces &#123;</span><br><span class="line">netAddrs, err := iface.Addrs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, netAddr := <span class="keyword">range</span> netAddrs &#123;</span><br><span class="line">ifNet, _, _ := net.ParseCIDR(netAddr.String())</span><br><span class="line"><span class="keyword">if</span> udpAddr.IP.Equal(ifNet) &#123;</span><br><span class="line"><span class="keyword">return</span> iface.Name, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;autodetected IPv6 address does not match any addresses found on local interfaces: %s&quot;</span>, udpAddr.IP.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 demo，获取访问指定 ip 会使用本机哪张网卡和 ip：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ipStr := os.Args[<span class="number">1</span>]</span><br><span class="line">inetVersion := <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> strings.Contains(ipStr, <span class="string">&quot;:&quot;</span>) &#123;</span><br><span class="line">inetVersion = <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">localInterface, _ := ReachDestinationInterfaceName(ipStr, inetVersion)</span><br><span class="line">localIP, _ := GetInterfaceIPs(localInterface, inetVersion)</span><br><span class="line">fmt.Printf(<span class="string">&quot;interface:%s localIP:%s\n&quot;</span>, localInterface, localIP)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">splitByLastColon</span><span class="params">(s <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="comment">// Find the last occurrence of &quot;:&quot;</span></span><br><span class="line">index := strings.LastIndex(s, <span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="comment">// No colon found, return the whole string as the first part</span></span><br><span class="line"><span class="keyword">return</span> s, <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Split the string into two parts</span></span><br><span class="line">part1 := s[:index]</span><br><span class="line">part2 := s[index+<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> part1, part2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReachDestinationInterfaceName</span><span class="params">(dest <span class="type">string</span>, version <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a UDP connection to determine which external IP address is</span></span><br><span class="line"><span class="comment">// used to access the supplied destination.</span></span><br><span class="line">protocol := fmt.Sprintf(<span class="string">&quot;udp%d&quot;</span>, version)</span><br><span class="line"><span class="keyword">if</span> dest[<span class="number">0</span>] != <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line">dest = fmt.Sprintf(<span class="string">&quot;[%s]&quot;</span>, dest)</span><br><span class="line">&#125;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;%s:80&quot;</span>, dest)</span><br><span class="line">conn, err := net.Dial(protocol, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close() <span class="comment">// nolint: errcheck</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the local address as a golang IP and use that to find the matching</span></span><br><span class="line"><span class="comment">// interface CIDR.</span></span><br><span class="line">addr := conn.LocalAddr()</span><br><span class="line"><span class="keyword">if</span> addr == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;no address detected by connecting to %s&quot;</span>, dest)</span><br><span class="line">&#125;</span><br><span class="line">udpAddr := addr.(*net.UDPAddr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a full list of interface and IPs and find the CIDR matching the</span></span><br><span class="line"><span class="comment">// found IP.</span></span><br><span class="line">netIfaces, err := net.Interfaces()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, iface := <span class="keyword">range</span> netIfaces &#123;</span><br><span class="line">netAddrs, err := iface.Addrs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, netAddr := <span class="keyword">range</span> netAddrs &#123;</span><br><span class="line">ifNet, _, _ := net.ParseCIDR(netAddr.String())</span><br><span class="line"><span class="keyword">if</span> udpAddr.IP.Equal(ifNet) &#123;</span><br><span class="line"><span class="keyword">return</span> iface.Name, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;autodetected IPv%d address does not match any addresses found on local interfaces: %s&quot;</span>, version, udpAddr.IP.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInterfaceIPs</span><span class="params">(ifaceName <span class="type">string</span>, inetVersion <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">iface, err := net.InterfaceByName(ifaceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addrs, err := iface.Addrs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ipAddr <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">ipNet, _, err := net.ParseCIDR(addr.String())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> inetVersion == <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ipNet.To4() != <span class="literal">nil</span> &#123;</span><br><span class="line">ipAddr = ipNet.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 排除掉本地链路地址</span></span><br><span class="line"><span class="keyword">if</span> ipNet.To16() != <span class="literal">nil</span> &amp;&amp; !ipNet.IsLinkLocalUnicast() &#123;</span><br><span class="line">ipAddr = ipNet.String()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ipAddr, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$./reach 223.5.5.5</span><br><span class="line">interface:ens18 localIP:192.168.2.112</span><br><span class="line">$ ./ ip a s ens18</span><br><span class="line">2: ens18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 7e:bf:9c:27:f5:9e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.2.112/24 brd 192.168.2.255 scope global ens18</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::7cbf:9cff:fe27:f59e/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">$ ./reach 2408:8656:22df:ff01::13:111</span><br><span class="line">interface:ens160 localIP:2408:8656:22df:ff01::13:181</span><br><span class="line">$ ip a s ens160</span><br><span class="line">2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:a0:df:2e brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet6 2408:8656:22df:ff01::13:181/119 scope global </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::250:56ff:fea0:df2e/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="中间件层面"><a href="#中间件层面" class="headerlink" title="中间件层面"></a>中间件层面</h3><p>大部分中间件都会自动判断而监听 IPv6 地址，但是有些会有问题。</p><h4 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h4><p>es 无法组件集群：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;type&quot;: &quot;server&quot;, &quot;timestamp&quot;: &quot;2024-07-23T10:59:43,648+08:00&quot;, &quot;level&quot;: &quot;WARN&quot;, &quot;component&quot;: &quot;o.e.d.HandshakingTransportAddressConnector&quot;, &quot;cluster.name&quot;: &quot;xxxes&quot;, </span><br><span class="line">&quot;node.name&quot;: &quot;es-host1.default&quot;, &quot;message&quot;: &quot;[connectToRemoteMasterNode[[2001:cafe:43::3250]:9300]] completed handshake with [&#123;es-host3.default&#125;&#123;3e7q-VGnRmWdh1XRtvb0Ww&#125;</span><br><span class="line">&#123;aCnHTNTLRp-rRVVg7N_z0Q&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dm&#125;&#123;xpack.installed=true, transform.node=false&#125;] but followup connection failed&quot;, </span><br><span class="line">&quot;stacktrace&quot;: [&quot;org.elasticsearch.transport.ConnectTransportException: [es-host3.default][127.0.0.1:9300] handshake failed. unexpected remote node &#123;es-host1.default&#125;&#123;n19UyOGnQpiErI0TW_jOPw&#125;&#123;6Wawn96FShGZyhYlo9BgDQ&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dm&#125;&#123;xpack.installed=true, transform.node=false&#125;&quot;,</span><br></pre></td></tr></table></figure><p>看报错信息是其他几个 es 上报 IP 是 127.0.0.1 了，Pod 内的 lo 还是有 127.0.0.1 IP 的。参照官方文档 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#unicast.hosts">unicast.hosts</a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html">modules-network</a> 尝试 <code>network.publish_host:</code> 设置 <code>_global_</code> 也不行 <code>_site_ </code>，最后设置的 <code>network.publish_host: _eth0:ipv6_</code> 上报 IP 才正确。</p><h4 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h4><p>默认配置无法组建集群，根据 <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1358311">redhat</a> 得知 3.6.3 以后都支持，然后参考官方文档 <a href="https://www.rabbitmq.com/docs/networking#distribution-ipv6">distribution-ipv6</a> 添加 env：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># these flags will be used by RabbitMQ nodes</span><br><span class="line">RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=&quot;-kernel inetrc &#x27;/etc/rabbitmq/erl_inetrc&#x27; -proto_dist inet6_tcp&quot;</span><br><span class="line"># these flags will be used by CLI tools</span><br><span class="line">RABBITMQ_CTL_ERL_ARGS=&quot;-proto_dist inet6_tcp&quot;</span><br></pre></td></tr></table></figure><p>然后 erl_inetrc 写下面内容挂载进去，压根无法启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;inet6,true&#125;.</span><br></pre></td></tr></table></figure><p>最后搜索找到 <a href="https://stackoverflow.com/questions/49107068/rabbitmq-wont-cluster-nxdomain">stackoverflow</a> 说这些 env 要写 rabbitmq-env.conf ，然后就写文件里可以启动，但是死活加不了集群。然后查看端口发现还是监听的 ipv4，参照文档 <a href="https://www.rabbitmq.com/docs/configure#config-items">config-items</a> <a href="https://www.rabbitmq.com/docs/networking#distribution-interface">distribution-interface</a> 在 rabbitmq.conf 里添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distribution.listener.interface = ::</span><br><span class="line">listeners.tcp.default = 2408:8656:22df:ff01::13:182:5672</span><br><span class="line">listeners.tcp.management = 2408:8656:22df:ff01::13:182:15672</span><br></pre></td></tr></table></figure><p>后监听 ip 正常了，但是还是无法 join cluster 报错无法解析域名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -ti rabbitmq-2 bash -c <span class="string">&quot;rabbitmqctl stop_app &amp;&amp; rabbitmqctl  join_cluster rabbit@rabbitmq-cluster1 &amp;&amp; rabbitmqctl start_app&quot;</span></span></span><br><span class="line">rabbit@rabbitmq-cluster1:</span><br><span class="line">  * unable to connect to epmd (port 4369) on rabbitmq-cluster1: nxdomain (non-existing domain)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -ti rabbitmq-2  rabbitmq-diagnostics resolve_hostname rabbitmq-cluster1 --address-family IPv6</span> </span><br><span class="line">Asking node rabbitmq-cluster2@rabbitmq-cluster2 to resolve hostname rabbitmq-cluster1 to IPv6 addresses...</span><br><span class="line">2408:8656:22df:ff01::13:181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -ti rabbitmq-2 getent hosts rabbitmq-cluster1</span></span><br><span class="line">2408:8656:22df:ff01::13:181 rabbitmq-cluster1</span><br></pre></td></tr></table></figure><p>最后发现是 nodename 错了，没用 prefix 直接用的 rabbitmq-clusterx ，应该使用 <code>&lt;prefix&gt;@&lt;hostname&gt;</code> ，相关 compose 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;rabbitmq:3.12&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;rabbitmq-2&quot;</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&quot;rabbitmq-cluster2&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># unless-stopped</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">&#x27;/etc/rabbitmq/&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_NODENAME=rabbit@rabbitmq-cluster2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_ERLANG_COOKIE=xxxx</span></span><br><span class="line">        <span class="comment">#- ERL_INETRC=/etc/rabbitmq/erl_inetrc</span></span><br><span class="line">        <span class="comment">#- RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=&quot;-proto_dist inet6_tcp&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RABBITMQ_CTL_ERL_ARGS=&quot;-proto_dist</span> <span class="string">inet6_tcp&quot;</span></span><br><span class="line">        <span class="comment">#- ERL_EPMD_ADDRESS=&quot;::1&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./rabbitmq-env.conf:/etc/rabbitmq/rabbitmq-env.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./hosts:/etc/hosts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Hongkong:/etc/localtime</span></span><br></pre></td></tr></table></figure><p>这里吐槽下 rabbitmq 的 github 人员，rabbitmq-diagnostics 能解析域名，join 报错，直接把我提的 discussions 给 lock 掉还说是属于网络问题。 </p><h3 id="应用层面"><a href="#应用层面" class="headerlink" title="应用层面"></a>应用层面</h3><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><p>最开始有个数据库初始化的 golang 应用，该应用（使用 <a href="https://github.com/redis/go-redis">github.com&#x2F;redis&#x2F;go-redis</a> ）需要连 redis 报错了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis setnx failed dial tcp: address 2002:db8:0:1::101:8531: too many colons in address</span><br></pre></td></tr></table></figure><p>这个问题是代码里把 <code>IPv6:Port</code> 地址当成 <code>IPv4:Port</code> 去解析了，类似 <code>Split(&quot;:&quot;)</code> 不等于 2 而报错。但是研发反馈出错的地方是每次变化的，每个使用 redis 的地方都会随机出现，后面让他写了个最小 demo 源码发给我，我 <a href="https://zhangguanzhang.github.io/2021/07/20/dlv-remote/">dlv 远程调试了下</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">(dlv) so</span><br><span class="line">&gt; github.com/go-redis/redis.(*ClusterClient).defaultProcess() D:/Install/Go/GOPATH/pkg/mod/github.com/go-redis/redis@v6.15.9+incompatible/cluster.go:954 (PC: 0x7b9385)</span><br><span class="line">Values returned:</span><br><span class="line">        moved: true</span><br><span class="line">        ask: false</span><br><span class="line">        addr: &quot;2002:db8:0:1::103:8533&quot;</span><br><span class="line"></span><br><span class="line">   949:                         continue</span><br><span class="line">   950:                 &#125;</span><br><span class="line">   951:</span><br><span class="line">   952:                 var moved bool</span><br><span class="line">   953:                 var addr string</span><br><span class="line">=&gt; 954:                 moved, ask, addr = internal.IsMovedError(err)</span><br><span class="line">   955:                 if moved || ask &#123;</span><br><span class="line">   956:                         node, err = c.nodes.GetOrCreate(addr)</span><br><span class="line">   957:                         if err != nil &#123;</span><br><span class="line">   958:                                 break</span><br><span class="line">   959:                         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(dlv) so</span><br><span class="line">&gt; github.com/go-redis/redis.(*baseClient).defaultProcess() D:/Install/Go/GOPATH/pkg/mod/github.com/go-redis/redis@v6.15.9+incompatible/redis.go:186 (PC: 0x7fe612)</span><br><span class="line">Values returned:</span><br><span class="line">        ~r0: *github.com/go-redis/redis/internal/pool.Conn nil</span><br><span class="line">        ~r1: error(*net.OpError) *&#123;</span><br><span class="line">                Op: &quot;dial&quot;,</span><br><span class="line">                Net: &quot;tcp&quot;,</span><br><span class="line">                Source: net.Addr nil,</span><br><span class="line">                Addr: net.Addr nil,</span><br><span class="line">                Err: error(*net.AddrError) *&#123;</span><br><span class="line">                        Err: &quot;too many colons in address&quot;,</span><br><span class="line">                        Addr: &quot;2002:db8:0:1::103:8533&quot;,&#125;,&#125;</span><br><span class="line"></span><br><span class="line">   181:         for attempt := 0; attempt &lt;= c.opt.MaxRetries; attempt++ &#123;</span><br><span class="line">   182:                 if attempt &gt; 0 &#123;</span><br><span class="line">   183:                         time.Sleep(c.retryBackoff(attempt))</span><br><span class="line">   184:                 &#125;</span><br><span class="line">   185:</span><br><span class="line">=&gt; 186:                 cn, err := c.getConn()</span><br><span class="line">   187:                 if err != nil &#123;</span><br><span class="line">   188:                         cmd.setErr(err)</span><br><span class="line">   189:                         if internal.IsRetryableError(err, true) &#123;</span><br><span class="line">   190:                                 continue</span><br><span class="line">   191:                         &#125;</span><br><span class="line">(dlv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(dlv) p c.opt</span><br><span class="line">(&quot;*github.com/go-redis/redis.Options&quot;)(0xc0000d8240)</span><br><span class="line">*github.com/go-redis/redis.Options &#123;</span><br><span class="line">        Network: &quot;tcp&quot;,</span><br><span class="line">        Addr: &quot;[2002:db8:0:1::101]:8531&quot;,</span><br><span class="line">...</span><br><span class="line">(dlv) c</span><br><span class="line">&gt; github.com/go-redis/redis.(*baseClient).defaultProcess() D:/Install/Go/GOPATH/pkg/mod/github.com/go-redis/redis@v6.15.9+incompatible/redis.go:186 (hits goroutine(1):45 total:52) (PC: 0x7fe5f3)</span><br><span class="line">   181:         for attempt := 0; attempt &lt;= c.opt.MaxRetries; attempt++ &#123;</span><br><span class="line">   182:                 if attempt &gt; 0 &#123;</span><br><span class="line">   183:                         time.Sleep(c.retryBackoff(attempt))</span><br><span class="line">   184:                 &#125;</span><br><span class="line">   185:</span><br><span class="line">=&gt; 186:                 cn, err := c.getConn()</span><br><span class="line">   187:                 if err != nil &#123;</span><br><span class="line">   188:                         cmd.setErr(err)</span><br><span class="line">   189:                         if internal.IsRetryableError(err, true) &#123;</span><br><span class="line">   190:                                 continue</span><br><span class="line">   191:                         &#125;</span><br><span class="line">(dlv) p c.opt</span><br><span class="line">(&quot;*github.com/go-redis/redis.Options&quot;)(0xc0000d8300)</span><br><span class="line">*github.com/go-redis/redis.Options &#123;</span><br><span class="line">        Network: &quot;tcp&quot;,</span><br><span class="line">        Addr: &quot;2002:db8:0:1::103:8533&quot;,</span><br><span class="line">        Dialer: github.com/go-redis/redis.(*Options).init.func1,</span><br><span class="line">        OnConnect: nil,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到大概问题，这里 addr 变成了没带方括号的，addr 只有一个地方 <code>moved, ask, addr = internal.IsMovedError(err)</code> 获取的，内部逻辑是：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsMovedError</span><span class="params">(err <span class="type">error</span>)</span></span> (moved <span class="type">bool</span>, ask <span class="type">bool</span>, addr <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> !IsRedisError(err) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := err.Error()</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(s, <span class="string">&quot;MOVED &quot;</span>) &#123;</span><br><span class="line">moved = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> strings.HasPrefix(s, <span class="string">&quot;ASK &quot;</span>) &#123;</span><br><span class="line">ask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ind := strings.LastIndex(s, <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ind == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">false</span>, <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">addr = s[ind+<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是 redis 返回的 <code>MOVED 14443 2002:db8:0:1::103:8533</code> 重定向字样里取 IP 地址，也就是一开始从 DSN 字符串有方括号是能识别成 IPv6 地址，但是后面操作 redis 发生重定向就使用这个 IP 去做连接，看 redis 最新源码 <code>void clusterRedirectClient</code> 发现 redis server 并不会返回 IPv6 地址加方括号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/redis/redis/blob/89742a95dbd4e95f5112136e4bcff698195e205c/src/cluster.c#L1179</span></span><br><span class="line">  addReplyErrorSds(c,sdscatprintf(sdsempty(),</span><br><span class="line">                      <span class="string">&quot;-%s %d %s:%d&quot;</span>,</span><br><span class="line">                      (error_code == CLUSTER_REDIR_ASK) ? <span class="string">&quot;ASK&quot;</span> : <span class="string">&quot;MOVED&quot;</span>,</span><br><span class="line">                      hashslot, clusterNodePreferredEndpoint(n), port));</span><br></pre></td></tr></table></figure><p>搜索 redis move ipv6 搜到了 issue <a href="https://github.com/redis/redis/issues/3076">redis-cli ipv6 issue on redis cluster</a>，发现其他语言的 SDK 都是处理 MOVE 后的地址加判断，于是去看 <a href="https://github.com/redis/go-redis">github.com&#x2F;redis&#x2F;go-redis</a> 最新版本 <code>isMovedError</code> 方法发现 4个月之前修复了：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/redis/go-redis/blob/00d98485f8357d016139ece133bd3272e7ff2526/error.go#L114/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isMovedError</span><span class="params">(err <span class="type">error</span>)</span></span> (moved <span class="type">bool</span>, ask <span class="type">bool</span>, addr <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> !isRedisError(err) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := err.Error()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> strings.HasPrefix(s, <span class="string">&quot;MOVED &quot;</span>):</span><br><span class="line">moved = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> strings.HasPrefix(s, <span class="string">&quot;ASK &quot;</span>):</span><br><span class="line">ask = <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ind := strings.LastIndex(s, <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ind == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">false</span>, <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addr = s[ind+<span class="number">1</span>:]</span><br><span class="line">addr = internal.GetAddr(addr) <span class="comment">// &lt;---- 这里是处理</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让升级引用库版本大于等于 9.5.2 后解决。</p><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dial tcp [2002:db8:0:1::101:3306]:3306: connect: no route to host</span><br></pre></td></tr></table></figure><p>该问题是因为 IPv6 地址可以缩写，然后 <code>:3306</code> 在 DSN 字符串里:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</span><br><span class="line">[username[:password]@][tcp[(2002:db8:0:1::101:3306)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</span><br></pre></td></tr></table></figure><p>被业务的 mysql client SDK 解析当作 IPv6 主机位而连错 IP，端口当主机位其他类型的 SDK 里也会出现，注意理解该问题本质。可以参照前面 redis 结尾的函数先处理先 mysql IP 地址再传入 DSN 字符串里。</p><h4 id="达梦"><a href="#达梦" class="headerlink" title="达梦"></a>达梦</h4><p>后面 golang 上达梦单机下连不上，驱动用的 <a href="https://gitee.com/chunanyong/dm/">https://gitee.com/chunanyong/dm/</a> , 升级下就解决了，原因是 <code>net.ParseIP</code> 会把 ipv6 的左右侧方括号去掉。<br>然后另一个达梦连接中间件代理服务在集群模式下也测出问题，达梦官方人员给的连接配置是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/dm_svc.conf</span><br><span class="line">...</span><br><span class="line">DMCLUSTER=([2002:db8:0:1::101]:5236,[2002:db8:0:1::102]:5236)</span><br></pre></td></tr></table></figure><p>上面这种形式会导致有问题，报错 <code>2002:db8:0:1::102:0 invalid port</code> 啥的，调试发现驱动的集群配置下，取 port 逻辑没考虑集群模式，最后一个 port 没取到使用 golang 的零值 0，然后 hack 后又发现 ipv6 的方括号没了，这俩问题已经提 <a href="https://gitee.com/chunanyong/dm/issues/IBAIHS">issue</a> 反馈了。</p><p>升级驱动解决单机达梦方括号问题，达梦集群模式需要 hack 两个地方代码。</p><h3 id="组网测试"><a href="#组网测试" class="headerlink" title="组网测试"></a>组网测试</h3><p>随着后续应用开始介入，那个 windows 不支持多人同时登录非常难受，记得以前配置过，但是还有 windows&#x2F;macOS 上 app 端，还要看 app 端能否使用 IPv6 连 server。就考虑有没有隧道的形式组网：</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/k8s/ipv6-on-ipv4-tunel.png" alt="ipv6-on-ipv4-tunel"></p><p>windows 自带的内置的最好了，不然省得后续给开发和测试写个安装文档，搜了下有个 <code>Teredo</code> 但是看了下只有 Client 部署，Server 的部署没有，搜到开源的 miredo，但是部署 server 后启动报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/sbin/miredo-server -f -c /etc/miredo/miredo-server.conf</span><br><span class="line">...</span><br><span class="line">Teredo server UDP socket err: Server IPv4 address must be global unicast</span><br></pre></td></tr></table></figure><p>报错说不是 IPv4 组播地址，但是主机位写 255 还是不行，代码里搜了下这个报错找到 <a href="https://www.remlab.net/miredo/lcov/trunk/libteredo/v4global.c.gcov.html">校验逻辑</a>。然后没用过这些 c 库看不懂逻辑，就换 headscale 得了。</p><p>双栈机器上：</p><ul><li><a href="https://zhangguanzhang.github.io/2024/07/25/headscale/">安装 headsacle</a> ，<code>ip_prefix</code> 关闭 IPv4 保留 IPv6 那个网段 <code>fd7a:115c:a1e0::/48</code></li><li>安装 derp + tailscale，这个 <code>tailscale up</code> 时候带上 <code>--advertise-routes 2002:db8:0:1::/64</code></li><li>然后开启这个的路由 <code>headscale routes enable -r 1</code></li><li>双栈机器开启 ipv4 ipv6 forward sysctl</li></ul><p>后面发现 windows 上开了客户端后访问 101 发现来源 IP 是双栈机器的 IPv6 IP，因为 tailscale linux 客户端默认是开启了 SNAT，把双栈机器上的 snat 关了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale <span class="built_in">set</span> --snat-subnet-routes=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>因为双栈机器是 IPv6 机器的网关，所以这样没做 SNAT 后：</p><ul><li>windows&#x2F;MacOS&#x2F;手机（<code>fd7a:115c:a1e0::/48</code>） 访问 <code>2002:db8:0:1::/64</code> 走本机路由到接口 tailscale ，会封包隧道发往到双栈机器上。</li><li>然后双栈机器上解包后，本机开了ipv4 ipv6 forward ，走路由 <code>2002:db8:0:1::/64</code> 到右侧的单栈机器，右侧机器回包（<code>fd7a:115c:a1e0::/48</code>）走自己默认路由到双栈机器，再发到客户端。</li></ul><p>然后测试了下发现偶尔会断：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh 2002:db8:0:1::101</span><br><span class="line">ssh: connect to host 2002:db8:0:1::101 port 22: No route to host</span><br><span class="line">$ ssh 2002:db8:0:1::101</span><br><span class="line">root@2002:db8:0:1::101<span class="string">&#x27;s password: </span></span><br></pre></td></tr></table></figure><p>双栈机器上 <code>ip -6 r s | grep 2002:db8</code> 看路由表又没问题，怀疑是 <code>2002:db8:0:1::/64</code> 的偶尔走出去到物理交换机上了，然后给双栈机器增加了个网卡隔离开，也就是把 IPv6 主机位 1 的 IP 配置在该网卡上，测试下发现很稳定。</p><p>然后给研发和测试写了个安装 tailscale 客户端和接入文档，很方便。</p><h2 id="2024-x2F-10-后续的一些问题和发现"><a href="#2024-x2F-10-后续的一些问题和发现" class="headerlink" title="2024&#x2F;10 后续的一些问题和发现"></a>2024&#x2F;10 后续的一些问题和发现</h2><p>pc 端也有应用研发，适配后，反馈用 ipv6 IP url 软件内的登录页是有登录框显示，配置的 hosts 域名则不行也就是下面相关逻辑：</p><ol><li>点击登录按钮后有个弹出的内嵌页面，会请求域名 url</li><li>把获取到 http body 展示在内嵌页</li></ol><p>现象是内嵌页一直是空白，反馈说打开 Charles 抓包就能正常显示。没办法只有让他改源码，让在 1 的网络请求结果和错误都打印下看看，给我反馈说是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERR_NAME_NOT_RESOLVED</span><br></pre></td></tr></table></figure><p>确实是域名无法解析，但是我们业务也可以直接浏览器访问，浏览器用 hosts 域名可以访问的，有些软件会无视系统的 hosts 文件是自己实现相关域名解析逻辑，让他从这方面排查下看看。</p><p>第二天他在 Linux 上发现相关问题，开了猫咪代理后内嵌页有内容，问他是不是猫咪自动更新了，给我截图了下界面，看了下 <code>IPv6</code> 选项开启的，让他关闭后再试试就不行了，而 windows 上猫咪开不开 IPv6 选项都不行。<br>发现很奇怪，就要来了安装包，自己开了个 windows 也复现这个了问题，想着看了下猫咪 meta 内核源码能不能找到眉目， yaml ipv6 字段使用的地方：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> General <span class="keyword">struct</span> &#123;</span><br><span class="line">Inbound</span><br><span class="line">Mode                    T.TunnelMode      <span class="string">`json:&quot;mode&quot;`</span></span><br><span class="line">UnifiedDelay            <span class="type">bool</span>              <span class="string">`json:&quot;unified-delay&quot;`</span></span><br><span class="line">LogLevel                log.LogLevel      <span class="string">`json:&quot;log-level&quot;`</span></span><br><span class="line">IPv6                    <span class="type">bool</span>              <span class="string">`json:&quot;ipv6&quot;`</span></span><br></pre></td></tr></table></figure><p>然后传递配置变量里</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> general.IPv6 != <span class="literal">nil</span> &#123;</span><br><span class="line">resolver.DisableIPv6 = !*general.IPv6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析行为相关的函数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LookupIPWithResolver</span><span class="params">(ctx context.Context, host <span class="type">string</span>, r Resolver)</span></span> ([]netip.Addr, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> node, ok := DefaultHosts.Search(host, <span class="literal">false</span>); ok &#123;</span><br><span class="line"><span class="keyword">return</span> node.IPs, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r != <span class="literal">nil</span> &amp;&amp; r.Invalid() &#123;</span><br><span class="line"><span class="keyword">if</span> DisableIPv6 &#123;</span><br><span class="line"><span class="keyword">return</span> r.LookupIPv4(ctx, host)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.LookupIP(ctx, host)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> DisableIPv6 &#123;</span><br><span class="line"><span class="keyword">return</span> LookupIPv4WithResolver(ctx, host, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面开启 ipv6 走的是 <code>r.LookupIP</code> 方法，跳转过去是走的 ipv6 dns 解析</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span></span> LookupIP(ctx context.Context, host <span class="type">string</span>) (ips []netip.Addr, err <span class="type">error</span>) &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> []netip.Addr, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line">ip, err := r.lookupIP(ctx, host, D.TypeAAAA)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch &lt;- ip</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>开了猫咪的 ipv6 影响了解析相关，类似强制使用 ipv6 解析而导致正常，也就是说明不正常现象是因为走的 ipv4 解析了，怎么配置使用 IPv6 优先级，发现 windows 是下面查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;netsh interface ipv6 show prefixpolicies</span><br><span class="line">查询活动状态...</span><br><span class="line"></span><br><span class="line">优先顺序    标签   前缀</span><br><span class="line">----------  -----  --------------------------------</span><br><span class="line">        50      0  ::1/128   </span><br><span class="line">        40      1  ::/0</span><br><span class="line">        35      4  ::ffff:0:0/96</span><br><span class="line">        30      2  2002::/16</span><br><span class="line">         5      5  2001::/32</span><br><span class="line">         3     13  fc00::/7</span><br><span class="line">         1     11  fec0::/10</span><br><span class="line">         1     12  3ffe::/16</span><br><span class="line">         1      3  ::/96</span><br></pre></td></tr></table></figure><p>搜到的都是这个默认配置是 IPv6 优先级比 IPv4 高，很多人是想优先使用 IPv4 而改上面优先级，我们这个问题是想 IPv6 优先级高，这个默认配置是没有问题。没办法了，就在上面的双栈机器搭建 dns server 看下解析记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; docker-compose.yml &lt;&lt; EOF</span><br><span class="line">services:</span><br><span class="line">  coredns:</span><br><span class="line">    image: docker.m.daocloud.io/coredns/coredns:1.11.3</span><br><span class="line">    container_name: coredns</span><br><span class="line">    restart: always</span><br><span class="line">    network_mode: host</span><br><span class="line">    cap_drop:</span><br><span class="line">      - ALL</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_BIND_SERVICE</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/:/etc/coredns/</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro</span><br><span class="line">    command: [&quot;-conf&quot;, &quot;/etc/coredns/Corefile&quot;]</span><br><span class="line"></span><br><span class="line">mkdir -p ./config/</span><br><span class="line">cat &gt; ./config/Corefile &lt;&lt; EOF</span><br><span class="line">.:53 &#123;</span><br><span class="line">   bind 0.0.0.0 ::</span><br><span class="line">   #bind  ::</span><br><span class="line">   hosts &#123;</span><br><span class="line">     10.xxx.xx.63 xxx.xxx.cn</span><br><span class="line">     2002:db8:0:1::101 xxx.xxx.cn</span><br><span class="line">     fallthrough</span><br><span class="line">   &#125;</span><br><span class="line">   forward . 223.5.5.5</span><br><span class="line">   log </span><br><span class="line">   errors</span><br><span class="line">   reload</span><br><span class="line">&#125;</span><br><span class="line">chmod a+r ./config/Corefile</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>该域名 A 记录和 AAAA 记录都有，设置下测试 windows 的 dns server 指向双栈机器点了下登录后，发现 coredns 日志里解析的是 A 记录解析请求，问题就是这了，A 记录的 IP 机器上抓包发现 http GET 请求发过来了，但是机器没有监听这个端口，所以内嵌登录页还是空白内容。</p><p>但是很奇怪的是为啥 hosts 有还走 dns 解析请求，后面测试了下发现以下几个现象：</p><ul><li>机器上配置 IPv6 hosts，不启动 tailscale：<ul><li>无法 ping 通该域名</li><li><code>Resolve-DnsName xxx.xxx.cn</code> 可以解析出域名，<code>ipconfig /displaydns</code> 里也有显示有 AAAA 记录</li></ul></li><li>机器上配置 IPv6 hosts，启动 tailscale：<ul><li>可以被路由的 IPv6 hosts 域名可以解析</li><li>不可以被路由的 IPv6 hosts 域名无法解析</li></ul></li></ul><p>研发反馈内嵌页用到了 Chromium Embedded Framework 框架，但是我自己的 chrome 浏览器访问域名业务是可以的，想着会不会研发他们的 CEF 框架内的 chrome 版本低的问题，搜相关关键字 <code>chrome not use hosts file ipv6</code> 搜到了同样的问题 <a href="https://superuser.com/questions/1421602/chrome-not-using-hosts-file-for-ipv6-addresses-since-v73">Chrome not using hosts file for IPv6 addresses since v73</a></p><p>链接里下面的回答是 chrome 早期版本探测 IPv6 是否可用是看 <code>2001:4860:4860::8888/128</code> 网段是否可以被路由，然后尝试了 powershell 管理员身份运行添加 IPv6 路由解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6  add route 2001:4860:4860::8888/128 interface=1</span><br></pre></td></tr></table></figure><p>然后优雅解决的话，不能让相关 windows 测试人员本机添加路由，而是利用 headscale 下发路由，给双栈机器上的 tailscale 增加上这个路由下发到所有其他 tailscale 上，双栈机器上使用 tailscale set：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale set --advertise-routes 2002:db8:0:1::/64,2001:4860:4860::8888/128 --snat-subnet-routes=false</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://ipw.cn/doc/ipv6/user/ipv4_ipv6_prefix_precedence.html">Windows 10&#x2F;11 设置 IPv4&#x2F;IPv6 访问优先级</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录近期 IPv6 单栈下 一些坑&lt;/p&gt;</summary>
    
    
    
    
    <category term="headscale" scheme="http://zhangguanzhang.github.io/tags/headscale/"/>
    
    <category term="derper" scheme="http://zhangguanzhang.github.io/tags/derper/"/>
    
  </entry>
  
  <entry>
    <title>[持续更新] - headscale 搭建和应用场景</title>
    <link href="http://zhangguanzhang.github.io/2024/07/25/headscale/"/>
    <id>http://zhangguanzhang.github.io/2024/07/25/headscale/</id>
    <published>2024-07-25T23:10:30.000Z</published>
    <updated>2024-07-25T23:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>长期记录和更新关于 headscale 部署和应用场景</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>这几天折腾了下 headscale 部署，发现网上很多部署文章都互相抄袭没有自己的折腾理解，所以写下部署以及讲解一些关键地方，本文章适合有 Linux 基础和部署过 headscale 或者想部署但是感觉市面上文章写得没有适合命令行选手的。</p><h2 id="为什么我需要-headscale"><a href="#为什么我需要-headscale" class="headerlink" title="为什么我需要 headscale"></a>为什么我需要 headscale</h2><p>之前一直使用 <a href="https://zhangguanzhang.github.io/2020/08/05/wireguard-for-personal/">wireguard 组网</a>，各地互访是没问题。</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/picgo/wireguard-simple.png" alt="wireguard-simple"></p><p>但是最近远程 scrcpy 控制家里的手机发现很慢受不了，也就是因为 wireguard 所有端，除了 ecs 以外都是没有公网 IP，都是 ecs 转发而存在木桶效应，即使每个 wireguard 节点有公网 IP，随着端越来越多配置起来也非常繁琐的。</p><p>如果只需要一个 ecs 公网 IP，然后各个端能 NAT 打洞直连，速度也会不错呢。</p><p><img src="https://cdn.oss.link/markdown/MrF6yn.png" alt="nat-th"></p><p>没错，tailscale 就是这样用户态实现 wireguard 协议，然后控制平面很强（可以给各个端推送和更新配置，以及还支持 ACL），而 headscale 就是开源的 tailscale 的控制端。这里不讲解接入 tailscale 官方，而是自建 headscale 和 derper。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>本教程都是 ecs 公网 IP 形式部署，自己有 https 绿锁证书的，相关配置自己研究，文章涉及到的端口需要在 ecs 安全组以及防火墙相关端口自行放行:</p><table><thead><tr><th>协议</th><th>端口</th></tr></thead><tbody><tr><td>tcp</td><td>headscale web server 端口</td></tr><tr><td>tcp</td><td>derp 的 https 端口</td></tr><tr><td>udp</td><td>derp 的 stun 端口</td></tr></tbody></table><p>机器基础参数自行设置好，例如转发和文件打开数。</p><h3 id="headscale-部署和设置"><a href="#headscale-部署和设置" class="headerlink" title="headscale 部署和设置"></a>headscale 部署和设置</h3><p>参考官方文档 <a href="https://headscale.net/running-headscale-linux-manual/">running-headscale-linux-manual</a> ，因为 headscale 不依赖 CGO，所以我使用二进制部署，官方这个文档也是隐藏起来的，怎么部署都可以，不一定要和我一样。</p><p>截至 <code>2024/07/25</code> ，从官方仓库看，正式的 release 版本是 <code>v0.22.3</code>，而 main、pre-release 版本的配置文件和老版本文件有一些不兼容的字段，很多文章都是从 main 下载 <code>config-example.yaml</code> 文件后按照他们文章修改字段对应不上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自行解决下载问题</span></span><br><span class="line">wget -O /usr/local/bin/headscale https://github.com/juanfont/headscale/releases/download/v0.22.3/headscale_0.22.3_linux_amd64</span><br><span class="line"><span class="comment"># 有些老系统的 PATH 里没 /usr/local/bin/ ，可以放其他路径里</span></span><br><span class="line"><span class="built_in">chmod</span> a+x /usr/local/bin/headscale</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /etc/headscale/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载二进制同版本的示例配置文件</span></span><br><span class="line">wget -O /etc/headscale/config.yaml https://raw.githubusercontent.com/juanfont/headscale/v0.22.3/config-example.yaml</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>创建 headscale daemon systemd 后台文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/systemd/system/headscale.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=headscale controller</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">User=headscale</span></span><br><span class="line"><span class="string">Group=headscale</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/headscale serve</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Optional security enhancements</span></span><br><span class="line"><span class="string">NoNewPrivileges=yes</span></span><br><span class="line"><span class="string">PrivateTmp=yes</span></span><br><span class="line"><span class="string">ProtectSystem=strict</span></span><br><span class="line"><span class="string">ProtectHome=yes</span></span><br><span class="line"><span class="string">WorkingDirectory=/var/lib/headscale</span></span><br><span class="line"><span class="string">ReadWritePaths=/var/lib/headscale /var/run/headscale</span></span><br><span class="line"><span class="string">AmbientCapabilities=CAP_NET_BIND_SERVICE</span></span><br><span class="line"><span class="string">RuntimeDirectory=headscale</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>因为 headscale 是一个控制中心，不需要特权，我们运行在非 root 用户下，添加用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useradd \</span><br><span class="line">  --create-home \</span><br><span class="line">  --home-dir /var/lib/headscale/ \</span><br><span class="line">  --system \</span><br><span class="line">  --user-group \</span><br><span class="line">  --shell /usr/sbin/nologin \</span><br><span class="line">  headscale</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/run/headscale/</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建空的 SQLite 数据库文件和 derp 文件：</span></span><br><span class="line"><span class="built_in">touch</span> /var/lib/headscale/db.sqlite /etc/headscale/derp.yaml</span><br><span class="line"><span class="built_in">chown</span> -R headscale:headscale /var/run/headscale/ /var/lib/headscale</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/headscale/config.yaml /etc/headscale/derp.yaml</span><br></pre></td></tr></table></figure><p>接下来 <code>vi /etc/headscale/config.yaml</code> 修改配置文件一些内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server_url 写外网访问的 ip+端口</span></span><br><span class="line"><span class="comment"># 由于是ecs，所以写公网 IP，以及后面的端口要和 listen_addr 的一致</span></span><br><span class="line"><span class="comment"># 80 443 8080 需要备案</span></span><br><span class="line"><span class="attr">server_url:</span> <span class="string">http://&lt;ecs_public_ip&gt;:8081</span></span><br><span class="line"><span class="comment"># 改为四个0，或者对应公网 IP 的内网网卡 IP 都行</span></span><br><span class="line"><span class="attr">listen_addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ip_prefixes 下的 ipv6 关闭了</span></span><br><span class="line"><span class="attr">ip_prefixes:</span></span><br><span class="line"><span class="comment">#  - fd7a:115c:a1e0::/48</span></span><br><span class="line"><span class="comment"># 如果使用 Aliyun ecs，ipv4 网段需要修改成其他的，因为 Aliyun 底层的 apt 源等都在这个范围内</span></span><br><span class="line"><span class="comment"># 如果 Aliyun ecs 修改此网段，建议看完本章文章再操作，因为后续 tailscale 要修改源码</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">100.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">derp:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 不适用 headscale 内嵌的 derper 服务器</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 注释掉不使用官方的 derp 服务</span></span><br><span class="line"><span class="comment">#  urls:</span></span><br><span class="line"><span class="comment">#    - https://controlplane.tailscale.com/derpmap/default</span></span><br><span class="line"><span class="comment"># 把 paths: [] 修改成使用本地 derp 信息</span></span><br><span class="line">  <span class="attr">paths:</span> [<span class="string">/etc/headscale/derp.yaml</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 headscale 自动更新，避免 break change 无法启动</span></span><br><span class="line"><span class="attr">disable_check_updates:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_config:</span></span><br><span class="line"><span class="comment"># 改为 false 不覆盖本地 DNS</span></span><br><span class="line">  <span class="attr">override_local_dns:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 关闭 magic_dns</span></span><br><span class="line">  <span class="attr">magic_dns:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 设置为你自己的标识，否则后续 tailscale 端连接上显示是 user@example.com</span></span><br><span class="line">  <span class="attr">base_domain:</span> <span class="string">xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机端口要打开， tailscale 客户端会使用41641 端口建立 wireguard 链接，这个端口会被中间网络设备阻止</span></span><br><span class="line"><span class="attr">randomize_client_port:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装和设置 headscale 补全，因为 headscale 是 daemon 和 cli 两部分，daemon 起来后 cli 很多命令可以操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y bash-completion</span><br><span class="line">headscale completion bash &gt; /etc/bash_completion.d/headscale</span><br><span class="line">. /etc/bash_completion.d/headscale</span><br></pre></td></tr></table></figure><p>启动 headscale daemon 进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试文件</span></span><br><span class="line">headscale configtest</span><br><span class="line"></span><br><span class="line">headscale serve</span><br><span class="line"><span class="comment"># 配置文件没问题就 ctrl +c 取消掉使用 systemd 启动</span></span><br><span class="line"><span class="built_in">chown</span> -R headscale:headscale /var/lib/headscale</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now headscale</span><br></pre></td></tr></table></figure><h3 id="derper-部署"><a href="#derper-部署" class="headerlink" title="derper 部署"></a>derper 部署</h3><p>headscale 是控制层面，下发信息和路由配置，而 derper 是中继和打洞服务器，利用修改版本的 stun 协议打洞，例如两个无公网 IP 但是可以访问到公网的客户端，客户端和另一个客户端建立连接都是先 连 derp 看看自己和对端能否打洞成功，成功就直连对方，否则就走 derper 中继来转发。</p><p>官方推荐的使用 https 绿锁证书部署，但是我们没有。并且官方不提供 derp 编译，所以需要 hack 和编译，相关文件在 <a href="https://github.com/zhangguanzhang/compile-and-packages/tree/master/tailscale">compile-and-packages&#x2F;tailscale</a>，基于 alpine 镜像，并且能自动生成 https 证书。</p><p>这里使用编译好的 docker 镜像部署，二进制部署因为默认使用一些路径，所以坑比较少，这里使用 docker host 网络部署并说明一些东西。</p><p>先查看机器上的 iptables 模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -w -V</span><br><span class="line">iptables v1.4.21</span><br><span class="line">iptables v1.8.4 (legacy)</span><br><span class="line"><span class="comment">#----</span></span><br><span class="line">iptables v1.8.9 (nf_tables)</span><br></pre></td></tr></table></figure><p>前者都是 <code>legacy</code> 模式，后者是 <code>nf_tables</code>，下面的 tailscale 需要设置 <a href="https://tailscale.com/kb/1294/firewall-mode">firewall-mode</a> 为 <code>iptables</code> 或者 <code>nftables</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">docker-compose.yml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">derper:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">derper</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.aliyuncs.com/zhangguanzhang/derper:v1.70.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">      <span class="comment"># 容器生成的证书存放，如果是自己的绿锁证书，存放文件名为</span></span><br><span class="line">      <span class="comment"># $DERP_DOMAIN.key $DERP_DOMAIN.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./cert:/cert</span> </span><br><span class="line">      <span class="bullet">-</span>  <span class="string">/var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DERP_DOMAIN:</span> <span class="string">my.mydomain.no</span> <span class="comment"># 域名，由于不是绿锁 https，随意写，和后面 derp.yaml 一致即可</span></span><br><span class="line">      <span class="attr">DERP_ADDR:</span> <span class="string">&#x27;:12345&#x27;</span> <span class="comment"># https 端口</span></span><br><span class="line">      <span class="attr">DERP_STUN_PORT:</span> <span class="string">&#x27;3478&#x27;</span> <span class="comment"># udp port</span></span><br><span class="line">      <span class="attr">DERP_HTTP_PORT:</span> <span class="string">&#x27;-1&#x27;</span></span><br><span class="line">      <span class="attr">DERP_VERIFY_CLIENTS:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">DERP_CERT_DIR:</span> <span class="string">/cert</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tailscale</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://tailscale.com/kb/1282/docker</span></span><br><span class="line">  <span class="attr">tailscale:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">tailscale</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tailscale</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.m.daocloud.io/tailscale/tailscale:v1.70.0</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_RAW</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sys_module</span></span><br><span class="line">    <span class="comment"># 禁用收集或发送任何日志数据，会发往 https://log.tailscale.io</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">tailscaled</span> <span class="string">-no-logs-no-support</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun:/dev/net/tun</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lib/modules:/lib/modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/run/xtables.lock:/run/xtables.lock:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/tailscale/:/var/run/tailscale/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tailscale_data:/var/lib/tailscale</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#TS_EXTRA_ARGS: --advertise-tags=tag:container</span></span><br><span class="line">      <span class="attr">TS_HOSTNAME:</span> <span class="string">ecs</span></span><br><span class="line">      <span class="attr">TS_DEBUG_FIREWALL_MODE:</span> <span class="string">iptables</span> <span class="comment"># 使用和宿主机模式一致的</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>为了防止 derper 被白嫖，所以 <a href="https://github.com/tailscale/tailscale/tree/main/cmd/derper">官方文档</a> 推荐开启 <code>--verify-clients</code> 选项，然后同时部署一个 tailscale 客户端，derper 会从这个 tailscale 的 sock 文件获取所有认证过的 peer 信息，所以上面挂载 sock 和 <code>depends_on</code> 以及使用同一版本的 derper 和 tailscale 。</p><p>修改 headscale 指定的 derp 文件 <code>vi /etc/headscale/derp.yaml</code> 的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/tailscale/tailscale/blob/main/tailcfg/derpmap.go#L71</span></span><br><span class="line"><span class="attr">regions:</span></span><br><span class="line"><span class="comment"># 900-999 的 region id 是给预留的</span></span><br><span class="line"><span class="comment"># 有条件的可以多个 derper</span></span><br><span class="line">  <span class="attr">900:</span></span><br><span class="line">    <span class="attr">regionid:</span> <span class="number">900</span></span><br><span class="line">    <span class="attr">regioncode:</span> <span class="string">custom</span></span><br><span class="line">    <span class="attr">regionname:</span> <span class="string">custom_name</span></span><br><span class="line">    <span class="attr">nodes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">900a</span></span><br><span class="line">        <span class="attr">regionid:</span> <span class="number">900</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">my.mydomain.no</span></span><br><span class="line">        <span class="attr">ipv4:</span> <span class="string">&lt;ecs_public_ip&gt;</span></span><br><span class="line">        <span class="comment">#ipv6: &quot;2604:a880:400:d1::828:b001&quot;</span></span><br><span class="line">        <span class="attr">derpport:</span> <span class="number">12345</span> <span class="comment"># https 端口</span></span><br><span class="line">        <span class="attr">stunport:</span> <span class="number">3478</span> <span class="comment"># udp port</span></span><br><span class="line">        <span class="attr">stunonly:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">insecurefortests:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 901:</span></span><br><span class="line">  <span class="comment">#   regionid: 901</span></span><br><span class="line">  <span class="comment">#   regioncode: hs </span></span><br><span class="line">  <span class="comment">#   regionname: Huawei Shanghai </span></span><br><span class="line">  <span class="comment">#   nodes:</span></span><br><span class="line">  <span class="comment">#     - name: 901a</span></span><br><span class="line">  <span class="comment">#       regionid: 901</span></span><br><span class="line">  <span class="comment">#       hostname: xxxx</span></span><br><span class="line">  <span class="comment">#       ipv4: xxxx</span></span><br><span class="line">  <span class="comment">#       stunport: 3478</span></span><br><span class="line">  <span class="comment">#       stunonly: false</span></span><br><span class="line">  <span class="comment">#       derpport: 12345</span></span><br><span class="line">  <span class="comment">#       insecurefortests: false</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/tailscale/tailscale/commit/7e7c4c1bbe24f998e76c1d32ef870187829a103d#diff-160878fffc5697ccc5e6ae3c843184cb91262b36f822172c12ec0e7f73976e41R137-R141">3年前 tailscale derp 就在 &gt;&#x3D; 1.20 的增加字段 <code>derpport</code> 和 <code>insecurefortests</code> </a></p><p>而 <a href="https://github.com/juanfont/headscale/blob/v0.14.0/go.mod#L42">三年前的 headscale 版本是 0.14.0</a> 里看到使用的 tailscale 版本是 v1.20.4，压根不存在网上一些 <code>insecurefortests</code> 只能写 json 里配置的说法（<code>DERPPort</code> 和 <code>InsecureForTests</code> 都是 golang json tag，yaml 读取如果没 yaml tag 就使用 json tag），网上好多人互相抄袭还单独创建一个 web server 写 json 文件，我不理解。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 由于修改了 web index，所以是空的 200</span></span><br><span class="line">curl -vk https://127.0.0.1:12345/</span><br></pre></td></tr></table></figure><h3 id="客户端接入"><a href="#客户端接入" class="headerlink" title="客户端接入"></a>客户端接入</h3><p>所有客户端有微皮恩的，需要把 ecs 的公网 IP 设置成直连不走代理，以及如果是家里宽带，可以把 Upnp 打开，这样打洞直连成功率会高些。</p><h4 id="创建-authkeys"><a href="#创建-authkeys" class="headerlink" title="创建 authkeys"></a>创建 authkeys</h4><p>Tailscale 中有一个概念叫 tailnet，你可以理解成租户，租户与租户之间是相互隔离的，具体看参考 Tailscale 的官方文档： <a href="https://tailscale.com/kb/1136/tailnet">What is a tailnet</a>。<br>Headscale 也有类似的实现叫 user，即用户。我们需要先创建一个 user，以便后续客户端接入，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headscale user create default</span><br></pre></td></tr></table></figure><p>其他客户端接入需要首先在服务端生成 pre-authkey 的 key ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个过期时间 365d 且可以重复使用的 authkey</span></span><br><span class="line">$ headscale preauthkeys --user default create --reusable --expiration 365d </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经生成的 key：</span></span><br><span class="line">$ headscale preauthkeys --user default list</span><br><span class="line">ID | Key                                              | Reusable | Ephemeral | Used  | Expiration          | Created             | Tags</span><br><span class="line">1  | 49f9cd7f4e7b3e33023a9064xxxxxebf00778d2xxxxxxxxx | <span class="literal">false</span>    | <span class="literal">false</span>     | <span class="literal">false</span> | 2025-07-24 14:32:45 | 2024-07-24 14:32:45 | </span><br></pre></td></tr></table></figure><p>tailscale 也是分为 tailscaled 的 daemon 和 tailscale 的 cli 工具，windows、Linux 以及安卓的 Magisk 模块等都可以使用 cli 工具操作和排查，这点很重要。</p><p>下面是 tailscale up 时候一些常用通用选项：</p><ul><li><code>--login-server</code>: 指定使用的中央服务器地址(必填)</li><li><code>--advertise-routes</code>: 向中央服务器报告当前客户端处于哪个内网网段下, 便于中央服务器让同内网设备直接内网直连(可选的)或者将其他设备指定流量路由到当前内网(可选)，多条路由英文逗号隔开</li><li><code>--accept-routes</code>: 是否接受中央服务器下发的用于路由到其他客户端内网的路由规则(可选)</li><li><code>--accept-dns</code>: 是否使用中央服务器下发的 DNS 相关配置(可选, 推荐关闭)</li><li><code>--hostname</code>: 设置 machine name，否则默认会以 hostname 注册上去，特别安卓的 hostname 无法修改</li></ul><p>tailscale cli 官方文档 <a href="https://tailscale.com/kb/1080/cli%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1">https://tailscale.com/kb/1080/cli，也可以自己</a> <code>tailscale --help</code> 看命令帮助。</p><h4 id="Linux-接入"><a href="#Linux-接入" class="headerlink" title="Linux 接入"></a>Linux 接入</h4><h5 id="derp-上的客户端"><a href="#derp-上的客户端" class="headerlink" title="derp 上的客户端"></a>derp 上的客户端</h5><p>先接入 derp 也就是 ecs 上那个 tailscale：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以拷贝出来宿主机上执行</span></span><br><span class="line"><span class="comment"># docker cp tailscale:/usr/local/bin/tailscale /usr/bin/tailscale</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti tailscale sh</span><br><span class="line"></span><br><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8081 --accept-routes=<span class="literal">true</span> --hostname ecs --accept-dns=<span class="literal">false</span> --authkey 49f9cd....</span><br></pre></td></tr></table></figure><p>可以 headscale 上查看信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ headscale node list</span><br><span class="line">An updated version of Headscale has been found (0.23.0-beta1 vs. your current v0.22.3). Check it out https://github.com/juanfont/headscale/releases</span><br><span class="line">ID | Hostname  | Name   | MachineKey | NodeKey | User    | IP addresses | Ephemeral | Last seen           | Expiration          | Online  | Expired</span><br><span class="line">1  | ecs       | ecs    | [3ixoT]    | [VFZTB] | default | 100.64.0.1, | <span class="literal">false</span>     | 2024-07-25 05:20:50 | 0001-01-01 00:00:00 | online  | no</span><br></pre></td></tr></table></figure><p>Linux 上 tailscale 会利用 tun 创建网卡，路由表在 52 里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show table 52</span><br></pre></td></tr></table></figure><p>另外要注意，由于 derper 依赖这个 tailscale，所以这个 tailscale 不要乱重启（因为是授权信息来源），可能会导致其他端会断开一下子，例如我就遇到安卓端玩游戏会断开下。</p><h5 id="Linux-客户端"><a href="#Linux-客户端" class="headerlink" title="Linux 客户端"></a>Linux 客户端</h5><p>官方相关文档：</p><ul><li><a href="https://tailscale.com/kb/1031/install-linux">https://tailscale.com/kb/1031/install-linux</a></li><li><a href="https://pkgs.tailscale.com/stable/#static">https://pkgs.tailscale.com/stable/#static</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://tailscale.com/install.sh | sh</span><br></pre></td></tr></table></figure><p>然后自己 <code>tailscale up --......</code> 登录。</p><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>在 <a href="https://tailscale.com/download">https://tailscale.com/download</a> 下载安装（安装失败换 msi 安装包 <a href="https://pkgs.tailscale.com/stable/#windows">https://pkgs.tailscale.com/stable/#windows</a> ），如果 msi 安装包启动报错 iphelp 啥的相关，在 <code>services.msc</code> 里把 <code>ip helper</code> 属性设置自启动后启动下。</p><p>启动后，官方文档 <a href="https://github.com/juanfont/headscale/blob/main/docs/windows-client.md">windows-client</a> 说需要 powershell 修改下面的注册表：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> <span class="literal">-Path</span> <span class="string">&quot;HKLM:\SOFTWARE\Tailscale IPN&quot;</span></span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKLM:\Software\Tailscale IPN&#x27;</span> <span class="literal">-Name</span> UnattendedMode <span class="literal">-PropertyType</span> String <span class="literal">-Value</span> always</span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-Path</span> <span class="string">&#x27;HKLM:\Software\Tailscale IPN&#x27;</span> <span class="literal">-Name</span> LoginURL <span class="literal">-PropertyType</span> String <span class="literal">-Value</span> http://YOUR<span class="literal">-HEADSCALE-URL</span>:<span class="number">8081</span></span><br></pre></td></tr></table></figure><p>但是没必要，而且系统托盘图标点击 login 可能无法弹出浏览器页面，可以 powershell 或者 gitbash 里执行 tailscale cli 注册：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --login-server http://xxx:8081 --hostname laptop --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span> --authkey 49f9cd....</span><br></pre></td></tr></table></figure><p>如果执行后卡住的，在 <code>services.msc</code> 里把 tailscale 重启下后再试试。</p><p>windows 开启 <code>--unattended</code> 锁屏不会断开连接，一些 windows 早期版本问题见下面 issue ：</p><ul><li><a href="https://github.com/tailscale/tailscale/issues/7288">https://github.com/tailscale/tailscale/issues/7288</a></li></ul><p>windows 关闭上传日志到 log.tailscale.io 可以在 <code>C:\ProgramData\Tailscale</code> 下新增 <code>tailscaled-env.txt</code> 写入 env：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TS_NO_LOGS_NO_SUPPORT=true</span><br></pre></td></tr></table></figure><h4 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h4><p><a href="https://github.com/tailscale/tailscale-android">https://github.com/tailscale/tailscale-android</a></p><p>推荐 <a href="https://f-droid.org/packages/com.tailscale.ipn/">https://f-droid.org/packages/com.tailscale.ipn/</a> 下载，如果 headscale 是 <code>v0.22.3</code> 请下载 <code>1.72.0</code> ，我尝试开发版本 <code>1.78.1-t89039</code> 版本无法注册。</p><p>安装后在 <code>右上角 - Accounts - 三个点 - Settings Accounts  Use an alternate server</code>，输入 <code>http://xxx:8081</code>，然后下面 <code>Use an auth key</code> 可能会没使用 authkey 跳转到浏览器出现一个 <code>headscale nodes register ... --key nodekey:xxxx</code> ，所以我们需要回到 headscale 上命令授权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志里会打印长串 key，所以不需要在其他端复制 nodekey</span></span><br><span class="line">journalctl -xe --no-pager -u headscale | grep nodekey</span><br><span class="line"></span><br><span class="line">headscale nodes register --user default --key nodekey:xxxxx</span><br></pre></td></tr></table></figure><p>对于一些没有浏览器也没 tailscale cli 的都可以这样手动授权下。安卓上点击每个 peer 进去的右上角图标等于 <code>tailscale ping xxx</code> ，会显示能否直连和延迟。也可以后续使用 Magisk tailscale，那样可以有 cli 了，另外 apk 是使用 V-P-N 形式，断网和切换流量会断开，而 Magisk tailscale 则不会。</p><p>adb 启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.tailscale.ipn/com.tailscale.ipn.MainActivity</span><br></pre></td></tr></table></figure><h4 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h4><p>参照 <a href="https://github.com/adyanth/openwrt-tailscale-enabler%EF%BC%8C%E9%9C%80%E8%A6%81%E6%9C%89">https://github.com/adyanth/openwrt-tailscale-enabler，需要有</a> <code>kmod-tun</code> 模块包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">VER=1.70.0</span><br><span class="line">wget https://pkgs.tailscale.com/stable/tailscale_<span class="variable">$&#123;VER&#125;</span>_arm64.tgz</span><br><span class="line">tar zxvf tailscale_*_arm64.tgz</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/tailscale/</span><br><span class="line"><span class="built_in">mv</span> tailscale_*_arm64/tailscal* /usr/bin</span><br><span class="line"><span class="built_in">rm</span> -rf tailscale_*_arm64</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/init.d/tailscale</span></span><br><span class="line"><span class="string">#!/bin/sh /etc/rc.common</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Copyright 2020 Google LLC.</span></span><br><span class="line"><span class="string"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">USE_PROCD=1</span></span><br><span class="line"><span class="string">START=99</span></span><br><span class="line"><span class="string">STOP=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start_service() &#123;</span></span><br><span class="line"><span class="string">  procd_open_instance</span></span><br><span class="line"><span class="string">  procd_set_param command /usr/bin/tailscaled</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # Set the port to listen on for incoming VPN packets.</span></span><br><span class="line"><span class="string">  # Remote nodes will automatically be informed about the new port number,</span></span><br><span class="line"><span class="string">  # but you might want to configure this in order to set external firewall</span></span><br><span class="line"><span class="string">  # settings.</span></span><br><span class="line"><span class="string">  # procd_append_param command --port 41641</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # OpenWRT /var is a symlink to /tmp, so write persistent state elsewhere.</span></span><br><span class="line"><span class="string">  procd_append_param command --state /etc/config/tailscaled.state</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # Persist files for TLS cert &amp; Taildrop files</span></span><br><span class="line"><span class="string">  procd_append_param command --statedir /etc/tailscale/</span></span><br><span class="line"><span class="string">  procd_append_param command -no-logs-no-support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  procd_set_param respawn</span></span><br><span class="line"><span class="string">  procd_set_param stdout 1</span></span><br><span class="line"><span class="string">  procd_set_param stderr 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  procd_close_instance</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">stop_service() &#123;</span></span><br><span class="line"><span class="string">  /usr/bin/tailscaled --cleanup</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/init.d/tailscale <span class="built_in">enable</span></span><br><span class="line">/etc/init.d/tailscale start</span><br><span class="line"></span><br><span class="line">tailscale status</span><br></pre></td></tr></table></figure><p>登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --login-server=http://&lt;HEADSCALE_PUB_ENDPOINT&gt;:8081 --accept-routes=<span class="literal">true</span> --hostname openwrt --accept-dns=<span class="literal">false</span> --authkey 49f9cd....</span><br><span class="line"></span><br><span class="line">tailscale status</span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logread tailscaled</span><br></pre></td></tr></table></figure><h3 id="tailscale-client-使用"><a href="#tailscale-client-使用" class="headerlink" title="tailscale client 使用"></a>tailscale client 使用</h3><p>每个 tailscale 端都可以执行命令来查看和排查一些信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># debug 命令隐藏在 --help 了，可以 tailscale debug --help 自行查看</span></span><br><span class="line"><span class="comment"># 打印 derp-map 信息</span></span><br><span class="line">tailscale debug derp-map</span><br></pre></td></tr></table></figure><p>查看和检测当前网络，会输出当前 derp 服务器信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale netcheck</span><br><span class="line"></span><br><span class="line">Report:</span><br><span class="line">* UDP: <span class="literal">true</span></span><br><span class="line">* IPv4: <span class="built_in">yes</span>, xx.x.xx.xxx:54417</span><br><span class="line">* IPv6: no, but OS has support</span><br><span class="line">* MappingVariesByDestIP: </span><br><span class="line">* PortMapping: </span><br><span class="line">* Nearest DERP: tx</span><br><span class="line">* DERP latency:</span><br><span class="line">- custom: 500µs   (tx)</span><br></pre></td></tr></table></figure><p>tailscale ping 命令可以用于测试 IP 连通性, 同时可以看到时如何连接目标节点的. 默认情况下 Ping 命令首先会使用 Derper 中继节点通信, 然后尝试 P2P 连接; 一旦 P2P 连接成功则自动停止 Ping:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale ping 100.64.0.3</span><br><span class="line">pong from redmi8 (100.64.0.3) via DERP(custom) <span class="keyword">in</span> 30ms</span><br><span class="line">pong from redmi8 (100.64.0.3) via 192.168.0.107:47316 <span class="keyword">in</span> 32ms</span><br></pre></td></tr></table></figure><p>status 查看以及 peer 的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tailscale status</span><br><span class="line">tailscale status --json</span><br></pre></td></tr></table></figure><p>修改当前节点信息，支持修改的属性 –help 自行查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tailscale set --help</span></span><br><span class="line">tailscale <span class="built_in">set</span> --hostname=xxx</span><br></pre></td></tr></table></figure><p>或者可以 down 后 up 带单一需要修改的参数执行下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tailscale down</span><br><span class="line">tailscale up --xxx</span><br><span class="line"><span class="comment"># 然后会打印全部参数，复制执行下</span></span><br></pre></td></tr></table></figure><p>查看当前的参数列表，官方没有 cmdline 形式打印，只有 json 的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale debug prefs</span><br></pre></td></tr></table></figure><h3 id="derp-调试"><a href="#derp-调试" class="headerlink" title="derp 调试"></a>derp 调试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vk https://127.0.0.1:12345/debug/vars</span><br></pre></td></tr></table></figure><h3 id="打通内网"><a href="#打通内网" class="headerlink" title="打通内网"></a>打通内网</h3><p>Linux 端都要开启转发，windows 和安卓转发自行查找怎么配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | <span class="built_in">tee</span> /etc/sysctl.d/ipforwarding.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv6.conf.all.forwarding = 1&#x27;</span> | <span class="built_in">tee</span> -a /etc/sysctl.d/ipforwarding.conf</span><br><span class="line">sysctl -p /etc/sysctl.d/ipforwarding.conf</span><br></pre></td></tr></table></figure><p>然后在 server 端查看 node ID ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ headscale node list</span><br><span class="line">An updated version of Headscale has been found (0.23.0-beta1 vs. your current v0.22.3). Check it out https://github.com/juanfont/headscale/releases</span><br><span class="line">ID | Hostname  | Name   | MachineKey | NodeKey | User    | IP addresses | Ephemeral | Last seen           | Expiration          | Online  | Expired</span><br><span class="line">1  | ecs       | ecs    | [3ixoT]    | [VFZTB] | default | 100.64.0.1, | <span class="literal">false</span>     | 2024-07-26 07:12:50 | 0001-01-01 00:00:00 | online  | no</span><br><span class="line">2  | localhost | ax18   | [egfcx]    | [LzS5J] | default | 100.64.0.2, | <span class="literal">false</span>     | 2024-07-26 07:13:14 | 0001-01-01 00:00:00 | online  | no</span><br><span class="line">3  | localhost | redmi8 | [uqIVP]    | [l6sL7] | default | 100.64.0.3, | <span class="literal">false</span>     | 2024-07-26 07:13:06 | 0001-01-01 00:00:00 | online  | no</span><br></pre></td></tr></table></figure><p>假设 <code>ID==1</code> 的局域网是 <code>192.168.31.0/24</code> 网段，我们希望其他 ID 设备上能访问到，先查看路由：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ headscale routes list</span><br><span class="line">ID | Machine | Prefix          | Advertised | Enabled | Primary</span><br><span class="line">.....</span><br><span class="line">1  | ax18    | 192.168.31.0/24 | <span class="literal">true</span>       | <span class="literal">false</span>   | <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headscale routes <span class="built_in">enable</span> -r 1</span><br></pre></td></tr></table></figure><p>其他节点查看路由结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ip route show table 52 | grep <span class="string">&quot;192.168.31.0/24&quot;</span></span><br><span class="line">192.168.31.0/24 dev tailscale0</span><br></pre></td></tr></table></figure><blockquote><p>其他节点启动时需要增加 <code>--accept-routes=true</code> 选项来声明 “我接受外部其他节点发布的路由”。</p></blockquote><p>现在你在任何一个 Tailscale 客户端所在的节点都可以 ping 通家庭内网的机器了，你在公司或者星巴克也可以像在家里一样用同样的 IP 随意访问家中的任何一个设备。</p><p>一个正在运行的节点增加路由可以使用 set 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多条用英文逗号间隔</span></span><br><span class="line">tailscale <span class="built_in">set</span> --advertise-routes xx.xx.xx.0/24,xx,xxx.xxx.00.00/16</span><br></pre></td></tr></table></figure><h3 id="信息修改"><a href="#信息修改" class="headerlink" title="信息修改"></a>信息修改</h3><p>例如安卓的 hostname 由于没有 cli 无法修改，而默认 db 使用 sqlite，可以修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 /var/lib/headscale/db.sqlite</span><br><span class="line">.tables</span><br><span class="line">update machines <span class="built_in">set</span> given_name=<span class="string">&quot;redmi8&quot;</span> <span class="built_in">where</span> <span class="built_in">id</span>=3;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ip_addresses=&quot;100.64.0.3&quot;</span></span><br><span class="line">修改 ip 需要先 tailscale down 改好后再 tailscale up，修改后配置会同步到所有 tailscale client 上，特别是游戏可能会闪断下</span><br></pre></td></tr></table></figure><p>其他的修改自己琢磨。</p><h3 id="源码修改-tailscale-网段"><a href="#源码修改-tailscale-网段" class="headerlink" title="源码修改 tailscale 网段"></a>源码修改 tailscale 网段</h3><p>修改 tailscale 避免阿里云 <code>100.64.0.0/16</code> 上出问题，见漠然博客<a href="https://mritd.com/2022/10/19/use-headscale-to-build-a-p2p-network/#7-3%E3%80%81%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%89%E8%A3%85%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8E%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E8%BD%AF%E4%BB%B6">阿里云安装客户端后无法更新软件</a></p><h3 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h3><p>这里只介绍异地组网部分，其他的去看官方文档。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>请有自己的理解能力，不要随便照抄，端口啥的也可以自定义下。</p><ul><li><a href="https://kiprey.github.io/2023/11/tailscale-derp/">浅探 Tailscale DERP 中转服务</a></li><li><a href="https://arthurchiao.art/blog/how-nat-traversal-works-zh/">NAT 穿透怎么工作的</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;长期记录和更新关于 headscale 部署和应用场景&lt;/p&gt;</summary>
    
    
    
    
    <category term="headscale" scheme="http://zhangguanzhang.github.io/tags/headscale/"/>
    
    <category term="derper" scheme="http://zhangguanzhang.github.io/tags/derper/"/>
    
  </entry>
  
  <entry>
    <title>[持续更新] - 安卓折腾笔记</title>
    <link href="http://zhangguanzhang.github.io/2024/07/21/Linux-android/"/>
    <id>http://zhangguanzhang.github.io/2024/07/21/Linux-android/</id>
    <published>2024-07-21T20:10:30.000Z</published>
    <updated>2024-07-21T20:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>长期记录和更新关于安卓和 Linux 的一些折腾笔记</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>长期记录和更新关于安卓和 Linux 的一些折腾笔记，没有 Linux 和刷机基础的不要看了。</p><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://developer.android.com/tools/releases/platform-tools?hl=zh-cn">platform-tools</a></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><img src="https://raw.githubusercontent.com/Swind/pure-python-adb/master/docs/adb_cli.png" alt="adb-pic"></p><p>小米系列手机开 adb 需要登录账号和插入 sim 卡，然后 Linux 和软路由上也可以安装 adb（打通网络后可以做很多事情），不要局限在看到的物体思维上。开了 usb adb 后插入电脑上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看设备</span></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让设备 adb server 以 5555 方式运行，而非使用 usb</span></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp 连接</span></span><br><span class="line">adb connect &lt;ip&gt;:5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不带设备名就是关闭所有连接</span></span><br><span class="line">adb disconnect [xxx]</span><br><span class="line"></span><br><span class="line"><span class="comment"># adb 执行任何命令的时候，如果 server 服务没有启动就会启动</span></span><br><span class="line"><span class="comment"># 此命令是杀掉 server 进程，Linux 和 win 都有 server 服务</span></span><br><span class="line"><span class="comment"># daemon 是运行在手机上的，server 管理 client 和 daemon 之间的通信</span></span><br><span class="line">adb kill-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问本机 8888 端口转发到设备的 8080 端口</span></span><br><span class="line">adb forward tcp:8888 tcp:8080</span><br></pre></td></tr></table></figure><p>更多见文档 <a href="https://developer.android.google.cn/tools/adb?hl=zh-cn">tools&#x2F;adb</a></p><h3 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h3><p>一些 adb shell 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell dumpsys battery</span><br><span class="line">Current Battery Service state:</span><br><span class="line">  AC powered: <span class="literal">true</span>  &lt;-- 接入充电器</span><br><span class="line">  USB powered: <span class="literal">false</span></span><br><span class="line">  Wireless powered: <span class="literal">false</span></span><br><span class="line">  Max charging current: 0</span><br><span class="line">  Max charging voltage: 0</span><br><span class="line">  Charge counter: 2946000</span><br><span class="line">  status: 5</span><br><span class="line">  health: 2</span><br><span class="line">  present: <span class="literal">true</span></span><br><span class="line">  level: 100    &lt;--- 当前电量百分比</span><br><span class="line">  scale: 100</span><br><span class="line">  voltage: 4262  &lt;-- 电压</span><br><span class="line">  temperature: 426 &lt;-- 温度 42.6 ℃</span><br><span class="line">  technology: Li-poly</span><br><span class="line"><span class="comment"># 开启屏幕分析指针</span></span><br><span class="line">adb shell settings put system pointer_location 1</span><br><span class="line"><span class="comment"># 坐标是坐上0,0 左到右是 X 上到下是 Y，下面是横屏点屏幕上一个按钮的坐标</span></span><br><span class="line">adb shell input tap 1580 930</span><br><span class="line"><span class="comment"># 获取事件，sendevent 模拟比较麻烦</span></span><br><span class="line">adb shell getevent -l</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://adbinstaller.com/commands">https://adbinstaller.com/commands</a></p><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>打算把 adb 启动在 Linux 上，发现它 daemon 监听端口不是 bind 0.0.0.0：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ss -nlpt | grep adb</span><br><span class="line">LISTEN 0      4          127.0.0.1:5037       0.0.0.0:*    <span class="built_in">users</span>:((<span class="string">&quot;adb&quot;</span>,pid=25471,fd=6))</span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/56130335/adb-port-forwarding-to-listen-on-all-interfaces</span></span><br><span class="line">$ adb -a nodaemon server start</span><br></pre></td></tr></table></figure><p>然后搜了下没有好的解决办法，有人去 hack 源码的，上面这个命令是大佬发的，只能前台运行，可以配合 screen 或者 systemd 啥的常驻。</p><h2 id="安卓虚拟化"><a href="#安卓虚拟化" class="headerlink" title="安卓虚拟化"></a>安卓虚拟化</h2><p>x86_64 机器上折腾的一些安卓虚拟化笔记，如果要在 x86_64 的安卓和安卓虚拟机或者容器内安装运行 arm64 的 apk ，需要带有 <code>Native Bridge</code>。</p><h3 id="Bliss-OS"><a href="#Bliss-OS" class="headerlink" title="Bliss OS"></a>Bliss OS</h3><p>一个 x86_64 安卓系统，相对于 <a href="https://www.android-x86.org/">android-x86</a> 似乎更新频繁，可以 pve 之类虚拟化导入安装，但是有些版本没带还是把 <code>Native Bridge</code> 删了。</p><h3 id="Waydroid"><a href="#Waydroid" class="headerlink" title="Waydroid"></a>Waydroid</h3><p>anbox 后继 <a href="https://waydro.id/">Waydroid</a> 还没试过，是容器起的模拟器。</p><h3 id="budtmo-x2F-docker-android"><a href="#budtmo-x2F-docker-android" class="headerlink" title="budtmo&#x2F;docker-android"></a>budtmo&#x2F;docker-android</h3><p><a href="https://github.com/budtmo/docker-android">https://github.com/budtmo/docker-android</a> 感觉太重了，而且没 arm64 架构镜像。</p><h3 id="remote-android-x2F-redroid-doc"><a href="#remote-android-x2F-redroid-doc" class="headerlink" title="remote-android&#x2F;redroid-doc"></a>remote-android&#x2F;redroid-doc</h3><p><a href="https://github.com/remote-android/redroid-doc">https://github.com/remote-android/redroid-doc</a> 尝试运行 arm64 的 apk 成功了，chrome 的浏览器不行，需要有些依赖才可以运行，uc 浏览器也不行，最后用的  arm64 firefox 浏览器。另外发现有些 apk 安装后打开黑屏，最后从 proxmox 虚拟机切到宿主机上 docker 起才解决，也看到有人 arm64 M1 mac 上起安卓容器。</p><h2 id="一些软件"><a href="#一些软件" class="headerlink" title="一些软件"></a>一些软件</h2><h3 id="scrcpy"><a href="#scrcpy" class="headerlink" title="scrcpy"></a>scrcpy</h3><p><a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a> 牛逼的项目，不用多说，配合 adb 使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrcpy</span><br><span class="line"> -S, --turn-screen-off # 远程时候，关闭设备的屏幕</span><br><span class="line">#  --max-size 1024 --video-bit-rate=2M --max-fps=15 低画质</span><br></pre></td></tr></table></figure><p>关闭屏幕这个，lcd 的触发后，如果关闭 scrcpy 后面屏幕还会亮，而 oled 的则不会，单独想 adb 实现它的关闭屏幕显示而不休眠，可以参考</p><ul><li><a href="https://meta.appinn.net/t/topic/46361">https://meta.appinn.net/t/topic/46361</a></li><li><a href="https://github.com/Genymobile/scrcpy/issues/2888">https://github.com/Genymobile/scrcpy/issues/2888</a></li><li><a href="https://github.com/barry-ran/QtScrcpy/issues/194">https://github.com/barry-ran/QtScrcpy/issues/194</a></li></ul><p>还有其他很多 scrcpy 项目，以及可以很多编程语言有 scrcpy 的库，可以做到写代码控制手机和上面的应用。</p><h2 id="adb-协议"><a href="#adb-协议" class="headerlink" title="adb 协议"></a>adb 协议</h2><ul><li><a href="https://github.com/cstyan/adbDocumentation">https://github.com/cstyan/adbDocumentation</a></li></ul><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3><ul><li><a href="https://github.com/electricbubble/gadb">https://github.com/electricbubble/gadb</a></li></ul><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul><li><a href="https://www.52pojie.cn/thread-408645-1-1.html">https://www.52pojie.cn/thread-408645-1-1.html</a></li></ul><h3 id="常见逆向"><a href="#常见逆向" class="headerlink" title="常见逆向"></a>常见逆向</h3><ul><li>frida objection</li><li><a href="https://kuizuo.cn/docs/frida-so-hook/">https://kuizuo.cn/docs/frida-so-hook/</a></li></ul><h3 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h3><p>spwan</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-U usb， -f 是Attach模式，不带-f是Spawn 模式，前者会启动app注入，后者是自己选择啥时候注入</span></span><br><span class="line">frida -U -f &lt;app_name&gt; -l hook.js</span><br></pre></td></tr></table></figure><p>js 的话，hook 内容如下类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.MainActivity&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hook Java 方法</span></span><br><span class="line">        <span class="title class_">MainActivity</span>.<span class="property">foo</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">foo</span>(str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Return value:&#x27;</span>, ret);</span><br><span class="line">            <span class="comment">// 返回</span></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过检测 frida <a href="https://github.com/Ylarod/Florida">Ylarod&#x2F;Florida</a></p><p>抓包:</p><ul><li><a href="https://github.com/siyujie/OkHttpLogger-Frida">https://github.com/siyujie/OkHttpLogger-Frida</a></li></ul><h3 id="unit-游戏逆向"><a href="#unit-游戏逆向" class="headerlink" title="unit 游戏逆向"></a>unit 游戏逆向</h3><p><code>libs/&#123;libil2cpp,libmain,libunity,libxlua&#125;.so</code></p><ul><li><a href="https://veo.pub/2020/xlua/">https://veo.pub/2020/xlua/</a></li><li><a href="https://bbs.kanxue.com/thread-257678.htm">https://bbs.kanxue.com/thread-257678.htm</a> </li><li><a href="https://blog.csdn.net/linxinfa/article/details/116572369">https://blog.csdn.net/linxinfa/article/details/116572369</a></li><li><a href="https://github.com/vfsfitvnm/frida-il2cpp-bridge">https://github.com/vfsfitvnm/frida-il2cpp-bridge</a></li><li><a href="https://github.com/MlgmXyysd/IL2CppMemoryDumper">https://github.com/MlgmXyysd/IL2CppMemoryDumper</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://bbs.kanxue.com/thread-280500.htm</span></span><br><span class="line">npm install frida-compile</span><br><span class="line">npm install --save-dev frida-il2cpp-bridge</span><br><span class="line">npm run watch</span><br><span class="line"></span><br><span class="line">frida -f xxx -l hook.js</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/dnSpyEx/dnSpy">https://github.com/dnSpyEx/dnSpy</a></li><li><a href="https://www.youtube.com/watch?v=NBjGm7YAZUQ">https://www.youtube.com/watch?v=NBjGm7YAZUQ</a></li></ul><h3 id="辅助逆向"><a href="#辅助逆向" class="headerlink" title="辅助逆向"></a>辅助逆向</h3><ul><li><a href="https://blog.csdn.net/weixin_56039202/article/details/126980383">某直装外挂卡密校验逆向分析</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;长期记录和更新关于安卓和 Linux 的一些折腾笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="android" scheme="http://zhangguanzhang.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>hostPort 访问进来的源 IP 是 cni0 地址的排查</title>
    <link href="http://zhangguanzhang.github.io/2024/06/17/hostPort-source-addr-cni0/"/>
    <id>http://zhangguanzhang.github.io/2024/06/17/hostPort-source-addr-cni0/</id>
    <published>2024-06-17T15:10:30.000Z</published>
    <updated>2024-06-17T15:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>hostPort 访问进来的源 IP 是 cni0 地址的问题排查</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>内部网关的操作日志显示的来源 IP 都是 cni0 地址，网关开发和测试反馈之前是好的，还给了一个正常环境。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>我们网关是 hostPort 80 暴漏的，只关注这块，其他的不需要关注，两套环境信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get node -o wide</span></span><br><span class="line">NAME           STATUS   ROLES         AGE   VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                                      KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">...</span><br><span class="line">10.xx.x6.112   Ready    master,node   18d   v1.27.12   10.xx.x6.112   &lt;none&gt;        Red Hat Enterprise Linux Server 7.9 (Maipo)   3.10.0-1160.el7.x86_64   docker://25.0.5</span><br></pre></td></tr></table></figure><p>上面是不正常的，下面是正常环境的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get node -o wide</span></span><br><span class="line">NAME           STATUS   ROLES         AGE   VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME</span><br><span class="line">10.xx.x7.111   Ready    master,node   9d    v1.27.12   10.xx.x7.111   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1160.el7.x86_64   docker://25.0.5</span><br></pre></td></tr></table></figure><p>两套环境上的 docker k8s 以及 cni-plugins 版本和 md5sum 看了下都是一样的，我在外部 <code>10.2xx.xx.30</code> 上 curl 两个环境 <code>ip:80</code>，俩机器上用 conntrack 查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conntrack -L |&amp; grep 10.2xx.xx.30</span></span><br><span class="line">tcp      6 9 CLOSE src=10.2xx.xx.30 dst=10.xx.x6.112 sport=41388 dport=80 src=10.18x.2.38 dst=10.18x.2.1 sport=80 dport=55471 [ASSURED] mark=0 use=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conntrack -L |&amp; grep 10.2xx.xx.30</span></span><br><span class="line">tcp      6 8 CLOSE src=10.2xx.xx.30 dst=10.xx.x7.111 sport=55658 dport=80 src=10.18x.0.36 dst=10.2xx.xx.30 sport=80 dport=55658 [ASSURED] mark=0 use=1</span><br></pre></td></tr></table></figure><p>第一个右侧的 dst IP 是错误的，网关层面打印日志 tcp source addr 和这个 IP 是一致的。涉及到地址转换自然是查看 nat 表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -S | grep -Ev <span class="string">&#x27;KUBE-(SVC|SEP)&#x27;</span> | grep MASQ</span></span><br><span class="line">-N CNI-HOSTPORT-MASQ</span><br><span class="line">-N KUBE-MARK-MASQ</span><br><span class="line">-A POSTROUTING -m comment --comment &quot;CNI portfwd requiring masquerade&quot; -j CNI-HOSTPORT-MASQ</span><br><span class="line">-A POSTROUTING -s 10.185.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A CNI-HOSTPORT-MASQ -m mark --mark 0x2000/0x2000 -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG -s 10.18x.0.0/16 ! -d 224.0.0.0/4 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG ! -s 10.18x.0.0/16 -d 10.18x.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG -s 10.18x.0.0/16 ! -d 224.0.0.0/4 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG ! -s 10.18x.0.0/16 -d 10.18x.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000</span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment &quot;kubernetes service traffic requiring SNAT&quot; -j MASQUERADE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">iptables -t nat -S | grep -Ev <span class="string">&#x27;KUBE-(SVC|SEP|EXT)&#x27;</span> | grep MASQ</span></span><br><span class="line">-N CNI-HOSTPORT-MASQ</span><br><span class="line">-N KUBE-MARK-MASQ</span><br><span class="line">-A POSTROUTING -s 10.185.0.0/16 ! -o docker0 -j MASQUERADE</span><br><span class="line">-A POSTROUTING -m comment --comment &quot;CNI portfwd requiring masquerade&quot; -j CNI-HOSTPORT-MASQ</span><br><span class="line">-A CNI-HOSTPORT-MASQ -m mark --mark 0x2000/0x2000 -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG -s 10.18x.0.0/16 ! -d 224.0.0.0/4 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A FLANNEL-POSTRTG ! -s 10.18x.0.0/16 -d 10.18x.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000</span><br><span class="line">-A KUBE-POSTROUTING -m comment --comment &quot;kubernetes service traffic requiring SNAT&quot; -j MASQUERADE</span><br></pre></td></tr></table></figure><p>对比发现故障环境的 <code>FLANNEL-POSTRTG</code> 重复添加了，查看下 flanneld 俩机器 docker 镜像使用是一样的，查看该故障机器的 flanneld 日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker logs 3743</span></span><br><span class="line">I0605 10:08:06.702126       1 main.go:209] CLI flags config: &#123;etcdEndpoints:http://127.0.0.1:4001,http://127.0.0.1:2379 etcdPrefix:/coreos.com/network etcdKeyfile: etcdCertfile: etcdCAFile: etcdUsername: etcdPassword: version:false kubeSubnetMgr:true kubeApiUrl: kubeAnnotationPrefix:flannel.alpha.coreos.com kubeConfigFile: iface:[] ifaceRegex:[] ipMasq:true ifaceCanReach: subnetFile:/run/flannel/subnet.env publicIP: publicIPv6: subnetLeaseRenewMargin:60 healthzIP:0.0.0.0 healthzPort:0 iptablesResyncSeconds:5 iptablesForwardRules:true netConfPath:/etc/kube-flannel/net-conf.json setNodeNetworkUnavailable:true&#125;</span><br><span class="line">W0605 10:08:06.702229       1 client_config.go:618] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.</span><br><span class="line">I0605 10:08:06.898029       1 kube.go:139] Waiting 10m0s for node controller to sync</span><br><span class="line">I0605 10:08:06.898109       1 kube.go:461] Starting kube subnet manager</span><br><span class="line">I0605 10:08:06.905502       1 kube.go:482] Creating the node lease for IPv4. This is the n.Spec.PodCIDRs: [10.18x.0.0/24]</span><br><span class="line">I0605 10:08:06.905578       1 kube.go:482] Creating the node lease for IPv4. This is the n.Spec.PodCIDRs: [10.18x.1.0/24]</span><br><span class="line">I0605 10:08:06.905587       1 kube.go:482] Creating the node lease for IPv4. This is the n.Spec.PodCIDRs: [10.18x.2.0/24]</span><br><span class="line">I0605 10:08:07.898972       1 kube.go:146] Node controller sync successful</span><br><span class="line">I0605 10:08:07.899005       1 main.go:229] Created subnet manager: Kubernetes Subnet Manager - 10.xx.x6.112</span><br><span class="line">I0605 10:08:07.899011       1 main.go:232] Installing signal handlers</span><br><span class="line">I0605 10:08:07.899099       1 main.go:452] Found network config - Backend type: vxlan</span><br><span class="line">I0605 10:08:07.899119       1 match.go:210] Determining IP address of default interface</span><br><span class="line">I0605 10:08:07.899406       1 match.go:263] Using interface with name ens192 and address 10.xx.x6.112</span><br><span class="line">I0605 10:08:07.899429       1 match.go:285] Defaulting external address to interface address (10.xx.x6.112)</span><br><span class="line">I0605 10:08:07.899499       1 vxlan.go:141] VXLAN config: VNI=1 Port=8475 GBP=false Learning=false DirectRouting=false</span><br><span class="line">I0605 10:08:07.951679       1 kube.go:627] List of node(10.xx.x6.112) annotations: map[string]string&#123;&quot;flannel.alpha.coreos.com/backend-data&quot;:&quot;&#123;\&quot;VNI\&quot;:1,\&quot;VtepMAC\&quot;:\&quot;b2:be:c3:c7:1b:c0\&quot;&#125;&quot;, &quot;flannel.alpha.coreos.com/backend-type&quot;:&quot;vxlan&quot;, &quot;flannel.alpha.coreos.com/kube-subnet-manager&quot;:&quot;true&quot;, &quot;flannel.alpha.coreos.com/public-ip&quot;:&quot;10.xx.x6.112&quot;, &quot;node.alpha.kubernetes.io/ttl&quot;:&quot;0&quot;, &quot;volumes.kubernetes.io/controller-managed-attach-detach&quot;:&quot;true&quot;&#125;</span><br><span class="line">I0605 10:08:07.951761       1 vxlan.go:155] Setup flannel.1 mac address to b2:be:c3:c7:1b:c0 when flannel restarts</span><br><span class="line">W0605 10:08:08.358170       1 main.go:505] no subnet found for key: FLANNEL_SUBNET in file: /run/flannel/subnet.env</span><br><span class="line">W0605 10:08:08.358192       1 main.go:540] no subnet found for key: FLANNEL_IPV6_SUBNET in file: /run/flannel/subnet.env</span><br><span class="line">I0605 10:08:08.358208       1 iptables.go:65] Current network or subnet (10.18x.0.0/16, 10.18x.2.0/24) is not equal to previous one (0.0.0.0/0, 0.0.0.0/0), trying to recycle old iptables rules</span><br><span class="line">I0605 10:08:09.407576       1 iptables.go:75] Setting up masking rules</span><br><span class="line">I0605 10:08:09.496912       1 iptables.go:214] Changing default FORWARD chain policy to ACCEPT</span><br><span class="line">I0605 10:08:09.497996       1 iptables.go:373] generated 7 rules</span><br><span class="line">I0605 10:08:09.498948       1 iptables.go:373] generated 3 rules</span><br><span class="line">I0605 10:08:09.498957       1 main.go:396] Wrote subnet file to /run/flannel/subnet.env</span><br><span class="line">I0605 10:08:09.499017       1 main.go:400] Running backend.</span><br><span class="line">I0605 10:08:09.499138       1 vxlan_network.go:65] watching for new subnet leases</span><br><span class="line">I0605 10:08:09.499200       1 subnet.go:160] Batch elem [0] is &#123; lease.Event&#123;Type:0, Lease:lease.Lease&#123;EnableIPv4:true, EnableIPv6:false, Subnet:ip.IP4Net&#123;IP:0xabb0000, PrefixLen:0x18&#125;, IPv6Subnet:ip.IP6Net&#123;IP:(*ip.IP6)(nil), PrefixLen:0x0&#125;, Attrs:lease.LeaseAttrs&#123;PublicIP:0xa0d0431, PublicIPv6:(*ip.IP6)(nil), BackendType:&quot;vxlan&quot;, BackendData:json.RawMessage&#123;0x7b, 0x22, 0x56, 0x4e, 0x49, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x56, 0x74, 0x65, 0x70, 0x4d, 0x41, 0x43, 0x22, 0x3a, 0x22, 0x64, 0x36, 0x3a, 0x36, 0x63, 0x3a, 0x33, 0x34, 0x3a, 0x33, 0x34, 0x3a, 0x33, 0x31, 0x3a, 0x36, 0x30, 0x22, 0x7d&#125;, BackendV6Data:json.RawMessage(nil)&#125;, Expiration:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Asof:0&#125;&#125; &#125;</span><br><span class="line">I0605 10:08:09.499324       1 subnet.go:160] Batch elem [0] is &#123; lease.Event&#123;Type:0, Lease:lease.Lease&#123;EnableIPv4:true, EnableIPv6:false, Subnet:ip.IP4Net&#123;IP:0xabb0100, PrefixLen:0x18&#125;, IPv6Subnet:ip.IP6Net&#123;IP:(*ip.IP6)(nil), PrefixLen:0x0&#125;, Attrs:lease.LeaseAttrs&#123;PublicIP:0xa0d0434, PublicIPv6:(*ip.IP6)(nil), BackendType:&quot;vxlan&quot;, BackendData:json.RawMessage&#123;0x7b, 0x22, 0x56, 0x4e, 0x49, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x56, 0x74, 0x65, 0x70, 0x4d, 0x41, 0x43, 0x22, 0x3a, 0x22, 0x34, 0x65, 0x3a, 0x36, 0x65, 0x3a, 0x32, 0x33, 0x3a, 0x32, 0x36, 0x3a, 0x64, 0x31, 0x3a, 0x33, 0x36, 0x22, 0x7d&#125;, BackendV6Data:json.RawMessage(nil)&#125;, Expiration:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Asof:0&#125;&#125; &#125;</span><br><span class="line">I0605 10:08:09.695633       1 main.go:421] Waiting for all goroutines to exit</span><br><span class="line">I0605 10:08:09.700710       1 iptables.go:366] bootstrap done</span><br><span class="line">I0605 10:08:09.898448       1 iptables.go:366] bootstrap done</span><br><span class="line">I0611 17:53:28.697794       1 iptables.go:504] Some iptables rules are missing; deleting and recreating rules</span><br><span class="line">I0611 17:53:29.496576       1 iptables.go:366] bootstrap done</span><br><span class="line">E0611 18:40:00.096822       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 18:40:00.981247       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:06.900507       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:07.696829       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:11.904013       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:12.699112       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:16.906109       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:17.700350       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:21.907087       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 19:10:22.701113       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0611 23:26:26.010120       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 01:54:09.295176       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 01:55:10.203362       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:04:14.795485       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:05:44.800163       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:14:16.207339       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:14:16.312867       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:16:04.703252       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:05.999282       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:34.006303       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:39.009225       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:41.396200       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:44.011983       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:46.397122       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:49.014794       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:51.398528       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:54.016252       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:56.400014       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:18:59.019059       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:19:01.401163       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:19:04.021511       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:19:20.302554       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:19:59.906583       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:21:29.195932       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br><span class="line">E0612 02:22:49.310222       1 iptables.go:403] Failed to ensure iptables rules: error checking rule existence: failed to check rule existence: fork/exec /sbin/iptables: cannot allocate memory</span><br></pre></td></tr></table></figure><p>报错 iptables 无法分配内存，重启下 flannel，然后 curl 后看 conntrack 条目正常了，添加下重复规则测试也正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -w -t nat -A FLANNEL-POSTRTG -s 10.18x.0.0/16 ! -d 224.0.0.0/4 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br><span class="line">iptables -w -t nat -A FLANNEL-POSTRTG ! -s 10.18x.0.0/16 -d 10.18x.0.0/16 -m comment --comment &quot;flanneld masq&quot; -j MASQUERADE</span><br></pre></td></tr></table></figure><p>反馈给网关同事说好了，他说还是有问题的 IP，等 conntrack 老化后就正常了。我去看了下主机监控，<code>E0611 18:40:00.096822</code> 内存和负载以及流量都正常，从报错来讲看着像是物理内存，但是其他服务没报错看着像是 kernel memory，但是系统日志里也没找到异常，也可能是 iptables bug。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hostPort 访问进来的源 IP 是 cni0 地址的问题排查&lt;/p&gt;</summary>
    
    
    
    
    <category term="hostPort" scheme="http://zhangguanzhang.github.io/tags/hostPort/"/>
    
  </entry>
  
  <entry>
    <title>arm64 redis COW 检测</title>
    <link href="http://zhangguanzhang.github.io/2024/05/22/redis-arm64-cow/"/>
    <id>http://zhangguanzhang.github.io/2024/05/22/redis-arm64-cow/</id>
    <published>2024-05-22T17:10:30.000Z</published>
    <updated>2024-05-22T17:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 redis arm64 COW 检测</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>redis 5.0.14 开始，会带有 arm64 上的 MADV_FREE&#x2F;fork 的 kernal bug check，参照以下 issue 和 pr</p><ul><li><a href="https://github.com/redis/redis/issues/8124">https://github.com/redis/redis/issues/8124</a></li><li><a href="https://github.com/redis/redis/pull/8224">https://github.com/redis/redis/pull/8224</a></li></ul><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><p>根据代码逻辑，redis arm64 上启动的时候会检测，如果存在 bug，则不会启动，类似下面的日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># WARNING Your kernel has a bug that could lead to data corruption during background save. Please upgrade to the latest stable kernel.</span><br><span class="line"># Redis will now exit to prevent data corruption. Note that it is possible to suppress this warning by setting the following config: ignore-warnings ARM64-COW-BUG</span><br><span class="line">WARN exited: redis (exit status 1; not expected)</span><br></pre></td></tr></table></figure><p>需要在配置文件里添加 <code>ignore-warnings ARM64-COW-BUG</code> 才行，国产的麒麟和一些其他系统的内核都是 backpart 居多，同事说部分系统上 redis 配置里加上配置后会无法启动，不加是能启动的，但是我看代码是先检查 COW 再看没配置选项才退出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="keyword">if</span> ((ret = checkLinuxMadvFreeForkBug(&amp;err_msg)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;WARNING %s&quot;</span>, err_msg);</span><br><span class="line">        sdsfree(err_msg);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Failed to test the kernel for a bug that could lead to data corruption during background save. &quot;</span></span><br><span class="line">                              <span class="string">&quot;Your system could be affected, please report this error.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!checkIgnoreWarning(<span class="string">&quot;ARM64-COW-BUG&quot;</span>)) &#123;</span><br><span class="line">        serverLog(LL_WARNING,<span class="string">&quot;Redis will now exit to prevent data corruption. &quot;</span></span><br><span class="line">                             <span class="string">&quot;Note that it is possible to suppress this warning by setting the following config: ignore-warnings ARM64-COW-BUG&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于他说的现象我是存疑的。</p><h2 id="扣检测代码"><a href="#扣检测代码" class="headerlink" title="扣检测代码"></a>扣检测代码</h2><p>发现 golang 的 arm64 没有 <code>undefined: syscall.SYS_FORK</code>，还是直接扣下检测 c 函数，编译成二进制，然后加到 redis docker-entrypoint.sh 里做逻辑追加配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/redis/redis/blob/e92363e248019b8bf3fc7dd8ce84f648b6b13473/src/syscheck.c#L174-L299</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MADV_FREE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MADV_FREE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">anetPipe</span><span class="params">(<span class="type">int</span> *fds, <span class="type">int</span> read_flags, <span class="type">int</span> write_flags)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pipe(fds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get size in kilobytes of the Shared_Dirty pages of the calling process for the</span></span><br><span class="line"><span class="comment"> * memory map corresponding to the provided address, or -1 on error. */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">smapsGetSharedDirty</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> addr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret, in_mapping = <span class="number">0</span>, val = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> from, to;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    FILE *f;</span><br><span class="line"></span><br><span class="line">    f = fopen(<span class="string">&quot;/proc/self/smaps&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fgets(buf, <span class="keyword">sizeof</span>(buf), f))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        ret = <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%lx-%lx&quot;</span>, &amp;from, &amp;to);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">2</span>)</span><br><span class="line">            in_mapping = from &lt;= addr &amp;&amp; addr &lt; to;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in_mapping &amp;&amp; !<span class="built_in">memcmp</span>(buf, <span class="string">&quot;Shared_Dirty:&quot;</span>, <span class="number">13</span>)) &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%*s %d&quot;</span>, &amp;val);</span><br><span class="line">            <span class="comment">/* If parsing fails, we remain with val == -1 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(f);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Older arm64 Linux kernels have a bug that could lead to data corruption</span></span><br><span class="line"><span class="comment"> * during background save in certain scenarios. This function checks if the</span></span><br><span class="line"><span class="comment"> * kernel is affected.</span></span><br><span class="line"><span class="comment"> * The bug was fixed in commit ff1712f953e27f0b0718762ec17d0adb15c9fd0b</span></span><br><span class="line"><span class="comment"> * titled: &quot;arm64: pgtable: Ensure dirty bit is preserved across pte_wrprotect()&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">checkLinuxMadvFreeForkBug</span><span class="params">(<span class="type">char</span> **error_msg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret, pipefd[<span class="number">2</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">NULL</span>, *q;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> page_size = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="type">long</span> map_size = <span class="number">3</span> * page_size;</span><br><span class="line"></span><br><span class="line">    p = mmap(<span class="literal">NULL</span>, map_size, PROT_READ, MAP_ANONYMOUS | MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == MAP_FAILED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q = p + page_size;</span><br><span class="line"></span><br><span class="line">    ret = mprotect(q, page_size, PROT_READ | PROT_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">char</span>*)q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ret = madvise(q, page_size, MADV_FREE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EINVAL) <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">char</span>*)q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ret = anetPipe(pipefd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pid) &#123;</span><br><span class="line">        ret = smapsGetSharedDirty((<span class="type">unsigned</span> <span class="type">long</span>) q);</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ret = write(pipefd[<span class="number">1</span>], &amp;res, <span class="keyword">sizeof</span>(res));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = read(pipefd[<span class="number">0</span>], &amp;res, <span class="keyword">sizeof</span>(res));</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">    <span class="keyword">if</span> (pipefd[<span class="number">0</span>] != <span class="number">-1</span>) close(pipefd[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (pipefd[<span class="number">1</span>] != <span class="number">-1</span>) close(pipefd[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) munmap(p, map_size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">-1</span> &amp;&amp; error_msg) &#123;</span><br><span class="line">        *error_msg = strdup(<span class="string">&quot;Your kernel has a bug that could lead to data corruption during background save. Please upgrade to the latest stable kernel.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *error_msg = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> result = checkLinuxMadvFreeForkBug(&amp;error_msg);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Kernel bug detected: %s\n&quot;</span>, error_msg);</span><br><span class="line">        <span class="built_in">free</span>(error_msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No kernel bug detected.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error checking for kernel bug.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arm64 上编译成静态文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o check_bug -static check_bug.c</span><br></pre></td></tr></table></figure><p>然后构建 docker 镜像：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arch ?= <span class="variable">$(<span class="built_in">shell</span> uname -m)</span></span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(arch)</span>, aarch64)</span><br><span class="line">gcc -o check_bug.sh -static check_bug.c</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="section">image: build</span></span><br><span class="line">docker build -t xxx .</span><br></pre></td></tr></table></figure><p><code>.gitignore</code> 忽略二进制提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check_bug.sh</span><br></pre></td></tr></table></figure><p>dockerfile 里 <code>COPY *.sh</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于 redis arm64 COW 检测&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="http://zhangguanzhang.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>k8s node 热扩容内存导致的一次业务故障</title>
    <link href="http://zhangguanzhang.github.io/2024/05/01/kubernetes-hotplug-resource/"/>
    <id>http://zhangguanzhang.github.io/2024/05/01/kubernetes-hotplug-resource/</id>
    <published>2024-05-01T15:10:30.000Z</published>
    <updated>2024-05-01T15:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>k8s node 热扩容内存导致的一次业务故障</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>2024&#x2F;04 月底发生的，k8s node 热扩容内存导致的一次业务故障，此次不是排查，而是过程梳理。k8s 版本是 1.27.4。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们有些业务的 cpu 和内存是根据使用人数上涨的，多副本资源占用 &gt; 单个高配副本，例如 1000 个人使用某个功能，多副本可能需要 6个 4c4G，但是单个副本 18c16G 就可以。所以我们的核心业务服务都是不加 limit 的。该服务也有自我限制，例如它最多使用机器的 85% 内存后，后续请求就不处理。</p><p>客户使用人数上升，告警后现场人员让客户给机器加了内存（hotplug） 由 64g -&gt; 128g ，然后过了一天后机器频繁驱逐导致 cpu 高。看 kubelet 日志报错内存压力触发驱逐，但是看监控使用还好（node_exporter获取是实时的）内存没到 75% 以上才 65%，核心服务日志里也没到百分比上线内存，后面发现是 kubelet 的内存信息还是老的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Capacity:</span><br><span class="line">  cpu:                16</span><br><span class="line">  ...</span><br><span class="line">  memory:             65789716Ki</span><br><span class="line">  pods:               253</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                15400m</span><br><span class="line">  ...</span><br><span class="line">  memory:             63225620Ki</span><br><span class="line">  pods:               253</span><br></pre></td></tr></table></figure><p>重启 kubelet 后，内存信息就正常了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Capacity:</span><br><span class="line">  cpu:                16</span><br><span class="line">  ...</span><br><span class="line">  memory:             103538444Ki</span><br><span class="line">  pods:               253</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                15400m</span><br><span class="line">  ...</span><br><span class="line">  memory:             100974348Ki</span><br><span class="line">  pods:               253</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在 <code>func NewMainKubelet(</code> 里，只获取一次</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/kubernetes/kubernetes/blob/7b359a2f9e1ff5cdc49cfcc4e350e9d796f502c0/pkg/kubelet/kubelet.go#L607-L614</span></span><br><span class="line"></span><br><span class="line">machineInfo, err := klet.cadvisor.MachineInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Avoid collector collects it as a timestamped metric</span></span><br><span class="line"><span class="comment">// See PR #95210 and #97006 for more details.</span></span><br><span class="line">machineInfo.Timestamp = time.Time&#123;&#125;</span><br><span class="line">klet.setCachedMachineInfo(machineInfo)</span><br></pre></td></tr></table></figure><p>全局搜 <code>setCachedMachineInfo(</code> 找到了 <code>kubernetes/pkg/kubelet/kubelet_getters.go</code> 下的:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetCachedMachineInfo assumes that the machine info can&#x27;t change without a reboot</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span></span> GetCachedMachineInfo() (*cadvisorapiv1.MachineInfo, <span class="type">error</span>) &#123;</span><br><span class="line">kl.machineInfoLock.RLock()</span><br><span class="line"><span class="keyword">defer</span> kl.machineInfoLock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> kl.machineInfo, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span></span> setCachedMachineInfo(info *cadvisorapiv1.MachineInfo) &#123;</span><br><span class="line">kl.machineInfoLock.Lock()</span><br><span class="line"><span class="keyword">defer</span> kl.machineInfoLock.Unlock()</span><br><span class="line">kl.machineInfo = info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜 <code>GetCachedMachineInfo</code> 找到 <code>kubernetes/pkg/kubelet/kubelet_node_status.go</code> 下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/kubernetes/kubernetes/blob/d1c7f7a0e9d59aa88aa5b4d07db7e14772b3e386/pkg/kubelet/kubelet_node_status.go#L733</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span></span> defaultNodeStatusFuncs()</span><br><span class="line">....</span><br><span class="line">setters = <span class="built_in">append</span>(setters,</span><br><span class="line">...</span><br><span class="line">nodestatus.MachineInfo(.... kl.GetCachedMachineInfo, ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后 <code>kubernetes/pkg/kubelet/nodestatus/setters.go</code> 里的 <code>func MachineInfo(</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/nodestatus/setters.go#L283</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MachineInfo</span><span class="params">(nodeName <span class="type">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">...</span></span></span><br><span class="line"><span class="params"><span class="function">machineInfoFunc <span class="keyword">func</span>()</span></span> (*cadvisorapiv1.MachineInfo, <span class="type">error</span>),</span><br><span class="line">    ...</span><br><span class="line">    info, err := machineInfoFunc()</span><br></pre></td></tr></table></figure><p><code>defaultNodeStatusFuncs</code> 是 node kubelet 每 <code>nodeStatusUpdateFrequency</code> 时候查看一些信息变化否，变了后面会上报更新，从上面整个代码流程看是只获取了一次，开了个虚拟机搭建修改代码 <code>GetCachedMachineInfo()</code> 内尾部追加，编译替换后运行，扩容测试了下可以不重启动态更新：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Avoid collector collects it as a timestamped metric</span></span><br><span class="line">    <span class="comment">// See PR #95210 and #97006 for more details.</span></span><br><span class="line">    <span class="comment">// cannot use kl.machineInfo.Timestamp</span></span><br><span class="line">    <span class="keyword">if</span> kl.lastStatusReportTime.Before(time.Now().Add(<span class="number">-50</span> * time.Second)) &#123;</span><br><span class="line">        currentMachineInfo, err := kl.cadvisor.MachineInfo()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> currentMachineInfo.NumCores &gt; kl.machineInfo.NumCores &#123;</span><br><span class="line">            kl.machineInfo.NumCores = currentMachineInfo.NumCores</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> currentMachineInfo.MemoryCapacity &gt; kl.machineInfo.MemoryCapacity &#123;</span><br><span class="line">            kl.machineInfo.MemoryCapacity = currentMachineInfo.MemoryCapacity</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后面去提了 kep <a href="https://github.com/kubernetes/enhancements/issues/4609">Hot increase cpu&#x2F;memory&#x2F;storage without restarting kubelet</a> 但是发现之前就有了，只不过依旧没符合要求和合入。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;k8s node 热扩容内存导致的一次业务故障&lt;/p&gt;</summary>
    
    
    
    
    <category term="kubernetes" scheme="http://zhangguanzhang.github.io/tags/kubernetes/"/>
    
    <category term="hotplug" scheme="http://zhangguanzhang.github.io/tags/hotplug/"/>
    
  </entry>
  
  <entry>
    <title>开源容器镜像扫描 trivy 懒人重点指南</title>
    <link href="http://zhangguanzhang.github.io/2024/04/22/trivy/"/>
    <id>http://zhangguanzhang.github.io/2024/04/22/trivy/</id>
    <published>2024-04-22T18:35:30.000Z</published>
    <updated>2024-04-22T18:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>写给那些不爱看文档和自己使用中应该注意的一些技巧</p><span id="more"></span><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>介绍下 trivy 的使用和一些注意的点</p><h2 id="介绍和安装"><a href="#介绍和安装" class="headerlink" title="介绍和安装"></a>介绍和安装</h2><p><a href="https://github.com/aquasecurity/trivy">trivy</a> 是一个漏洞安全扫描，可以扫描</p><ul><li>Container Image</li><li>Filesystem</li><li>Git Repository (remote)</li><li>Virtual Machine Image</li><li>Kubernetes</li><li>AWS</li></ul><p>因为是 golang 开发的，安装非常简单 <a href="https://github.com/aquasecurity/trivy/releases">release</a> 页面找到最新的 release，点击 <code>Show all xx aseets</code> 后下载 <code>trivy_x.xx.x_Linux-64bit.tar.gz</code> 下来解压即可。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>trivy 的 cmd 和 option 是使用 cobra 框架写的，支持子命令和全局选项，可以<code>trivy -h</code>、 <code>trivy image -h</code> 依次查看对应的命令帮助。</p><p>扫描示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ trivy image debian:12</span><br><span class="line">$ trivy image --input debian-12.tar.gz</span><br><span class="line">$ trivy repo https://github.com/knqyf263/trivy-ci-test</span><br><span class="line">$ trivy k8s --report summary cluster</span><br></pre></td></tr></table></figure><p>可以自行研究下命令参数和看<a href="https://aquasecurity.github.io/trivy/latest/">官方文档</a>，这里不写详细的，很多还是要看官方文档。</p><p>trivy 在执行扫描的时候，会下载两个 db文件：</p><ul><li><code>ghcr.io/aquasecurity/trivy-db</code></li><li><code>ghcr.io/aquasecurity/trivy-java-db</code></li></ul><p>该文件是 oci（<code>application/vnd.oci.image.manifest.v1</code>） 镜像格式的，同时是存储在 ghcr 的 github 镜像仓库上的，国内可能能拉取到，更大可能是拉取不到。可以使用国内的同步源：</p><ul><li><code>m.daocloud.io/ghcr.io/aquasecurity/trivy-db</code></li><li><code>m.daocloud.io/ghcr.io/aquasecurity/trivy-java-db</code></li></ul><p>命令行参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trivy image --db-repository m.daocloud.io/ghcr.io/aquasecurity/trivy-db \</span><br><span class="line">  --java-db-repository m.daocloud.io/ghcr.io/aquasecurity/trivy-java-db  \</span><br><span class="line">  debian:12</span><br></pre></td></tr></table></figure><h2 id="cve-准确性"><a href="#cve-准确性" class="headerlink" title="cve 准确性"></a>cve 准确性</h2><p>我们内部使用扫描后，客户现场扫描的报告，查看了结果两者不是一样的，属于两者结果有部分交集的结果。查看<a href="https://aquasecurity.github.io/trivy/latest/docs/scanner/vulnerability/">官方文档 vulnerability</a> 章节说明了前面俩 db 的数据来源，并不是比较全的 cve 列表，同时 <a href="https://github.com/aquasecurity/trivy-db">trivy-db</a> 是每隔 6 个小时构建更新的</p><h2 id="内部-ci-上使用"><a href="#内部-ci-上使用" class="headerlink" title="内部 ci 上使用"></a>内部 ci 上使用</h2><p>先得解决机器无法拉取 github 镜像仓库，需要配同步到内网镜像仓库上比较好，另外 oci 格式是不支持 docker pull 的，可以使用 <a href="https://github.com/containers/skopeo">skopeo</a> 的 sync 命令每天定时间隔同步:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare -a list=(</span><br><span class="line">    &quot;trivy-db:2&quot;</span><br><span class="line">    &quot;trivy-db:1&quot;</span><br><span class="line">    trivy-db</span><br><span class="line">    &quot;trivy-java-db:1&quot;</span><br><span class="line">)</span><br><span class="line">    for image in $&#123;list[@]&#125;;do</span><br><span class="line">        skopeo --insecure-policy copy docker://m.daocloud.io/ghcr.io/aquasecurity/$&#123;image&#125; docker://xxx.com/ci-run/$&#123;image&#125;</span><br><span class="line"></span><br><span class="line">    done</span><br></pre></td></tr></table></figure><p>根据官方文档 <a href="https://aquasecurity.github.io/trivy/latest/docs/references/configuration/cli/trivy_server/">trivy_server</a> 支持 client&#x2F;server 模式的，server 是一直运行的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trivy server</span><br><span class="line">trivy image --server http://localhost/remote:4954 alpine</span><br></pre></td></tr></table></figure><p>对于我们好多节点还有地域性质的 jenkins 构建场景不适合，同时每个单独运行的话，由于 db 默认是下载后解压到 <code>~/.cache/trivy</code> 下的文件，默认的 <code>--cache-backend</code> 是 fs，多 jenkins 构建机器的话，会每次运行都下载很浪费容量。</p><p>查看了官方文档 <a href="https://aquasecurity.github.io/trivy/latest/docs/configuration/cache/">cache</a> 支持 redis 作为缓存的，但是从 -h 选项和文档里示例的都是 tls 的 redis 链接方式，对于密码方式就不支持，然后查看源码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/aquasecurity/trivy/blob/63c9469bdd91ee71ee643862329a3948b42c561d/pkg/commands/operation/operation.go#L43-L69</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCache</span><span class="params">(c flag.CacheOptions)</span></span> (Cache, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(c.CacheBackend, <span class="string">&quot;redis://&quot;</span>) &#123;</span><br><span class="line">log.Info(<span class="string">&quot;Redis cache&quot;</span>, log.String(<span class="string">&quot;url&quot;</span>, c.CacheBackendMasked()))</span><br><span class="line">options, err := redis.ParseURL(c.CacheBackend)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Cache&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !lo.IsEmpty(c.RedisOptions) &#123;</span><br><span class="line">caCert, cert, err := GetTLSConfig(c.RedisCACert, c.RedisCert, c.RedisKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Cache&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">options.TLSConfig = &amp;tls.Config&#123;</span><br><span class="line">RootCAs:      caCert,</span><br><span class="line">Certificates: []tls.Certificate&#123;cert&#125;,</span><br><span class="line">MinVersion:   tls.VersionTLS12,</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> c.RedisTLS &#123;</span><br><span class="line">options.TLSConfig = &amp;tls.Config&#123;</span><br><span class="line">MinVersion: tls.VersionTLS12,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">redisCache := cache.NewRedisCache(options, c.CacheTTL)</span><br><span class="line"><span class="keyword">return</span> Cache&#123;Cache: redisCache&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 redis 的 client 库是使用的 <a href="https://github.com/go-redis/redis/v8">go-redis</a>，查看它的官方文档，发现可以 DSN 形式传入密码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt, err := redis.ParseURL(<span class="string">&quot;redis://&lt;user&gt;:&lt;pass&gt;@localhost:6379/&lt;db&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>同时，不推荐命令行带参数，不然会泄露密码，参考官方文档 <a href="https://aquasecurity.github.io/trivy/latest/docs/references/configuration/config-file/">config-file</a> 使用配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">m.daocloud.io/ghcr.io/aquasecurity/trivy-db</span></span><br><span class="line">  <span class="attr">java-repository:</span> <span class="string">m.daocloud.io/ghcr.io/aquasecurity/trivy-java-db</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">backend:</span> <span class="string">&quot;redis://:xxx@redis-server:6379&quot;</span></span><br></pre></td></tr></table></figure><p>一开始报错 noauth，后面发现必须加冒号，没有用户名就是上面这样的格式，同时官方文档 <a href="https://aquasecurity.github.io/trivy/latest/docs/configuration/">configuration</a> 说明了，对于每一个长选项，都可以使用环境变量代替，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trivy --config xxx.yml xxx</span><br><span class="line">TRIVY_CONFIG=xxx.yml trivy xxx</span><br></pre></td></tr></table></figure><p>这样 ci 里运行也不用带 cmdline 泄露配置文件路径。当然还支持模板和 output format 以及设置 <code>--exit-code </code> 会在 ci 里很实用。避免扫描的时候下载缓存失败导致扫描结果没出来，可以扫描之前，执行下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">until trivy image --download-db-only; do</span><br><span class="line">echo &quot;Command failed. Retrying...&quot;</span><br><span class="line">sleep 1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">until trivy image --download-java-db-only; do</span><br><span class="line">echo &quot;Command failed. Retrying...&quot;</span><br><span class="line">sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>jenkins 里，扫描可以使用官方的 html.tpl 模板，最后用 <a href="https://www.jenkins.io/doc/pipeline/steps/htmlpublisher/">publishHTML</a> 展示。由于 trivy 不支持一次扫描多个镜像，可以把官方的模板文件下载后分割成三部分拼接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cp &quot;$&#123;tpl_dir&#125;/trivy-html-head.tpl&quot; report.html</span><br><span class="line">while read -r line; do</span><br><span class="line">    if [ -f &quot;$line&quot; ];then</span><br><span class="line">        trivy image --format template --template &quot;@$&#123;tpl_dir&#125;/trivy-html-body.tpl&quot; -o report.tmp --input $line</span><br><span class="line">        cat report.tmp &gt;&gt; report.html</span><br><span class="line">        # break</span><br><span class="line">    fi</span><br><span class="line">done &lt; &quot;/dev/stdin&quot;</span><br><span class="line">rm -f report.tmp</span><br><span class="line">cat &quot;$&#123;tpl_dir&#125;/trivy-html-end.tpl&quot; &gt;&gt; report.html</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>对于 trivy-db 文件更详细的分析和介绍文章 <a href="https://zhuanlan.zhihu.com/p/608116087">镜像安全扫描工具Trivy深入实践</a></li><li><a href="https://www.rectcircle.cn/posts/oci-image-spec/">OCI 格式研究</a></li><li><a href="https://github.com/aquasecurity/trivy/discussions/3688">https://github.com/aquasecurity/trivy/discussions/3688</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;写给那些不爱看文档和自己使用中应该注意的一些技巧&lt;/p&gt;</summary>
    
    
    
    
    <category term="trivy" scheme="http://zhangguanzhang.github.io/tags/trivy/"/>
    
  </entry>
  
  <entry>
    <title>golang pprof 转 svg 的最小二进制依赖尝试</title>
    <link href="http://zhangguanzhang.github.io/2024/04/16/pprof-small/"/>
    <id>http://zhangguanzhang.github.io/2024/04/16/pprof-small/</id>
    <published>2024-04-16T19:05:30.000Z</published>
    <updated>2024-04-16T19:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>不依赖 go ，最小二进制把 pprof 转 svg 的探索</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>内部同事做了个采集业务 pprof 的功能，发现工具镜像非常臃肿，带了个 golang 出去。用的是 <a href="https://github.com/uber-archive/go-torch">go-torch</a> 把 <code>curl -o /debug/pprof/profile</code> 采集的文件转成 svg ，转换的日志里发现它命令行调用了 <code>go tool pprof</code>，而且 <code>go-torch</code> 我看仓库已经不维护了。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>一个是涉及到迭代解决安全，另一个 golang 已经 go 自举了，把 <code>go tool pprof</code> 的 <code>pprof</code> 命令抠出来直接用就行了，甚至都不需要 golang 环境了，搜了下发现实际 <code>go tool pprof</code> 就是仓库 <a href="https://github.com/google/pprof">google&#x2F;pprof</a>。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>go-torch</code> 转换的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go-torch xxx-profile-20240416110934.pg.gz -f 1.svg</span></span><br><span class="line">INFO[03:12:29] Run pprof command: go tool pprof -raw -seconds 30 xxx-profile-20240416110934.pg.gz</span><br><span class="line">INFO[03:12:29] Writing svg to 1.svg</span><br></pre></td></tr></table></figure><p>浅显的看了下它的源码，发现它是把 pprof 的 raw 格式输出，按照 pprof 的字节流格式解析的，就是 <code>state funcnames samplenames records</code> 那些，然后调用 <code>flamegraph</code> perl 脚本转 svg 的。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uber-archive/go-torch/blob/master/renderer/flamegraph.go#L37</span></span><br><span class="line">flameGraphScripts    = []<span class="type">string</span>&#123;<span class="string">&quot;flamegraph&quot;</span>, <span class="string">&quot;flamegraph.pl&quot;</span>, <span class="string">&quot;./flamegraph.pl&quot;</span>, <span class="string">&quot;./FlameGraph/flamegraph.pl&quot;</span>, <span class="string">&quot;flame-graph-gen&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>如果单纯转 svg，pprof 工具就可以，它转 svg 会先转 dot 格式，然后 exec 调用 <code>graphviz</code> 包下的 dot 命令。</p><p>dot 命令要包管理安装，并且很多依赖，看看有没有 golang 的实现。谷歌搜索 <code>golang dot to svg</code> 看到了第一个仓库 <a href="https://github.com/goccy/go-graphviz">goccy&#x2F;go-graphviz</a>，大致看了下 readme.md ，发现它不依赖 <code>graphviz</code> 并且提供了一个 dot 的命令实现。测试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/google/pprof@latest</span><br><span class="line">go install github.com/goccy/go-graphviz/cmd/dot@latest</span><br></pre></td></tr></table></figure><p>测试转 svg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pprof -svg -seconds 30 http://xx.xxx.0.84:xxxx/debug/pprof/profile &gt; test.svg</span></span><br><span class="line">Fetching profile over HTTP from http://xx.xxx.0.84:xxxx/debug/pprof/profile?seconds=30</span><br><span class="line">Please wait... (30s)</span><br><span class="line">Saved profile in /root/pprof/pprof.xxxx.samples.cpu.001.pb.gz</span><br><span class="line">the required flag `-o&#x27; was not specified</span><br></pre></td></tr></table></figure><p>发现报错，查看了下 pprof 的源码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/google/pprof/blob/26353dc0451f29f7b9cdade98377a016779b8527/internal/driver/commands.go#L385-L408</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invokeDot</span><span class="params">(format <span class="type">string</span>)</span></span> PostProcessor &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(input io.Reader, output io.Writer, ui plugin.UI)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;dot&quot;</span>, <span class="string">&quot;-T&quot;</span>+format)</span><br><span class="line">cmd.Stdin, cmd.Stdout, cmd.Stderr = input, output, os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to execute dot. Is Graphviz installed? Error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// massageDotSVG invokes the dot tool to generate an SVG image and alters</span></span><br><span class="line"><span class="comment">// the image to have panning capabilities when viewed in a browser.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">massageDotSVG</span><span class="params">()</span></span> PostProcessor &#123;</span><br><span class="line">generateSVG := invokeDot(<span class="string">&quot;svg&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(input io.Reader, output io.Writer, ui plugin.UI)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">baseSVG := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line"><span class="keyword">if</span> err := generateSVG(input, baseSVG, ui); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">_, err := output.Write([]<span class="type">byte</span>(massageSVG(baseSVG.String())))</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是把 dot 格式的字节流给 <code>dot -Tsvg</code> 的 stdin ，dot 命令会自动把流输出到标准输出，然后 pprof 会把 dot 输出的字节流捕获，上面的报错就是 golang 的 dot 有问题。看了下 dot 的源码，发现 -o 选项是必须的，下面是改过的 diff：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">18c18</span><br><span class="line">&lt; OutputFile string          `description:&quot;specify output file name&quot; short:&quot;o&quot; required:&quot;true&quot;`</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt; OutputFile string          `description:&quot;specify output file name&quot; short:&quot;o&quot;`</span><br><span class="line">51a52,54</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; if !terminal.IsTerminal(0) &#123;</span><br><span class="line">&gt; opt.OutputFile = &quot;/dev/stdout&quot;</span><br></pre></td></tr></table></figure><p>编译后替换了，发现可以转换成 svg 了，但是还有个问题，会输出 <code>Saved profile in /root/pprof/pprof.main.samples.cpu.001.pb.gz</code> 发现会把 tmp 文件存在这里，可以通过设置变量 <code>PPROF_TMPDIR</code> 指定 tmp 文件路径，但是 pprof 没有任何选项参数删除这个 tmp 文件，提了 issue 直接给我关了。</p><p>其实也可以扣 pprof 源码拼 <code>go-graphviz</code> 库源码，这样一键或者 golang 函数内采集指定参数转 svg ，但是这块功能目前还没长期定型下来，暂时还是最小的 <code>pprof + dot</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不依赖 go ，最小二进制把 pprof 转 svg 的探索&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
    <category term="pprof" scheme="http://zhangguanzhang.github.io/tags/pprof/"/>
    
  </entry>
  
  <entry>
    <title>cri-dockerd 无法拉取需认证仓库上的 pause 镜像解决</title>
    <link href="http://zhangguanzhang.github.io/2024/04/11/cri-docker-sandbox-image/"/>
    <id>http://zhangguanzhang.github.io/2024/04/11/cri-docker-sandbox-image/</id>
    <published>2024-04-11T16:05:30.000Z</published>
    <updated>2024-04-11T16:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>私有化下，cri-dockerd Pulling the image without credentials. Image: reg.xxx.lan:5000&#x2F;xxx&#x2F;pause:3.9</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>私有化下，环境都会部署一个内网仓库镜像，然后发现某天客户环境的 pod 无法拉起来，发现是镜像 gc 后，cri-dockerd 的 pause 镜像无法拉取了，手动拉取没问题的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>之前遇到过，但是当时比较忙，今天有空看下。</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><p>cri-dockerd 版本无关，参考官方文档使用 systemd 部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">cat</span> --no-pager cri-dockerd</span></span><br><span class="line">...</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/data/kube/bin/cri-dockerd \</span><br><span class="line">    --container-runtime-endpoint unix:///var/run/cri-dockerd.sock \</span><br><span class="line">    --network-plugin=cni \</span><br><span class="line">    --streaming-bind-addr=127.0.0.1 \</span><br><span class="line">    --cni-bin-dir=/data/kube/bin/ \</span><br><span class="line">    --pod-infra-container-image=reg.xxx.lan:5000/xxx/pause:3.9</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>报错信息为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -xe -u cri-dockerd</span></span><br><span class="line">Apr 11 15:11:48 xxx cri-dockerd[5894]: level=info msg=&quot;Pulling the image without credentials. Image: reg.xxx.lan:5000/xxx/pause:3.9&quot;</span><br><span class="line">Apr 11 15:12:14 xxx cri-dockerd[5894]: level=info msg=&quot;Pulling the image without credentials. Image: reg.xxx.lan:5000/xxx/pause:3.9&quot;</span><br><span class="line">Apr 11 15:13:11 xxx cri-dockerd[5894]: level=info msg=&quot;Pulling the image without credentials. Image: reg.xxx.lan:5000/xxx/pause:3.9&quot;</span><br></pre></td></tr></table></figure><h3 id="查看源码逻辑"><a href="#查看源码逻辑" class="headerlink" title="查看源码逻辑"></a>查看源码逻辑</h3><p>根据日志关键字，找到是如下函数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Mirantis/cri-dockerd/blob/b138f5226ae901b99ea34d40ab1eaed1c26445a4/core/sandbox_helpers.go#L408-L448</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensureSandboxImageExists</span><span class="params">(client libdocker.DockerClientInterface, image <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">_, err := client.InspectImageByRef(image)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !libdocker.IsImageNotFoundError(err) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to inspect sandbox image %q: %v&quot;</span>, image, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repoToPull, _, _, err := utils.ParseImageName(image)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">keyring := credentialprovider.NewDockerKeyring()</span><br><span class="line">creds, withCredentials := keyring.Lookup(repoToPull)</span><br><span class="line"><span class="keyword">if</span> !withCredentials &#123;</span><br><span class="line">logrus.Infof(<span class="string">&quot;Pulling the image without credentials. Image: %v&quot;</span>, image)</span><br><span class="line"></span><br><span class="line">err := client.PullImage(image, dockerregistry.AuthConfig&#123;&#125;, dockertypes.ImagePullOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed pulling image %q: %v&quot;</span>, image, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pullErrs []<span class="type">error</span></span><br><span class="line"><span class="keyword">for</span> _, currentCreds := <span class="keyword">range</span> creds &#123;</span><br><span class="line">authConfig := dockerregistry.AuthConfig(currentCreds)</span><br><span class="line">err := client.PullImage(image, authConfig, dockertypes.ImagePullOptions&#123;&#125;)</span><br><span class="line"><span class="comment">// If there was no error, return success</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pullErrs = <span class="built_in">append</span>(pullErrs, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> errors.NewAggregate(pullErrs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照 <code>credentialprovider.NewDockerKeyring()</code> 往下找，发现最终是在 <code>./vendor/k8s.io/kubernetes/pkg/credentialprovider/</code> 下的逻辑：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Mirantis/cri-dockerd/blob/b138f5226ae901b99ea34d40ab1eaed1c26445a4/vendor/k8s.io/kubernetes/pkg/credentialprovider/provider.go#L46-L 52</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">RegisterCredentialProvider(<span class="string">&quot;.dockercfg&quot;</span>,</span><br><span class="line">&amp;CachingDockerConfigProvider&#123;</span><br><span class="line">Provider: &amp;defaultDockerConfigProvider&#123;&#125;,</span><br><span class="line">Lifetime: <span class="number">5</span> * time.Minute,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 <code>CachingDockerConfigProvider</code> 是定义一个间隔时间读取文件的 provider，读取文件的逻辑在：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Mirantis/cri-dockerd/blob/b138f5226ae901b99ea34d40ab1eaed1c26445a4/vendor/k8s.io/kubernetes/pkg/credentialprovider/provider.go#L77C1-L85C2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *defaultDockerConfigProvider)</span></span> Provide(image <span class="type">string</span>) DockerConfig &#123;</span><br><span class="line"><span class="comment">// Read the standard Docker credentials from .dockercfg</span></span><br><span class="line"><span class="keyword">if</span> cfg, err := ReadDockerConfigFile(); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cfg</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !os.IsNotExist(err) &#123;</span><br><span class="line">klog.V(<span class="number">2</span>).Infof(<span class="string">&quot;Docker config file not found: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DockerConfig&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一路跳转，到文件 <code>./vendor/k8s.io/kubernetes/pkg/credentialprovider/config.go</code> 里的：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">preferredPathLock sync.Mutex</span><br><span class="line">preferredPath     = <span class="string">&quot;&quot;</span></span><br><span class="line">workingDirPath    = <span class="string">&quot;&quot;</span></span><br><span class="line">homeDirPath, _    = os.UserHomeDir()</span><br><span class="line">rootDirPath       = <span class="string">&quot;/&quot;</span></span><br><span class="line">homeJSONDirPath   = filepath.Join(homeDirPath, <span class="string">&quot;.docker&quot;</span>)</span><br><span class="line">rootJSONDirPath   = filepath.Join(rootDirPath, <span class="string">&quot;.docker&quot;</span>)</span><br><span class="line"></span><br><span class="line">configFileName     = <span class="string">&quot;.dockercfg&quot;</span></span><br><span class="line">configJSONFileName = <span class="string">&quot;config.json&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultDockercfgPaths</span><span class="params">()</span></span> []<span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">string</span>&#123;GetPreferredDockercfgPath(), workingDirPath, homeDirPath, rootDirPath&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDockercfgFile</span><span class="params">(searchPaths []<span class="type">string</span>)</span></span> (cfg DockerConfig, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(searchPaths) == <span class="number">0</span> &#123;</span><br><span class="line">searchPaths = DefaultDockercfgPaths()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, configPath := <span class="keyword">range</span> searchPaths &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找目录逻辑也没问题，cri-dockerd 是 root 运行的，<code>/root/.docker/config.json</code> 里有的，也没其他特殊权限啥的。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>手动拉取没问题的，所以主要逻辑是为啥进程没读取到 <code>/root/.docker/config.json</code>，然后下载源码后 dlv 调试下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop cri-docker kubelet</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker rmi -f reg.xxx.lan:5000/xxx/pause:3.9</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">reboot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复没有拉取的环境情况再 debug</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dlv <span class="built_in">exec</span> main.go -- --container-runtime-endpoint unix:///var/run/cri-dockerd.sock \</span></span><br><span class="line"><span class="language-bash">    --network-plugin=cni \</span></span><br><span class="line"><span class="language-bash">    --streaming-bind-addr=127.0.0.1 \</span></span><br><span class="line"><span class="language-bash">    --cni-bin-dir=/data/kube/bin/ \</span></span><br><span class="line"><span class="language-bash">    --pod-infra-container-image=reg.xxx.lan:5000/xxx/pause:3.9</span></span><br></pre></td></tr></table></figure><p>最后发现代码逻辑没走到 <code>if !withCredentials &#123;</code> ，就很奇怪，然后自己编译一个替换启动后发现也能复现，就打算 dlv attach 看下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build  -gcflags=<span class="string">&quot;all=-N -l&quot;</span>  -o cri-dockerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop cri-dockerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">\<span class="built_in">cp</span> cri-dockerd /data/kube/bin/cri-dockerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl start cri-dockerd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dlv attach $(pgrep cri-dockerd)</span></span><br></pre></td></tr></table></figure><p>打了三个断点后 continue ，发现 <code>DefaultDockercfgPaths()</code> 返回的四个查找路径值不对：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(dlv) c</span><br><span class="line">&gt; k8s.io/kubernetes/pkg/credentialprovider.ReadDockerConfigJSONFile() ./vendor/k8s.io/kubernetes/pkg/credentialprovider/config.go:138 (hits goroutine(677):1 total:1) (PC: 0x2285942)</span><br><span class="line">   133:// if searchPaths is empty, the default paths are used.</span><br><span class="line">   134:func ReadDockerConfigJSONFile(searchPaths []string) (cfg DockerConfig, err error) &#123;</span><br><span class="line">   135:if len(searchPaths) == 0 &#123;</span><br><span class="line">   136:searchPaths = DefaultDockerConfigJSONPaths()</span><br><span class="line">   137:&#125;</span><br><span class="line">=&gt; 138:for _, configPath := range searchPaths &#123;</span><br><span class="line">   139:absDockerConfigFileLocation, err := filepath.Abs(filepath.Join(configPath, configJSONFileName))</span><br><span class="line">   140:if err != nil &#123;</span><br><span class="line">   141:klog.Errorf(&quot;while trying to canonicalize %s: %v&quot;, configPath, err)</span><br><span class="line">   142:continue</span><br><span class="line">   143:&#125;</span><br><span class="line">(dlv) p searchPaths</span><br><span class="line">[]string len: 4, cap: 4, [</span><br><span class="line">&quot;&quot;,</span><br><span class="line">&quot;&quot;,</span><br><span class="line">&quot;.docker&quot;,</span><br><span class="line">&quot;/.docker&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>看了下 <code>homeJSONDirPath</code> 发现也不对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(dlv) p homeJSONDirPath</span><br><span class="line">&quot;.docker&quot;</span><br></pre></td></tr></table></figure><p>代码里它的值来源是：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homeDirPath, _    = os.UserHomeDir()</span><br><span class="line"> ...</span><br><span class="line">homeJSONDirPath   = filepath.Join(homeDirPath, <span class="string">&quot;.docker&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用下 <code>os.UserHomeDir()</code> 看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(dlv) call os.UserHomeDir()</span><br><span class="line">&gt; k8s.io/kubernetes/pkg/credentialprovider.ReadDockerConfigJSONFile() ./vendor/k8s.io/kubernetes/pkg/credentialprovider/config.go:138 (PC: 0x2285942)</span><br><span class="line">Values returned:</span><br><span class="line">~r0: &quot;&quot;</span><br><span class="line">~r1: error(*errors.errorString) *&#123;</span><br><span class="line">s: &quot;$HOME is not defined&quot;,&#125;</span><br></pre></td></tr></table></figure><p>居然没有 <code>HOME</code> 变量，从 procfs 看看启动时候的 env：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xargs -0 -n1 &lt; /proc/$(pgrep cri-dockerd)/environ</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br><span class="line">NOTIFY_SOCKET=/run/systemd/notify</span><br><span class="line">LISTEN_PID=5894</span><br><span class="line">LISTEN_FDS=1</span><br></pre></td></tr></table></figure><p>看来 systemd 没有给配置 <code>$HOME</code> 变量，然后发现设置了 <code>User</code> 才有 <code>HOME=/root</code> 环境变量，这也说明之前 <code>dlv exec</code> 正常的原因。</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>几种解决方法：</p><ul><li>systemd 文件里设置 <code>WorkingDirectory</code> 下:<ul><li>直接设置为 <code>/root</code></li><li>拷贝一个 docker login 的 config.json 文件到进程 <code>WorkingDirectory</code> 下: <code>config.json</code> 或者 <code>.dockercfg</code></li></ul></li><li>设置 <code>User=root</code></li></ul><p>已提交 pr 修复 <a href="https://github.com/Mirantis/cri-dockerd/pull/349">Mirantis&#x2F;cri-dockerd&#x2F;pull&#x2F;349</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;私有化下，cri-dockerd Pulling the image without credentials. Image: reg.xxx.lan:5000&amp;#x2F;xxx&amp;#x2F;pause:3.9&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="cri-dockerd" scheme="http://zhangguanzhang.github.io/tags/cri-dockerd/"/>
    
  </entry>
  
  <entry>
    <title>docker 和 k8s 使用 gpu 笔记</title>
    <link href="http://zhangguanzhang.github.io/2024/04/08/nvidia-container-toolkit/"/>
    <id>http://zhangguanzhang.github.io/2024/04/08/nvidia-container-toolkit/</id>
    <published>2024-04-08T15:05:30.000Z</published>
    <updated>2024-04-08T15:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录下 docker k8s 使用 gpu 的笔记</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>网上 nvidia-container-toolkit 一些文档的时效性，而且主要是私有化、离线和小白角度下的笔记</p><h2 id="安装-nvidia-GPU-驱动"><a href="#安装-nvidia-GPU-驱动" class="headerlink" title="安装 nvidia GPU 驱动"></a>安装 nvidia GPU 驱动</h2><p>这个文章 <a href="https://developer.nvidia.com/zh-cn/blog/nvidia-gpu-operator-simplifying-gpu-management-in-kubernetes/">nvidia-gpu-operator-simplifying-gpu-management-in-kubernetes</a> 有说使用 nvidia gpu operator 来部署，不需要在宿主机上安装驱动，但是看文档 <a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/platform-support.html#supported-nvidia-data-center-gpus-and-systems">supported-nvidia-data-center-gpus-and-systems</a> 没有 RTX 4090 支持。所以大家常规都是使用 nvidia-container-toolkit 方案的 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html">官方文档</a> 的结构：</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html"><img src="https://cloud.githubusercontent.com/assets/3028125/12213714/5b208976-b632-11e5-8406-38d379ec46aa.png" alt="nvidia-container-toolkit"></a></p><p>对于 NVIDIA GPU Operator 感兴趣直接看 <a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/index.html">NVIDIA GPU Operator 官方文档</a></p><h3 id="系统前置配置"><a href="#系统前置配置" class="headerlink" title="系统前置配置"></a>系统前置配置</h3><p>推荐 ubuntu 22.04 部署，具体支持的系统看 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/1.14.5/supported-platforms.html">官方文档 supported-platforms</a>  先确认系统层面识别到显卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ lspci | grep -i nvidia</span><br><span class="line">1b:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">1b:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">1e:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">1e:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">22:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">22:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">23:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">23:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">4f:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">4f:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">52:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">52:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">56:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">56:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br><span class="line">57:00.0 VGA compatible controller: NVIDIA Corporation Device 2684 (rev a1)</span><br><span class="line">57:00.1 Audio device: NVIDIA Corporation Device 22ba (rev a1)</span><br></pre></td></tr></table></figure><p>查看 2684 可以进入 <a href="https://admin.pci-ids.ucw.cz/mods/PC/10de?action=help?help=pci">PCI Devices</a> 下面输入 2684 点击 jump 会显示对应的卡名。或者让 lspci 的信息更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ update-pciids</span><br><span class="line">$ lspci | grep -i nvidia</span><br><span class="line">1b:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">1b:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">1e:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">1e:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">22:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">22:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">23:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">23:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">4f:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">4f:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">52:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">52:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">56:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">56:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br><span class="line">57:00.0 VGA compatible controller: NVIDIA Corporation AD102 [GeForce RTX 4090] (rev a1)</span><br><span class="line">57:00.1 Audio device: NVIDIA Corporation AD102 High Definition Audio Controller (rev a1)</span><br></pre></td></tr></table></figure><p>禁用 nouveau ，它是第三方为 NVIDIA 显卡开发的驱动，没得到官方的认可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/modprobe.d/blacklist-nouveau.conf &lt;&lt; EOF</span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>关闭包更新，否则可能会出现和我同事一样，安装好驱动后，被自动更新了一些包，导致 cuda toolkit 无法使用的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &#x27;/Update-Package-Lists/s#1#0#&#x27; /etc/apt/apt.conf.d/10periodic</span><br></pre></td></tr></table></figure><p>文件 <code>/etc/apt/apt.conf.d/50unattended-upgrades</code> 里是在系统自动升级过程中，不更新的列表，例如有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unattended-Upgrade::Package-Blacklist &#123;</span><br><span class="line">    // The following matches all packages starting with linux-</span><br><span class="line">//  &quot;linux-&quot;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>把 <code>linux-</code> 前面的 <code>//</code> 取消了，因为闭源显卡驱动和内核版本挂钩的，我们不希望升级 <code>linux-image-*</code> 和 <code>linux-headers-*</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &#x27;\@^//\s+&quot;linux-&quot;@s#^//##&#x27; /etc/apt/apt.conf.d/50unattended-upgrades</span><br></pre></td></tr></table></figure><p>更新 initramfs 并重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># apt 系列系统</span><br><span class="line">update-initramfs -u</span><br><span class="line"># centos 系统</span><br><span class="line">mv /boot/initramfs-$(uname -r).img&#123;,.bak&#125;</span><br><span class="line">dracut /boot/initramfs-$(uname -r).img $(uname -r)</span><br><span class="line"></span><br><span class="line">重启</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"># 记得验证不包含 nouveau</span><br><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><h4 id="不使用-apt-安装"><a href="#不使用-apt-安装" class="headerlink" title="不使用 apt 安装"></a>不使用 apt 安装</h4><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/platform-support.html#gpu-operator-component-matrix">gpu operator 文档</a></li><li><a href="https://docs.nvidia.com/datacenter/tesla/drivers/index.html#cuda-drivers">cuda-drivers 和 cuda workdlow</a></li></ul><p>从上面面俩文档（主要是第二个文档）的表格得到信息：</p><table><thead><tr><th></th><th>R470</th><th>R535</th><th>R550</th></tr></thead><tbody><tr><td>Branch Designation</td><td>Long Term Support Branch</td><td>Long Term Support Branch</td><td>Production Branch</td></tr><tr><td>EOL 时间</td><td>July 2024</td><td>June 2026</td><td>February 2025</td></tr><tr><td>最小 CUDA 版本支持</td><td>CUDA 11.0+</td><td>CUDA 12.0+</td><td>CUDA 12.0+</td></tr></tbody></table><p>所以驱动首选 535 ， <a href="https://www.nvidia.com/Download/Find.aspx">官网驱动搜索页面</a> ，我这里选的非笔记本 4090 点击 search 选择后选择 535 下载，其他卡根据选项选择，例如下面：</p><ul><li>GeForce RTX 4090: <code>Type=GeForce</code> <code>Series=GeForce RTX 40 Series</code> <code>NVIDIA GeForce RTX 4090</code></li><li>A10: <code>Type=Data Center / Tesla</code>  <code>Series=A-Series</code> <code>NVIDIA A10</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wget https://us.download.nvidia.com/tesla/535.161.08/NVIDIA-Linux-x86_64-535.161.08.run</span><br><span class="line">chmod a+x NVIDIA-Linux-x86_64-535.161.08.run</span><br><span class="line"></span><br><span class="line"># 确保有 gcc 和 linux-kernel-headers 和一些依赖 </span><br><span class="line">apt install -y \</span><br><span class="line">  gcc linux-kernel-headers \</span><br><span class="line">  pkg-config libvulkan1</span><br><span class="line"></span><br><span class="line">./NVIDIA-Linux-x86_64-535.161.08.run</span><br><span class="line"># 安装日志在 /var/log/nvidia-installer.log</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="apt-安装方式"><a href="#apt-安装方式" class="headerlink" title="apt 安装方式"></a>apt 安装方式</h4><p>参考 ubuntu 官方文档 <a href="https://ubuntu.com/server/docs/nvidia-drivers-installation">nvidia-drivers-installation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y ubuntu-drivers-common</span><br></pre></td></tr></table></figure><p>然后按照官方文档来，而且会添加一个 <code>nvidia-detector</code> 命令，执行会推荐你安装的版本。</p><h4 id="查看显卡驱动信息"><a href="#查看显卡驱动信息" class="headerlink" title="查看显卡驱动信息"></a>查看显卡驱动信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br><span class="line">Mon Apr  8 18:48:39 2024       </span><br><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 535.113.01             Driver Version: 535.113.01   CUDA Version: 12.2     |</span><br><span class="line">|-----------------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                                         |                      |               MIG M. |</span><br><span class="line">|=========================================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce RTX 4090        Off | 00000000:1B:00.0 Off |                  Off |</span><br><span class="line">| 31%   25C    P8              12W / 450W |   6112MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  NVIDIA GeForce RTX 4090        Off | 00000000:1E:00.0 Off |                  Off |</span><br><span class="line">| 31%   26C    P8               6W / 450W |  17876MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   2  NVIDIA GeForce RTX 4090        Off | 00000000:22:00.0 Off |                  Off |</span><br><span class="line">| 30%   28C    P8              15W / 450W |   4248MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   3  NVIDIA GeForce RTX 4090        Off | 00000000:23:00.0 Off |                  Off |</span><br><span class="line">| 31%   28C    P8               5W / 450W |   4246MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   4  NVIDIA GeForce RTX 4090        Off | 00000000:4F:00.0 Off |                  Off |</span><br><span class="line">| 31%   25C    P8              16W / 450W |   4246MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   5  NVIDIA GeForce RTX 4090        Off | 00000000:52:00.0 Off |                  Off |</span><br><span class="line">| 30%   26C    P8              12W / 450W |   4246MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   6  NVIDIA GeForce RTX 4090        Off | 00000000:56:00.0 Off |                  Off |</span><br><span class="line">| 30%   27C    P8               5W / 450W |  21974MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line">|   7  NVIDIA GeForce RTX 4090        Off | 00000000:57:00.0 Off |                  Off |</span><br><span class="line">| 31%   28C    P8              12W / 450W |  16220MiB / 24564MiB |      0%      Default |</span><br><span class="line">|                                         |                      |                  N/A |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line"># 这个路径也可以查看驱动，可以做一些脚本判断逻辑</span><br><span class="line">$ cat /proc/driver/nvidia/version</span><br><span class="line">NVRM version: NVIDIA UNIX x86_64 Kernel Module  535.113.01  Tue Sep 12 19:41:24 UTC 2023</span><br><span class="line">GCC version:  gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)</span><br></pre></td></tr></table></figure><p>右上角的 cuda version 是 cuda user-mode driver的版本，它是跟随 driver 安装的，和 cuda toolkit 没强关联，而后续开发使用到的 cuda toolkit 版本可以自己查看 <code>nvcc -V</code></p><h2 id="cuda-toolkit"><a href="#cuda-toolkit" class="headerlink" title="cuda toolkit"></a>cuda toolkit</h2><p>宿主机上有需求可以自行安装下，可能未来这块会更新加上安装步骤</p><h2 id="nvidia-container-toolkit"><a href="#nvidia-container-toolkit" class="headerlink" title="nvidia-container-toolkit"></a>nvidia-container-toolkit</h2><h3 id="安装-ctk"><a href="#安装-ctk" class="headerlink" title="安装 ctk"></a>安装 ctk</h3><p>截至 2024&#x2F;04&#x2F;08 ，nvidia-container-runtime 已经废弃了，现在叫 nvidia-container-toolkit 并且官方文档切到下面：</p><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/#overview">https://docs.nvidia.com/datacenter/cloud-native/#overview</a></li><li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html</a></li></ul><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">官方安装文档</a></p><p>按照官方文档添加源后安装 <code>nvidia-container-toolkit</code>，会附带安装了三个包，四个包的信息为：</p><table><thead><tr><th></th><th>文件列表</th><th>说明</th></tr></thead><tbody><tr><td><code>libnvidia-container1</code></td><td>so 动态链接库，c 和 go 的 so 文件</td><td>例如给下面的二进制使用，下面依赖它，更新它可以向前兼容</td></tr><tr><td><code>libnvidia-container-tools</code></td><td><code>/usr/bin/nvidia-container-cli</code></td><td></td></tr><tr><td><code>nvidia-container-toolkit-base</code></td><td><li><code>nvidia-container-runtime</code> 之前包名 runtime 二进制和它的配置文件 <li><code>nvidia-ctk</code> NVIDIA Container Toolkit 工具，它的 runtime 可以子命令可以代替人为编辑 container runtime 的配置文件</td><td></td></tr><tr><td><code>nvidia-container-toolkit</code></td><td><li><code>nvidia-container-runtime-hook</code> 二进制</td><td></td></tr></tbody></table><p>依赖关系如下，version 是指 NVIDIA Container Toolkit 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─ nvidia-container-toolkit (version)</span><br><span class="line">│    ├─ libnvidia-container-tools (&gt;= version)</span><br><span class="line">│    └─ nvidia-container-toolkit-base (version)</span><br><span class="line">│</span><br><span class="line">├─ libnvidia-container-tools (version)</span><br><span class="line">│    └─ libnvidia-container1 (&gt;= version)</span><br><span class="line">└─ libnvidia-container1 (version)</span><br></pre></td></tr></table></figure><p>例如下面是官方文档的图，它是如何和 docker 工作的，点击图片也可以跳转上面包介绍信息：</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/arch-overview.html"><img src="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/_images/runtime-architecture.png" alt="runtime-architecture"></a></p><details><summary>点击展开 ubuntu22.04 上 deb 包内文件内容</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -L libnvidia-container1</span><br><span class="line">/.</span><br><span class="line">/usr</span><br><span class="line">/usr/lib</span><br><span class="line">/usr/lib/x86_64-linux-gnu</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libnvidia-container-go.so.1.13.5</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libnvidia-container.so.1.13.5</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/libnvidia-container1</span><br><span class="line">/usr/share/doc/libnvidia-container1/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/libnvidia-container1/copyright</span><br><span class="line">/usr/share/lintian</span><br><span class="line">/usr/share/lintian/overrides</span><br><span class="line">/usr/share/lintian/overrides/libnvidia-container1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libnvidia-container-go.so.1</span><br><span class="line">/usr/lib/x86_64-linux-gnu/libnvidia-container.so.1</span><br><span class="line">$ dpkg -L libnvidia-container-tools</span><br><span class="line">/.</span><br><span class="line">/usr</span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/nvidia-container-cli</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/libnvidia-container-tools</span><br><span class="line">/usr/share/doc/libnvidia-container-tools/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/libnvidia-container-tools/copyright</span><br><span class="line">/usr/share/lintian</span><br><span class="line">/usr/share/lintian/overrides</span><br><span class="line">/usr/share/lintian/overrides/libnvidia-container-tools</span><br><span class="line"></span><br><span class="line">$ dpkg -L nvidia-container-toolkit-base</span><br><span class="line">/.</span><br><span class="line">/etc</span><br><span class="line">/etc/nvidia-container-runtime</span><br><span class="line">/etc/nvidia-container-runtime/config.toml</span><br><span class="line">/usr</span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/nvidia-container-runtime</span><br><span class="line">/usr/bin/nvidia-ctk</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit-base</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit-base/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit-base/copyright</span><br><span class="line"></span><br><span class="line">$ dpkg -L nvidia-container-toolkit</span><br><span class="line">/.</span><br><span class="line">/usr</span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/nvidia-container-runtime-hook</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/nvidia-container-toolkit/copyright</span><br><span class="line">/usr/share/lintian</span><br><span class="line">/usr/share/lintian/overrides</span><br><span class="line">/usr/share/lintian/overrides/nvidia-container-toolkit</span><br></pre></td></tr></table></figure></details><details><summary>点击展开 centos 7.9 上 rpm 包内文件内容</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ql libnvidia-container1</span><br><span class="line">/usr/lib64/libnvidia-container-go.so.1</span><br><span class="line">/usr/lib64/libnvidia-container-go.so.1.15.0</span><br><span class="line">/usr/lib64/libnvidia-container.so.1</span><br><span class="line">/usr/lib64/libnvidia-container.so.1.15.0</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/COPYING</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/COPYING.LESSER</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/LICENSE</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/NOTICE</span><br><span class="line">$ rpm -ql libnvidia-container-tools</span><br><span class="line">/usr/bin/nvidia-container-cli</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/COPYING</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/COPYING.LESSER</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/LICENSE</span><br><span class="line">/usr/share/licenses/libnvidia-container-1.15.0/NOTICE</span><br><span class="line">$ rpm -ql nvidia-container-toolkit-base</span><br><span class="line">/usr/bin/nvidia-container-runtime</span><br><span class="line">/usr/bin/nvidia-ctk</span><br><span class="line">/usr/share/licenses/nvidia-container-toolkit-base-1.15.0~rc.4</span><br><span class="line">/usr/share/licenses/nvidia-container-toolkit-base-1.15.0~rc.4/LICENSE</span><br><span class="line">$ rpm -ql nvidia-container-toolkit</span><br><span class="line">/usr/bin/nvidia-container-runtime-hook</span><br><span class="line">/usr/share/licenses/nvidia-container-toolkit-1.15.0~rc.4</span><br><span class="line">/usr/share/licenses/nvidia-container-toolkit-1.15.0~rc.4/LICENSE</span><br></pre></td></tr></table></figure></details><p>离线的源和 deb 包下载都在下面链接上<br><a href="https://github.com/NVIDIA/libnvidia-container/tree/gh-pages">https://github.com/NVIDIA/libnvidia-container/tree/gh-pages</a></p><h3 id="配置-runtime"><a href="#配置-runtime" class="headerlink" title="配置 runtime"></a>配置 runtime</h3><p>增加 runtime 并设置为默认的 runtime</p><h4 id="使用-nvidia-ctk-配置"><a href="#使用-nvidia-ctk-配置" class="headerlink" title="使用 nvidia-ctk 配置"></a>使用 nvidia-ctk 配置</h4><p>官方推荐命令配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker</span></span><br><span class="line">nvidia-ctk runtime configure --runtime=docker --config=/etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">containerd</span></span><br><span class="line">nvidia-ctk runtime configure --runtime=containerd</span><br></pre></td></tr></table></figure><h4 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h4><p>主要是追加 runtime 和配置成默认的 runtime</p><p>docker <code>vi /etc/docker/daemon.json</code> 文件追加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;default-runtime&quot;: &quot;nvidia&quot;,</span><br><span class="line">&quot;runtimes&quot;: &#123;</span><br><span class="line">  &quot;nvidia&quot;: &#123;</span><br><span class="line">    &quot;path&quot;: &quot;/usr/bin/nvidia-container-runtime&quot;,</span><br><span class="line">    &quot;runtimeArgs&quot;: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>containerd <code>vim /etc/containerd/config.toml</code> 在与 <code>plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes</code> 中添加：:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.nvidia]</span></span><br><span class="line">  <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">runtime_type</span> = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.nvidia.options]</span></span><br><span class="line">    <span class="attr">BinaryName</span> = <span class="string">&quot;/usr/bin/nvidia-container-runtime&quot;</span></span><br><span class="line">    <span class="attr">CriuImagePath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">CriuPath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">CriuWorkPath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">IoGid</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">IoUid</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">NoNewKeyring</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">NoPivotRoot</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">Root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">ShimCgroup</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将默认的 runtime 设置为 nvidia</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">  <span class="attr">default_runtime_name</span> = <span class="string">&quot;nvidia&quot;</span></span><br></pre></td></tr></table></figure><p>需要重启 docker 或者 containerd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --gpus all nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi</span><br><span class="line">nerdctl run --rm --gpus all nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi</span><br></pre></td></tr></table></figure><p>镜像 tag 信息格式为 <code>cuda 版本-base/runtime/devel-os</code>，cuda 驱动版本可以 <code>nvidia-smi</code> 查看右上角</p><ul><li>base: 包含 CUDA runtime (cudart)</li><li>runtime: FROM base 添加 <a href="https://developer.nvidia.com/gpu-accelerated-libraries">CUDA math libraries</a> 、 <a href="https://developer.nvidia.com/nccl">NCC</a> 和 <a href="https://developer.nvidia.com/cudnn">cuDNN</a></li><li>devel: FROM runtime 添加 headers development tools</li></ul><p>镜像更多信息都查看 <a href="https://hub.docker.com/r/nvidia/cuda">nvidia&#x2F;cuda</a></p><p>一些信息，当 runtime 为 nvidia 时候，有变量和没变量，在 glibc 的容器内，会新增下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm ubuntu sh -c &#x27;ls -l /usr/bin/nvidia*&#x27;</span><br><span class="line">ls: cannot access &#x27;/usr/bin/nvidia*&#x27;: No such file or directory</span><br><span class="line">$ docker run --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all --rm ubuntu sh -c &#x27;ls -l /usr/bin/nvidia*&#x27;</span><br><span class="line">-rwxr-xr-x 1 root root  54208 Sep 29  2023 /usr/bin/nvidia-cuda-mps-control</span><br><span class="line">-rwxr-xr-x 1 root root  18664 Sep 29  2023 /usr/bin/nvidia-cuda-mps-server</span><br><span class="line">-rwxr-xr-x 1 root root 142064 Sep 29  2023 /usr/bin/nvidia-debugdump</span><br><span class="line">-rwxr-xr-x 1 root root 208352 Sep 29  2023 /usr/bin/nvidia-persistenced</span><br><span class="line">-rwxr-xr-x 1 root root 678160 Sep 29  2023 /usr/bin/nvidia-smi</span><br></pre></td></tr></table></figure><p>上面相关是代码实现的</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/NVIDIA/nvidia-container-toolkit/blob/cbc6ff73a48682604432ed04777894c4bf78005c/pkg/nvcdi/driver-nvml.go#L178</span></span><br><span class="line"><span class="comment">// NewDriverBinariesDiscoverer creates a discoverer for GSP firmware associated with the GPU driver.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDriverBinariesDiscoverer</span><span class="params">(logger logger.Interface, driverRoot <span class="type">string</span>)</span></span> discover.Discover &#123;</span><br><span class="line"><span class="keyword">return</span> discover.NewMounts(</span><br><span class="line">logger,</span><br><span class="line">lookup.NewExecutableLocator(logger, driverRoot),</span><br><span class="line">driverRoot,</span><br><span class="line">[]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;nvidia-smi&quot;</span>,              <span class="comment">/* System management interface */</span></span><br><span class="line"><span class="string">&quot;nvidia-debugdump&quot;</span>,        <span class="comment">/* GPU coredump utility */</span></span><br><span class="line"><span class="string">&quot;nvidia-persistenced&quot;</span>,     <span class="comment">/* Persistence mode utility */</span></span><br><span class="line"><span class="string">&quot;nvidia-cuda-mps-control&quot;</span>, <span class="comment">/* Multi process service CLI */</span></span><br><span class="line"><span class="string">&quot;nvidia-cuda-mps-server&quot;</span>,  <span class="comment">/* Multi process service server */</span></span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="docker-特殊"><a href="#docker-特殊" class="headerlink" title="docker 特殊"></a>docker 特殊</h2><p>docker 使用显卡，必须查看文档 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/docker-specialized.html">docker-specialized</a></p><h2 id="k8s-上使用"><a href="#k8s-上使用" class="headerlink" title="k8s 上使用"></a>k8s 上使用</h2><p>k8s 需要部署 <a href="https://github.com/NVIDIA/k8s-device-plugin">NVIDIA 的 device plugin</a> ，会 daemonset 起一个服务挂载宿主机 <code>/var/lib/kubelet/device-plugins/</code> 目录，然后在目录下生成 socket 文件，kubelet 和这个 socket 文件按照 device plugin 要求 grpc 调用，部署去看官方的 github 部署。</p><ul><li><a href="https://github.com/NVIDIA/k8s-device-plugin/blob/main/nvidia-device-plugin.yml">nvidia-device-plugin.yml</a></li><li><a href="https://kubernetes.io/zh-cn/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/">k8s device plugin文档</a></li></ul><p>部署后，可以 describe node 查看到信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Capacity:</span><br><span class="line">  ...</span><br><span class="line">  nvidia.com/gpu:     8</span><br><span class="line">  ...</span><br><span class="line">Allocatable:</span><br><span class="line">  ...</span><br><span class="line">  nvidia.com/gpu:     8</span><br><span class="line">  ...</span><br><span class="line">...</span><br><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests    Limits</span><br><span class="line">  --------           --------    ------</span><br><span class="line">  nvidia.com/gpu     0           0</span><br></pre></td></tr></table></figure><p>可以 <code>kubectl describe node xxx -v=8</code> 查看请求的啥接口，然后用 go-client 获取节点的 cpu 分配情况，如果不是 k8s ，可以参考 <a href="https://github.com/NVIDIA/k8s-device-plugin/blob/main/go.mod">NVIDIA&#x2F;k8s-device-plugin</a> 里找下 go 的库来看节点 gpu 分配情况。<br>参照 <a href="https://catalog.ngc.nvidia.com/orgs/nvidia/teams/k8s/containers/cuda-sample">cuda-sample</a> 部署测试：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gpu-demo-vectoradd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vectoradd</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        /tmp/vectorAdd</span></span><br><span class="line"><span class="string">        nvidia-smi -L</span></span><br><span class="line"><span class="string"></span>    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -o wide | grep gpu</span><br><span class="line">gpu-demo-vectoradd                                                0/1     Completed   0              117s    1xx.xx.1.192   xx.7.xx.201   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">$ kubectl logs gpu-demo-vectoradd </span><br><span class="line">[Vector addition of 50000 elements]</span><br><span class="line">Copy input data from the host memory to the CUDA device</span><br><span class="line">CUDA kernel launch with 196 blocks of 256 threads</span><br><span class="line">Copy output data from the CUDA device to the host memory</span><br><span class="line">Test PASSED</span><br><span class="line">Done</span><br><span class="line">GPU 0: NVIDIA GeForce RTX 4090 (UUID: GPU-xxx-e0bf-xxx-60d4-xxxxxxx)</span><br></pre></td></tr></table></figure><h2 id="docker-和-cri-dockerd-的一些问题"><a href="#docker-和-cri-dockerd-的一些问题" class="headerlink" title="docker 和 cri-dockerd 的一些问题"></a>docker 和 cri-dockerd 的一些问题</h2><p>查看文档 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/docker-specialized.html">docker-specialized</a> 实验发现一个问题，不带 <code>--gpus all</code> 或者 <code>-e NVIDIA_VISIBLE_DEVICES=all</code> 默认就能看到所有卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --gpus all nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi -L</span><br><span class="line">$ docker run --rm nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi -L</span><br><span class="line">$ docker run --rm --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi -L</span><br></pre></td></tr></table></figure><p>这是因为 nvidia 成为默认的 runtime 了，然后 cuda docker 镜像都带了 <code>ENV NVIDIA_VISIBLE_DEVICES=all</code> 的环境变量，就是说上面三个是一样的。<br>如果确定你们 k8s 集群不会存在 docker run 的容器使用显卡，那就不用管，但是我们存在非 k8s 集群纯 docker 的环境，目前好像没找到好的解决办法，只能不配置 <code>&quot;default-runtime&quot;: &quot;nvidia&quot;,</code> 必须显式调用，就像下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --runtime nvidia --gpus all nvidia/cuda:12.4.0-base-ubuntu22.04 nvidia-smi</span><br></pre></td></tr></table></figure><p>docker-compose v2 golang版本的话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: xxx</span><br><span class="line">    runtime: nvidia</span><br></pre></td></tr></table></figure><p>k8s 指定 runtime 必须先创建一个 <code>RuntimeClass</code> 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: node.k8s.io/v1</span><br><span class="line">kind: RuntimeClass</span><br><span class="line">metadata:</span><br><span class="line">  name: nvidia</span><br><span class="line">handler: nvidia</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF | kubectl create -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: gpu-demo-vectoradd</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Never</span><br><span class="line">  runtimeClassName: nvidia # &lt;- 这里</span><br><span class="line">  containers:</span><br><span class="line">  - name: vectoradd</span><br><span class="line">    image: nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span><br><span class="line">    command:</span><br><span class="line">    - bash</span><br><span class="line">    - -c</span><br><span class="line">    args:</span><br><span class="line">    - |</span><br><span class="line">        /tmp/vectorAdd</span><br><span class="line">        nvidia-smi -L</span><br><span class="line">    resources:</span><br><span class="line">      limits:</span><br><span class="line">        nvidia.com/gpu: 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>理想是美好的，但是在一个干净环境上按照步骤实际发现，<code>RuntimeClass.handler=nvidia</code> 在 cri-dockerd 环境下 pod 无法创建 sandbox，发现它改为 <code>docker</code> 才行，但是这样下 nvidia-device-plugin 指不指定 <code>runtimeClassName</code> 都找不到卡，日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">I0412 10:31:24.585290       1 main.go:256] Retreiving plugins.</span><br><span class="line">W0412 10:31:24.585562       1 factory.go:31] No valid resources detected, creating a null CDI handler</span><br><span class="line">I0412 10:31:24.585597       1 factory.go:107] Detected non-NVML platform: could not load NVML library: libnvidia-ml.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">I0412 10:31:24.585622       1 factory.go:107] Detected non-Tegra platform: /sys/devices/soc0/family file not found</span><br><span class="line">E0412 10:31:24.585629       1 factory.go:115] Incompatible platform detected</span><br><span class="line">E0412 10:31:24.585631       1 factory.go:116] If this is a GPU node, did you configure the NVIDIA Container Toolkit?</span><br><span class="line">E0412 10:31:24.585634       1 factory.go:117] You can check the prerequisites at: https://github.com/NVIDIA/k8s-device-plugin#prerequisites</span><br><span class="line">E0412 10:31:24.585637       1 factory.go:118] You can learn how to set the runtime at: https://github.com/NVIDIA/k8s-device-plugin#quick-start</span><br><span class="line">E0412 10:31:24.585640       1 factory.go:119] If this is not a GPU node, you should set up a toleration or nodeSelector to only deploy this plugin on GPU nodes</span><br><span class="line">I0412 10:31:24.585644       1 main.go:287] No devices found. Waiting indefinitely.</span><br></pre></td></tr></table></figure><p>正常日志是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I0408 10:40:23.126999       1 main.go:256] Retreiving plugins.</span><br><span class="line">I0408 10:40:23.128195       1 factory.go:107] Detected NVML platform: found NVML library</span><br><span class="line">I0408 10:40:23.128311       1 factory.go:107] Detected non-Tegra platform: /sys/devices/soc0/family file not found</span><br><span class="line">I0408 10:40:23.197946       1 server.go:165] Starting GRPC server for &#x27;nvidia.com/gpu&#x27;</span><br><span class="line">I0408 10:40:23.199739       1 server.go:117] Starting to serve &#x27;nvidia.com/gpu&#x27; on /var/lib/kubelet/device-plugins/nvidia-gpu.sock</span><br><span class="line">I0408 10:40:23.212600       1 server.go:125] Registered device plugin for &#x27;nvidia.com/gpu&#x27; with Kubelet</span><br></pre></td></tr></table></figure><p>最后排查出发现容器的 Runtime 不对：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect be4d | grep -i runtime</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br></pre></td></tr></table></figure><p>试了下 <code>docker run --runtime nvidia</code> 是能工作的， kubelet 肯定会把 handler 传递到 CRI runtime 的，也就是 cri-dockerd 上，唯一可能性是 cri-dockerd 没配置 Runtime 传递到 docker 的 create 阶段，最后调试了下发现果然是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&gt; github.com/Mirantis/cri-dockerd/core.(*dockerService).CreateContainer() ./core/container_create.go:137 (hits goroutine(36839):1 total:1) (PC: 0x229e164)</span><br><span class="line">   132:         cleanupInfo, err := ds.applyPlatformSpecificDockerConfig(r, &amp;createConfig)</span><br><span class="line">   133:         if err != nil &#123;</span><br><span class="line">   134:                 return nil, err</span><br><span class="line">   135:         &#125;</span><br><span class="line">   136:</span><br><span class="line">=&gt; 137:         createResp, createErr := ds.client.CreateContainer(createConfig)</span><br><span class="line">   138:         if createErr != nil &#123;</span><br><span class="line">   139:                 createResp, createErr = recoverFromCreationConflictIfNeeded(</span><br><span class="line">   140:                         ds.client,</span><br><span class="line">   141:                         createConfig,</span><br><span class="line">   142:                         createErr,</span><br><span class="line">(dlv) p createConfig</span><br><span class="line">github.com/docker/docker/api/types.ContainerCreateConfig &#123;</span><br><span class="line">        Name: &quot;k8s_nvidia-device-plugin-ctr_nvidia-device-plugin-daemonset-5tm6...+52 more&quot;,</span><br><span class="line">        Config: *github.com/docker/docker/api/types/container.Config &#123;</span><br><span class="line">                ...</span><br><span class="line">        HostConfig: *github.com/docker/docker/api/types/container.HostConfig &#123;</span><br><span class="line">                Binds: []string len: 4, cap: 4, [</span><br><span class="line">                        &quot;/var/lib/kubelet/device-plugins:/var/lib/kubelet/device-plugins&quot;,</span><br><span class="line">                        &quot;/data/kube/kubelet/pods/59f9fe0c-4397-4a83-a149-97ed696d4551/vol...+99 more&quot;,</span><br><span class="line">                        &quot;/data/kube/kubelet/pods/59f9fe0c-4397-4a83-a149-97ed696d4551/etc...+17 more&quot;,</span><br><span class="line">                        &quot;/data/kube/kubelet/pods/59f9fe0c-4397-4a83-a149-97ed696d4551/con...+62 more&quot;,</span><br><span class="line">                ],</span><br><span class="line">                ContainerIDFile: &quot;&quot;,</span><br><span class="line">                LogConfig: (*&quot;github.com/docker/docker/api/types/container.LogConfig&quot;)(0xc001505228),</span><br><span class="line">                NetworkMode: &quot;container:8d3c044a8c0339faed520efebe9dc199937de3515eb9a3baf723ed...+10 more&quot;,</span><br><span class="line">                PortBindings: github.com/docker/go-connections/nat.PortMap nil,</span><br><span class="line">                RestartPolicy: (*&quot;github.com/docker/docker/api/types/container.RestartPolicy&quot;)(0xc001505258),</span><br><span class="line">                AutoRemove: false,</span><br><span class="line">                VolumeDriver: &quot;&quot;,</span><br><span class="line">                VolumesFrom: []string len: 0, cap: 0, nil,</span><br><span class="line">                ConsoleSize: [2]uint [0,0],</span><br><span class="line">                Annotations: map[string]string nil,</span><br><span class="line">                CapAdd: github.com/docker/docker/api/types/strslice.StrSlice len: 0, cap: 0, nil,</span><br><span class="line">                CapDrop: github.com/docker/docker/api/types/strslice.StrSlice len: 1, cap: 1, [&quot;ALL&quot;],</span><br><span class="line">                CgroupnsMode: &quot;&quot;,</span><br><span class="line">                DNS: []string len: 0, cap: 0, nil,</span><br><span class="line">                DNSOptions: []string len: 0, cap: 0, nil,</span><br><span class="line">                DNSSearch: []string len: 0, cap: 0, nil,</span><br><span class="line">                ExtraHosts: []string len: 0, cap: 0, nil,</span><br><span class="line">                GroupAdd: []string len: 0, cap: 0, nil,</span><br><span class="line">                IpcMode: &quot;container:8d3c044a8c0339faed520efebe9dc199937de3515eb9a3baf723ed...+10 more&quot;,</span><br><span class="line">                Cgroup: &quot;&quot;,</span><br><span class="line">                Links: []string len: 0, cap: 0, nil,</span><br><span class="line">                OomScoreAdj: -997,</span><br><span class="line">                PidMode: &quot;&quot;,</span><br><span class="line">                Privileged: false,</span><br><span class="line">                PublishAllPorts: false,</span><br><span class="line">                ReadonlyRootfs: false,</span><br><span class="line">                SecurityOpt: []string len: 2, cap: 2, [</span><br><span class="line">                        &quot;no-new-privileges&quot;,</span><br><span class="line">                        &quot;seccomp=unconfined&quot;,</span><br><span class="line">                ],</span><br><span class="line">                StorageOpt: map[string]string nil,</span><br><span class="line">                Tmpfs: map[string]string nil,</span><br><span class="line">                UTSMode: &quot;&quot;,</span><br><span class="line">                UsernsMode: &quot;&quot;,</span><br><span class="line">                ShmSize: 0,</span><br><span class="line">                Sysctls: map[string]string nil,</span><br><span class="line">                Runtime: &quot;&quot;,</span><br><span class="line">                Isolation: &quot;&quot;,</span><br><span class="line">                Resources: (*&quot;github.com/docker/docker/api/types/container.Resources&quot;)(0xc001505440),</span><br><span class="line">                Mounts: []github.com/docker/docker/api/types/mount.Mount len: 0, cap: 0, nil,</span><br><span class="line">                MaskedPaths: []string len: 10, cap: 16, [</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到上面 <code>Runtime</code> 是空的，上层的调用链里，只允许 <code>RuntimeHandler</code>不为空情况下设置为 docker：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/Mirantis/cri-dockerd/blob/v0.3.12/core/sandbox_run.go#L54-L56</span></span><br><span class="line"><span class="keyword">if</span> r.GetRuntimeHandler() != <span class="string">&quot;&quot;</span> &amp;&amp; r.GetRuntimeHandler() != runtimeName &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;RuntimeHandler %q not supported&quot;</span>, r.GetRuntimeHandler())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的调用链里也没去使用 <code>r.GetRuntimeHandler()</code> 或者设置 <code>x.HostConfig.Runtime</code> ，意味着不配置 <code>RuntimeClass.handler</code> 或者设置为 <code>docker</code> 都是使用 docker 默认的 runtime。</p><p>然后我修改代码编译后才发现可以使用 <code>RuntimeClass.handler=nvidia</code> 了，并且 pod 的容器的 runtime 也正常了，向 cri-dockerd 提了 pr <a href="https://github.com/Mirantis/cri-dockerd/pull/350">support RuntimeClass.handler</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Project-HAMi/HAMi/blob/master/README_cn.md">https://github.com/Project-HAMi/HAMi/blob/master/README_cn.md</a></li><li><a href="https://tianzhipeng-git.github.io/2023/11/21/cuda-version.html">https://tianzhipeng-git.github.io/2023/11/21/cuda-version.html</a></li><li><a href="https://juejin.cn/post/7202877900240339000">https://juejin.cn/post/7202877900240339000</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录下 docker k8s 使用 gpu 的笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="gpu" scheme="http://zhangguanzhang.github.io/tags/gpu/"/>
    
    <category term="nvidia" scheme="http://zhangguanzhang.github.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>高版本client-go在serviceAccountToken下invalid bearer token?</title>
    <link href="http://zhangguanzhang.github.io/2024/02/06/serviceAccountToken-valid/"/>
    <id>http://zhangguanzhang.github.io/2024/02/06/serviceAccountToken-valid/</id>
    <published>2024-02-06T15:05:30.000Z</published>
    <updated>2024-02-06T15:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.27.4 k8s 下，coredns flannel 均报错401，kube-apiserver 刷 <code>&quot;Unable to authenticate the request&quot; err=&quot;[invalid bearer token, service account token is not valid yet]</code></p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>今天同事说他的 pod 无法操作 k8s 集群资源了，查看了下，发现 flannel coredns 均报错 401</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] plugin/kubernetes: pkg/mod/k8s.io/client-go@v0.26.1/tools/cache/reflector.go:169: Failed to watch *v1.Service: failed to list *v1.Service: Unauthorized</span><br></pre></td></tr></table></figure><p>kube-apiserver 刷日志:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication.go:70] &quot;Unable to authenticate the request&quot; err=&quot;[invalid bearer token, service account token is not valid yet]&quot;</span><br></pre></td></tr></table></figure><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>搜了下，为了提升安全性，Kubernetes 社区在 1.21 版本默认启动了 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.21.md#api-change-6">BoundServiceAccountTokenVolume</a> 功能。该功能设定了 ServiceAccount Token 的过期时间、自动刷新机制和删除 Pod 后的 Token 失效机制。client-go 客户端版本大于等于 v11.0.0 和 v0.15.0 时，kubelet 组件会定时刷新 Token，定时从挂载盘重新加载Token，实现Token更新。为了保持向前兼容，过期后，您可以继续使用该Token一年。但一年后，如果 client-go 版本小于 v11.0.0 或者 v0.15.0 ，系统不会自动重新加载并更新Token，导致Token过期风险。</p><p>但是我们 k8s 集群是 1.27 了，并且 coredns flannel 的 client-go 版本都很新，而且其他集群环境都没出现。</p><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>同事说他重启了一个 coredns 的 pod 后，这个 coredns pod 就没刷 401 了，大概看了下 ServiceAccountToken 的文档，就是 kubelet 给 pod 挂载的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">token-vol</span></span><br><span class="line">    <span class="attr">projected:</span></span><br><span class="line">      <span class="attr">sources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">serviceAccountToken:</span></span><br><span class="line">          <span class="attr">audience:</span> <span class="string">api</span></span><br><span class="line">          <span class="attr">expirationSeconds:</span> <span class="number">3600</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">token</span></span><br></pre></td></tr></table></figure><p>查看下 kubelet 日志，发现一直刷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606940341356 - 1711900953406532664)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606941261574 - 1711900953467321378)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606942318471 - 1711900953423406042)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606943293769 - 1711900953450007891)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606944280584 - 1711900953461851576)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606945180585 - 1711900953427074341)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606946762456 - 1711900953414233495)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606947733070 - 1711900953456650293)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606948747910 - 1711900953430313306)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606949808485 - 1711900953436742140)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606951948415 - 1711900953479775885)&quot;</span><br><span class="line">cri_stats_provider.go:757] &quot;Failed updating cpu usage nano core&quot; err=&quot;zero or negative interval (1707196606952993367 - 1711900953458452657)&quot;</span><br></pre></td></tr></table></figure><p>在 k8s 源码搜了下 <code>zero or negative interval</code> 找到是下面这个函数触发的：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/kubernetes/kubernetes/blob/v1.27.4/pkg/kubelet/stats/cri_stats_provider.go#L715-L760</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *criStatsProvider)</span></span> getAndUpdateContainerUsageNanoCores(stats *runtimeapi.ContainerStats) *<span class="type">uint64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> stats == <span class="literal">nil</span> || stats.Attributes == <span class="literal">nil</span> || stats.Cpu == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bypass the cache if the CRI implementation specified the UsageNanoCores.</span></span><br><span class="line"><span class="keyword">if</span> stats.Cpu.UsageNanoCores != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;stats.Cpu.UsageNanoCores.Value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If there is no UsageNanoCores, nor UsageCoreNanoSeconds, there is no information to use</span></span><br><span class="line"><span class="keyword">if</span> stats.Cpu.UsageCoreNanoSeconds == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">id := stats.Attributes.Id</span><br><span class="line">usage, err := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> (*<span class="type">uint64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">p.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> p.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">cached, ok := p.cpuUsageCache[id]</span><br><span class="line"><span class="keyword">if</span> !ok || cached.stats.UsageCoreNanoSeconds == <span class="literal">nil</span> || stats.Cpu.UsageCoreNanoSeconds.Value &lt; cached.stats.UsageCoreNanoSeconds.Value &#123;</span><br><span class="line"><span class="comment">// Cannot compute the usage now, but update the cached stats anyway</span></span><br><span class="line">p.cpuUsageCache[id] = &amp;cpuUsageRecord&#123;stats: stats.Cpu, usageNanoCores: <span class="literal">nil</span>&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newStats := stats.Cpu</span><br><span class="line">cachedStats := cached.stats</span><br><span class="line">nanoSeconds := newStats.Timestamp - cachedStats.Timestamp</span><br><span class="line"><span class="keyword">if</span> nanoSeconds &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;zero or negative interval (%v - %v)&quot;</span>, newStats.Timestamp, cachedStats.Timestamp)</span><br><span class="line">&#125;</span><br><span class="line">usageNanoCores := <span class="type">uint64</span>(<span class="type">float64</span>(newStats.UsageCoreNanoSeconds.Value-cachedStats.UsageCoreNanoSeconds.Value) /</span><br><span class="line"><span class="type">float64</span>(nanoSeconds) * <span class="type">float64</span>(time.Second/time.Nanosecond))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update cache with new value.</span></span><br><span class="line">usageToUpdate := usageNanoCores</span><br><span class="line">p.cpuUsageCache[id] = &amp;cpuUsageRecord&#123;stats: newStats, usageNanoCores: &amp;usageToUpdate&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;usageNanoCores, <span class="literal">nil</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// This should not happen. Log now to raise visibility</span></span><br><span class="line">klog.ErrorS(err, <span class="string">&quot;Failed updating cpu usage nano core&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> usage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致逻辑就是调用 cri 的 grpc <code>ContainerStats</code> 接口，获取容器返回的 <code>cpu.Timestamp</code> ，如果 <code>cpuUsageCache[id]</code> 第一次为空，就此次获取存储了，下次请求后，对比上次存储的，下次减去上次得到 <code>nanoSeconds</code> ，错误就是走到了 <code>nanoSeconds &lt;= 0</code> 的里面了。</p><p>我们是使用的 <code>cri-dockerd + docker</code> 的，写个 grpc 调用 <code>ContainerStats</code> 试试：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">runtimeapi <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建 gRPC 连接</span></span><br><span class="line">conn, err := grpc.Dial(<span class="string">&quot;unix:///var/run/cri-dockerd.sock&quot;</span>, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Failed to connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 CRI 客户端</span></span><br><span class="line">criClient := runtimeapi.NewRuntimeServiceClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 ContainerStats 方法</span></span><br><span class="line">req := &amp;runtimeapi.ContainerStatsRequest&#123;</span><br><span class="line">ContainerId: os.Args[<span class="number">1</span>],</span><br><span class="line"><span class="comment">//Verbose:     true,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := criClient.ContainerStats(context.Background(), req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Failed to call ContainerStats: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonData, err := json.MarshalIndent(resp, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Failed to marshal container stats: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(jsonData))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后拷贝到故障机器上选个 coredns container id 执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./stats-test f01c</span><br><span class="line">&#123;</span><br><span class="line">  &quot;stats&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">    &quot;cpu&quot;: &#123;</span><br><span class="line">      &quot;timestamp&quot;: 1707204235253509570,</span><br><span class="line">      &quot;usage_core_nano_seconds&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: 2117105450225</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>cpu.Timestamp</code> 获取是正常的，那就是之前获取到的值比每次 <code>cpu.Timestamp</code> 的值大，试试把日志后面的 <code>1711900953458452657</code> 转换下时间是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mon Apr 01 2024 00:02:33 GMT+0800</span><br></pre></td></tr></table></figure><p>居然是 4 月，看下系统日志发现时间错乱过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apr  1 00:02:21 redhat79 etcd: &#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2024-04-01T00:02:21.54608+0800&quot;,&quot;caller&quot;:&quot;rafthttp/probing_status.go:82&quot;,&quot;msg&quot;:&quot;prober found high clock drift&quot;,&quot;round-tripper-name&quot;:&quot;ROUND_TRIPPER_RAFT_MESSAGE&quot;,&quot;remote-peer-id&quot;:&quot;1354c3808ef4eeb9&quot;,&quot;clock-drift&quot;:&quot;38.480218393s&quot;,&quot;rtt&quot;:&quot;6.133426ms&quot;&#125;</span><br><span class="line">Apr  1 00:02:25 redhat79 kubelet: I0401 00:02:25.365462    3553 kubelet_pods.go:894] &quot;Unable to retrieve pull secret, the image pull may not succeed.&quot; pod=&quot;default123/xxxx-browsersvc-100-55dc46dd54-2vlbf&quot; secret=&quot;&quot; err=&quot;secret \&quot;regcred\&quot; not found&quot;</span><br><span class="line">Apr  1 00:02:26 redhat79 kube-apiserver: E0401 00:02:26.604914    1390 controller.go:193] &quot;Failed to update lease&quot; err=&quot;Operation cannot be fulfilled on leases.coordination.k8s.io \&quot;apiserver-s7gqnvvc7gfrpthq3uyibizgba\&quot;: the object has been modified; please apply your changes to the latest version and try again&quot;</span><br><span class="line">Feb  4 23:44:00 redhat79 systemd: Time has been changed</span><br><span class="line">Feb  4 23:44:00 redhat79 chronyd[917]: Backward time jump detected!</span><br></pre></td></tr></table></figure><p>看了下 coredns 的 token 信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect f01 | grep :/var/run</span><br><span class="line">&quot;/data/kube/kubelet/pods/d8abc4c1-48f9-4a2f-9ce7-a649126bb43c/volumes/kubernetes.io~projected/kube-api-access-mzqjx:/var/run/secrets/kubernetes.io/serviceaccount:ro&quot;,</span><br><span class="line">$ ls -l /data/kube/kubelet/pods/d8abc4c1-48f9-4a2f-9ce7-a649126bb43c/volumes/kubernetes.io~projected/kube-api-access-mzqjx</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 13 Feb  1 18:16 ca.crt -&gt; ..data/ca.crt</span><br><span class="line">lrwxrwxrwx 1 root root 16 Feb  1 18:16 namespace -&gt; ..data/namespace</span><br><span class="line">lrwxrwxrwx 1 root root 12 Feb  1 18:16 token -&gt; ..data/token</span><br><span class="line">$ readlink -f /data/kube/kubelet/pods/d8abc4c1-48f9-4a2f-9ce7-a649126bb43c/volumes/kubernetes.io~projected/kube-api-access-mzqjx/token</span><br><span class="line">/data/kube/kubelet/pods/d8abc4c1-48f9-4a2f-9ce7-a649126bb43c/volumes/kubernetes.io~projected/kube-api-access-mzqjx/..2024_03_31_15_57_54.3867697203/token</span><br><span class="line">$ awk -F &quot;.&quot; &#x27;&#123;print $2&#125;&#x27;  /data/kube/kubelet/pods/d8abc4c1-48f9-4a2f-9ce7-a649126bb43c/volumes/kubernetes.io~projected/kube-api-access-mzqjx/token | base64 -d </span><br><span class="line">&#123;&quot;aud&quot;:[&quot;https://kubernetes.default.svc&quot;],&quot;exp&quot;:1743436695,&quot;iat&quot;:1711900695,&quot;iss&quot;:&quot;https://kubernetes.default.svc&quot;,&quot;kubernetes.io&quot;:&#123;&quot;namespace&quot;:&quot;kube-system&quot;,&quot;pod&quot;:&#123;&quot;name&quot;:&quot;coredns-f7bf7f79b-2brfr&quot;,&quot;uid&quot;:&quot;d8abc4c1-48f9-4a2f-9ce7-a649126bb43c&quot;&#125;,&quot;serviceaccount&quot;:&#123;&quot;name&quot;:&quot;coredns&quot;,&quot;uid&quot;:&quot;b6255167-f016-48be-a118-9e6a9dcf3d7a&quot;&#125;,&quot;warnafter&quot;:1711904302&#125;,&quot;nbf&quot;:1711900695,&quot;sub&quot;:&quot;system:serviceaccount:kube-system:coredns&quot;&#125;base64: invalid input</span><br></pre></td></tr></table></figure><p>token 文件第二段是 jwt 信息，信息为：</p><ul><li>iss（issuer）：令牌的签发者</li><li>sub（subject）：令牌所代表的主题（通常是 ServiceAccount 的名称）</li><li>aud（audience）：令牌的预期接收者</li><li>exp（expiration time）：令牌的过期时间</li><li>nbf（not before）：令牌的生效时间</li><li>iat（issued at）：令牌的签发时间</li></ul><p>nbf <code>1711900695</code> 转换为时间戳是 <code>Sun Mar 31 2024 23:58:15 GMT+0800</code> 在未来，所以 coredns 报错 401，解决办法就是两个：</p><ul><li>重启受影响的 pod&#x2F;容器</li><li>重启 kubelet</li></ul><p>如果没有使用 csi，也就是 kubelet 没调用 mount ，可以重启 kubelet，有的情况下还是 restart ctr 稳妥</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.27.4 k8s 下，coredns flannel 均报错401，kube-apiserver 刷 &lt;code&gt;&amp;quot;Unable to authenticate the request&amp;quot; err=&amp;quot;[invalid bearer token, service account token is not valid yet]&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="kubernetes" scheme="http://zhangguanzhang.github.io/tags/kubernetes/"/>
    
    <category term="serviceAccountToken" scheme="http://zhangguanzhang.github.io/tags/serviceAccountToken/"/>
    
  </entry>
  
  <entry>
    <title>docker v2 registry 本地仓库如何只删除指定 tag 而非 manifest 下的所有 tag</title>
    <link href="http://zhangguanzhang.github.io/2024/01/26/docker-registry-tag-delete/"/>
    <id>http://zhangguanzhang.github.io/2024/01/26/docker-registry-tag-delete/</id>
    <published>2024-01-26T18:05:30.000Z</published>
    <updated>2024-01-26T18:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 docker registry 本地仓库时候，一个镜像推送多个 tag 后，删除其中一个 tag 会造成所有 tag 都被删除，如何避免</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>这几天整了个 TUI 应用，删除仓库上选中的 tag 镜像，查看 github 上代码的时候，折腾出来一个镜像具有多个 tag 下只删除指定 tag 的步骤。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="registry"><a href="#registry" class="headerlink" title="registry"></a>registry</h3><p>先起一个 registry，偷懒命令行启动个不带授权的仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -d \</span><br><span class="line">--net host \</span><br><span class="line">-e REGISTRY_HTTP_ADDR=<span class="string">&quot;127.0.0.1:5000&quot;</span> \</span><br><span class="line">-e REGISTRY_STORAGE_DELETE_ENABLED=<span class="literal">true</span> \</span><br><span class="line">-v <span class="variable">$PWD</span>/registry-data:/var/lib/registry  \</span><br><span class="line">--name registry registry:2.8</span><br><span class="line"></span><br><span class="line">docker tag alpine 127.0.0.1:5000/zhangguanzhang/alpine</span><br><span class="line">docker tag alpine 127.0.0.1:5000/zhangguanzhang/alpine:test1</span><br><span class="line">docker push 127.0.0.1:5000/zhangguanzhang/alpine</span><br><span class="line">docker push 127.0.0.1:5000/zhangguanzhang/alpine:test1</span><br></pre></td></tr></table></figure><h3 id="正常删除"><a href="#正常删除" class="headerlink" title="正常删除"></a>正常删除</h3><p>如果有授权，下面的 curl 命令带 <code>-u user:pass</code> 就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 可以测试授权正常否</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/</span><br><span class="line"># 获取 repo 列表</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/_catalog?n=1000</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;zhangguanzhang/alpine&quot;]&#125;</span><br><span class="line"># 获取 tagList</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/zhangguanzhang/alpine/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangguanzhang/alpine&quot;,&quot;tags&quot;:[&quot;latest&quot;,&quot;test1&quot;]&#125;</span><br><span class="line"># 加 header 获取 tag 的 manifest，也就是 digest `Docker-Content-Digest`:</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/zhangguanzhang/alpine/manifests/test1 \</span><br><span class="line">  -H &#x27;Accept: application/vnd.docker.distribution.manifest.v2+json&#x27; -v</span><br><span class="line">...</span><br><span class="line">Docker-Content-Digest: sha256:13b7e62e8df80264dbb747995705a986aa530415763a6c58f84a3ca8af9a5bcd</span><br></pre></td></tr></table></figure><p>然后使用这个 digest 删除 manifest：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; -X DELETE 127.0.0.1:5000/v2/zhangguanzhang/alpine/manifests/sha256:13b7e62e8df80264dbb747995705a986aa530415763a6c58f84a3ca8af9a5bcd</span><br><span class="line"># 查询为 null</span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/zhangguanzhang/alpine/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangguanzhang/alpine&quot;,&quot;tags&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>截至 2024&#x2F;01&#x2F;26 ，gitlab 的 <a href="https://gitlab.com/gitlab-org/container-registry">container-registry</a> 有 API <code>DELETE /v2/&lt;name&gt;/tags/reference/&lt;reference&gt;</code> 支持删除指定 tag 而非 manifest ，而 registry 官方也跟进了，但是 v3 还没正式发版。</p><h3 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>今天查看 issue <a href="https://github.com/distribution/distribution/issues/1755">private registry delete manifest results in broken state</a> 发现有 Contributor 说他写的库 <a href="https://github.com/regclient/regclient">regclient</a> 可以实现这种需求，然后看了下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/regclient/regclient/blob/v0.5.6/tag.go#L13-L18</span><br><span class="line">// TagDelete deletes a tag from the registry. Since there&#x27;s no API for this,</span><br><span class="line">// you&#x27;d want to normally just delete the manifest. However multiple tags may</span><br><span class="line">// point to the same manifest, so instead you must:</span><br><span class="line">// 1. Make a manifest, for this we put a few labels and timestamps to be unique.</span><br><span class="line">// 2. Push that manifest to the tag.</span><br><span class="line">// 3. Delete the digest for that new manifest that is only used by that tag.</span><br><span class="line"></span><br><span class="line"># https://github.com/regclient/regclient/blob/v0.5.6/scheme/reg/tag.go#L168-L192</span><br></pre></td></tr></table></figure><p>大概就是上面两个代码的地方，就是三个步骤：</p><ol><li>创建一个 manifest ，带一些不同的属性防止和远端仓库上一致</li><li>推送到这个 manifest 到要删除的 tag 上</li><li>删除这个 manifest</li></ol><p>代码里是先创建空的 layer，再推送空的 config 再推送 manifest ，registry 日志请求过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">time=&quot;2024-01-26T17:39:13.006086513+08:00&quot; level=info msg=&quot;authorized request&quot; go.version=go1.11.2 http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=18ca175a-862e-408d-8932-4b7fb90315f5 http.request.method=POST http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; vars.name=&quot;zhangguanzhang/alpine&quot; </span><br><span class="line">time=&quot;2024-01-26T17:39:13.044043468+08:00&quot; level=info msg=&quot;response completed&quot; go.version=go1.11.2 http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=18ca175a-862e-408d-8932-4b7fb90315f5 http.request.method=POST http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; http.response.duration=42.746469ms http.response.status=202 http.response.written=0 </span><br><span class="line">127.0.0.1 - - [26/Jan/2024:17:39:13 +0800] &quot;POST /v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a HTTP/1.1&quot; 202 0 &quot;&quot; &quot;regclient/regctl ((devel))&quot;</span><br><span class="line">time=&quot;2024-01-26T17:39:13.062288812+08:00&quot; level=info msg=&quot;authorized request&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/octet-stream&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=20927091-fd3c-4582-8d8c-8b540269d758 http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/9a5c21df-7d5f-47e0-afa9-eac0574ea8bd?_state=82vrGJDDwpp23C4CotVd3ZVHW9eduCbMPl9fcrI8cMZ7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiI5YTVjMjFkZi03ZDVmLTQ3ZTAtYWZhOS1lYWMwNTc0ZWE4YmQiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MTMuMDA2MjQ0MzNaIn0%3D&amp;digest=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; vars.name=&quot;zhangguanzhang/alpine&quot; vars.uuid=9a5c21df-7d5f-47e0-afa9-eac0574ea8bd </span><br><span class="line">127.0.0.1 - - [26/Jan/2024:17:39:13 +0800] &quot;PUT /v2/zhangguanzhang/alpine/blobs/uploads/9a5c21df-7d5f-47e0-afa9-eac0574ea8bd?_state=82vrGJDDwpp23C4CotVd3ZVHW9eduCbMPl9fcrI8cMZ7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiI5YTVjMjFkZi03ZDVmLTQ3ZTAtYWZhOS1lYWMwNTc0ZWE4YmQiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MTMuMDA2MjQ0MzNaIn0%3D&amp;digest=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a HTTP/1.1&quot; 201 0 &quot;&quot; &quot;regclient/regctl ((devel))&quot;</span><br><span class="line">time=&quot;2024-01-26T17:39:13.1071948+08:00&quot; level=info msg=&quot;response completed&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/octet-stream&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=20927091-fd3c-4582-8d8c-8b540269d758 http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/9a5c21df-7d5f-47e0-afa9-eac0574ea8bd?_state=82vrGJDDwpp23C4CotVd3ZVHW9eduCbMPl9fcrI8cMZ7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiI5YTVjMjFkZi03ZDVmLTQ3ZTAtYWZhOS1lYWMwNTc0ZWE4YmQiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MTMuMDA2MjQ0MzNaIn0%3D&amp;digest=sha256%3A44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; http.response.duration=49.705047ms http.response.status=201 http.response.written=0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time=&quot;2024-01-26T17:39:37.715196631+08:00&quot; level=info msg=&quot;authorized request&quot; go.version=go1.11.2 http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=2241ece9-1d76-45f5-9808-63aa1029fc98 http.request.method=POST http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; vars.name=&quot;zhangguanzhang/alpine&quot; </span><br><span class="line">127.0.0.1 - - [26/Jan/2024:17:39:37 +0800] &quot;POST /v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a HTTP/1.1&quot; 202 0 &quot;&quot; &quot;regclient/regctl ((devel))&quot;</span><br><span class="line">time=&quot;2024-01-26T17:39:37.734255241+08:00&quot; level=info msg=&quot;response completed&quot; go.version=go1.11.2 http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=2241ece9-1d76-45f5-9808-63aa1029fc98 http.request.method=POST http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/?mount=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; http.response.duration=25.558253ms http.response.status=202 http.response.written=0 </span><br><span class="line">time=&quot;2024-01-26T17:39:37.762736172+08:00&quot; level=info msg=&quot;authorized request&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/octet-stream&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=85ae6c53-1e82-416b-a3e6-4bd470eb1b53 http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/3155a926-ba92-4611-8d74-04cbf82475d8?_state=hM1XV7Skiah6ud5-bNyuJwNzCjHkQfYx0SvFpx1iMDd7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiIzMTU1YTkyNi1iYTkyLTQ2MTEtOGQ3NC0wNGNiZjgyNDc1ZDgiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MzcuNzE1MzM1NjIzWiJ9&amp;digest=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; vars.name=&quot;zhangguanzhang/alpine&quot; vars.uuid=3155a926-ba92-4611-8d74-04cbf82475d8 </span><br><span class="line">time=&quot;2024-01-26T17:39:37.784189549+08:00&quot; level=info msg=&quot;response completed&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/octet-stream&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=85ae6c53-1e82-416b-a3e6-4bd470eb1b53 http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/blobs/uploads/3155a926-ba92-4611-8d74-04cbf82475d8?_state=hM1XV7Skiah6ud5-bNyuJwNzCjHkQfYx0SvFpx1iMDd7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiIzMTU1YTkyNi1iYTkyLTQ2MTEtOGQ3NC0wNGNiZjgyNDc1ZDgiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MzcuNzE1MzM1NjIzWiJ9&amp;digest=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; http.response.duration=26.556218ms http.response.status=201 http.response.written=0 </span><br><span class="line">127.0.0.1 - - [26/Jan/2024:17:39:37 +0800] &quot;PUT /v2/zhangguanzhang/alpine/blobs/uploads/3155a926-ba92-4611-8d74-04cbf82475d8?_state=hM1XV7Skiah6ud5-bNyuJwNzCjHkQfYx0SvFpx1iMDd7Ik5hbWUiOiJ3cHMvZmxhbm5lbCIsIlVVSUQiOiIzMTU1YTkyNi1iYTkyLTQ2MTEtOGQ3NC0wNGNiZjgyNDc1ZDgiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjQtMDEtMjZUMDk6Mzk6MzcuNzE1MzM1NjIzWiJ9&amp;digest=sha256%3A413332e3ed9dc45c8be309b50ea9983ea68e673b99a39f8458c4d6441802f50a HTTP/1.1&quot; 201 0 &quot;&quot; &quot;regclient/regctl ((devel))&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time=&quot;2024-01-26T17:39:42.630908535+08:00&quot; level=info msg=&quot;authorized request&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/vnd.docker.distribution.manifest.v2+json&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=5d7c3eda-1ec4-41c3-9f1e-604a350e183c http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/manifests/test1&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; vars.name=&quot;zhangguanzhang/alpine&quot; vars.reference=test1 </span><br><span class="line">127.0.0.1 - - [26/Jan/2024:17:39:42 +0800] &quot;PUT /v2/zhangguanzhang/alpine/manifests/test1 HTTP/1.1&quot; 201 0 &quot;&quot; &quot;regclient/regctl ((devel))&quot;</span><br><span class="line">time=&quot;2024-01-26T17:39:42.639925495+08:00&quot; level=info msg=&quot;response completed&quot; go.version=go1.11.2 http.request.contenttype=&quot;application/vnd.docker.distribution.manifest.v2+json&quot; http.request.host=&quot;127.0.0.1:5000&quot; http.request.id=5d7c3eda-1ec4-41c3-9f1e-604a350e183c http.request.method=PUT http.request.remoteaddr=&quot;127.0.0.1:60484&quot; http.request.uri=&quot;/v2/zhangguanzhang/alpine/manifests/test1&quot; http.request.useragent=&quot;regclient/regctl ((devel))&quot; http.response.duration=13.597646ms http.response.status=201 http.response.written=0 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后查阅 <a href="https://distribution.github.io/distribution/spec/manifest-v2-2/">官方 manifest 文档</a> ，manifest 格式为下面：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;schemaVersion&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.docker.container.image.v1+json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">7023</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">32654</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">16724</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;mediaType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;digest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">73109</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>docker 镜像上传，其实就是 layer，config + manifest，config 实际上也是通过 blob 接口上传，上传后会返回一个 digest ，我 registry 的客户端库是使用的 <a href="github.com/google/go-containerregistry">go-containerregistry</a> ，找了下覆盖的方法大致为下面：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/authn&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/v1/empty&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/v1/remote&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ....</span></span><br><span class="line">ref, err := name.NewTag(fmt.Sprintf(<span class="string">&quot;%s/%s&quot;</span>, r.RegistryStr(), nameStr))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line">remote.Write(ref, empty.Image, remote.WithAuthFromKeychain(authn.DefaultKeychain))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后抓包看了下上面请求的接口过程，发现它比 regclient 的步骤不一样：</p><ol><li>通过 blob 接口上传空的 config</li><li>创建一个空 layer 的 manifest ，manifest.config.digest 使用上面得到的</li></ol><h4 id="最终步骤"><a href="#最终步骤" class="headerlink" title="最终步骤"></a>最终步骤</h4><p>然后使用 curl 测试了下正常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push 127.0.0.1:5000/zhangguanzhang/alpine</span><br><span class="line">docker push 127.0.0.1:5000/zhangguanzhang/alpine:test1</span><br></pre></td></tr></table></figure><p>造好数据后发送请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">config_str=<span class="string">&#x27;&#123;&quot;architecture&quot;:&quot;&quot;,&quot;created&quot;:&quot;0001-01-01T00:00:00Z&quot;,&quot;os&quot;:&quot;&quot;,&quot;rootfs&quot;:&#123;&quot;type&quot;:&quot;layers&quot;,&quot;diff_ids&quot;:null&#125;,&quot;config&quot;:&#123;&#125;&#125;&#x27;</span></span><br><span class="line">config_sha256sum=$(<span class="built_in">echo</span> -n <span class="variable">$config_str</span> | <span class="built_in">sha256sum</span> | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上传链接 Location</span></span><br><span class="line">patch_url=$(curl -s  -u <span class="string">&#x27;xxx:xxxx&#x27;</span> -X POST 127.0.0.1:5000/v2/zhangguanzhang/alpine/blobs/uploads/ -v |&amp; grep -Po <span class="string">&#x27;ocation:\s+\Khttp\S+&#x27;</span>)</span><br><span class="line">put_url=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$config_str</span>&quot;</span> |curl -u <span class="string">&#x27;xxx:xxxx&#x27;</span> -X PATCH <span class="string">&quot;<span class="variable">$&#123;patch_url&#125;</span>&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/octet-stream&quot;</span> \</span><br><span class="line">-d @- -v |&amp; grep -Po <span class="string">&#x27;ocation:\s+\Khttp\S+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config_digest=$( curl -u <span class="string">&#x27;xxx:xxxx&#x27;</span> -X PUT <span class="string">&quot;<span class="variable">$&#123;put_url&#125;</span>&amp;digest=sha256:<span class="variable">$&#123;config_sha256sum&#125;</span>&quot;</span> -v |&amp; grep -Po <span class="string">&#x27;igest:\s+\Ksha256\S+&#x27;</span>  )</span><br><span class="line"></span><br><span class="line">curl -u <span class="string">&#x27;xxx:xxxx&#x27;</span> -X PUT 127.0.0.1:5000/v2/zhangguanzhang/alpine/manifests/test1 \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/vnd.docker.distribution.manifest.v2+json&#x27;</span> \</span><br><span class="line">-d @- &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">   &quot;schemaVersion&quot;:2,</span></span><br><span class="line"><span class="string">   &quot;mediaType&quot;:&quot;application/vnd.docker.distribution.manifest.v2+json&quot;,</span></span><br><span class="line"><span class="string">   &quot;config&quot;:&#123;</span></span><br><span class="line"><span class="string">      &quot;mediaType&quot;:&quot;application/vnd.docker.container.image.v1+json&quot;,</span></span><br><span class="line"><span class="string">      &quot;size&quot;:115,</span></span><br><span class="line"><span class="string">      &quot;digest&quot;:&quot;$&#123;config_digest&#125;&quot;</span></span><br><span class="line"><span class="string">   &#125;,</span></span><br><span class="line"><span class="string">   &quot;layers&quot;:[</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">   ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后删除该 tag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">manifest_digest=$(curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/zhangguanzhang/alpine/manifests/test1 \</span><br><span class="line">  -H &#x27;Accept: application/vnd.docker.distribution.manifest.v2+json&#x27; -v |&amp; \</span><br><span class="line">  grep -Po &#x27;igest:\s+\Ksha256\S+&#x27;)</span><br><span class="line"></span><br><span class="line">curl -u &#x27;xxx:xxxx&#x27; -X DELETE 127.0.0.1:5000/v2/zhangguanzhang/alpine/manifests/$&#123;manifest_digest&#125;</span><br><span class="line"></span><br><span class="line">$ curl -u &#x27;xxx:xxxx&#x27; 127.0.0.1:5000/v2/zhangguanzhang/alpine/tags/list</span><br><span class="line">&#123;&quot;name&quot;:&quot;zhangguanzhang/alpine&quot;,&quot;tags&quot;:[&quot;latest&quot;]&#125;</span><br></pre></td></tr></table></figure><p>注意上面的 config blob 会先 head 下看看是否 404，404 才上面上传，否则就能获取到 config_digest ，最后执行 garbage-collect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec registry registry garbage-collect /etc/docker/registry/config.yml --dry-run</span><br><span class="line">docker exec registry registry garbage-collect /etc/docker/registry/config.yml -m</span><br><span class="line"># gc 后一定要重启 registry 容器</span><br><span class="line">docker restart registry</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/distribution/distribution/issues/1755">https://github.com/distribution/distribution/issues/1755</a></li><li><a href="https://github.com/distribution/distribution/issues/2317">https://github.com/distribution/distribution/issues/2317</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 docker registry 本地仓库时候，一个镜像推送多个 tag 后，删除其中一个 tag 会造成所有 tag 都被删除，如何避免&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 代码层面构建和推送容器镜像到远端仓库</title>
    <link href="http://zhangguanzhang.github.io/2024/01/16/go-docker-img/"/>
    <id>http://zhangguanzhang.github.io/2024/01/16/go-docker-img/</id>
    <published>2024-01-16T20:05:30.000Z</published>
    <updated>2024-01-16T20:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang 代码层面构建和推送容器镜像到远端仓库的 demo 参考</p><span id="more"></span><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>这里使用 <a href="https://github.com/GoogleContainerTools/kaniko/tree/main">kaniko</a> 先举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">COPY Dockerfile /opt</span><br><span class="line">RUN chmod -R 644 /opt</span><br><span class="line">$ docker run --rm -ti -v $PWD:/workspace gcr.io/kaniko-project/executor:v1.20.1 \</span><br><span class="line">  --no-push --context=/workspace --dockerfile /workspace/Dockerfile \</span><br><span class="line">  --destination  test --tar-path image.tar</span><br><span class="line">INFO[0000] Retrieving image manifest alpine             </span><br><span class="line">INFO[0000] Retrieving image alpine from registry index.docker.io </span><br><span class="line">INFO[0002] Built cross stage deps: map[]                </span><br><span class="line">INFO[0002] Retrieving image manifest alpine             </span><br><span class="line">INFO[0002] Returning cached image manifest              </span><br><span class="line">INFO[0002] Executing 0 build triggers                   </span><br><span class="line">INFO[0002] Building stage &#x27;alpine&#x27; [idx: &#x27;0&#x27;, base-idx: &#x27;-1&#x27;] </span><br><span class="line">INFO[0002] Unpacking rootfs as cmd COPY Dockerfile /opt requires it. </span><br><span class="line">INFO[0005] COPY go.mod /opt                             </span><br><span class="line">INFO[0005] Taking snapshot of files...                  </span><br><span class="line">INFO[0005] RUN chmod -R 644 /opt                        </span><br><span class="line">INFO[0005] Initializing snapshotter ...                 </span><br><span class="line">INFO[0005] Taking snapshot of full filesystem...        </span><br><span class="line">INFO[0005] Cmd: /bin/sh                                 </span><br><span class="line">INFO[0005] Args: [-c chmod -R 644 /opt]                 </span><br><span class="line">INFO[0005] Running: [/bin/sh -c chmod -R 644 /opt]      </span><br><span class="line">INFO[0005] Taking snapshot of full filesystem...        </span><br><span class="line">INFO[0007] Skipping push to container registry due to --no-push flag</span><br></pre></td></tr></table></figure><p>然后目录就有 image.tar 镜像</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面代码注意，需要自己设置两个环境变量</p><ul><li><code>DOCKER_CONFIG=xxx.json</code> 内容为登录后的 json 文件路径</li><li><code>KANIKO_DIR=/opt/xxx/xxx</code> 干净的空目录</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/GoogleContainerTools/kaniko/pkg/config&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/GoogleContainerTools/kaniko/pkg/executor&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义构建参数 创建 Kaniko 配置</span></span><br><span class="line"><span class="comment">// https://github.com/GoogleContainerTools/kaniko/blob/main/cmd/executor/cmd/root.go#L201</span></span><br><span class="line">opts := &amp;config.KanikoOptions&#123;</span><br><span class="line">RegistryOptions: config.RegistryOptions&#123;</span><br><span class="line">Insecure:           <span class="literal">true</span>,</span><br><span class="line">InsecurePull:       <span class="literal">true</span>,</span><br><span class="line">ImageDownloadRetry: <span class="number">3</span>,</span><br><span class="line">InsecureRegistries: []<span class="type">string</span>&#123;<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">SrcContext:     <span class="string">&quot;.&quot;</span>,</span><br><span class="line">DockerfilePath: os.Args[<span class="number">1</span>],</span><br><span class="line">Destinations:   []<span class="type">string</span>&#123;os.Args[<span class="number">2</span>]&#125;,</span><br><span class="line">Compression:    <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">SnapshotMode:   <span class="string">&quot;full&quot;</span>,</span><br><span class="line">    <span class="comment">// 设置了下面俩属性是构建生成在本地，也要执行executor.DoPush才有tar生成</span></span><br><span class="line">    <span class="comment">// NoPush:       true,</span></span><br><span class="line">    <span class="comment">//TarPath:        &quot;xxx.tar&quot;,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := executor.CheckPushPermissions(opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;检查推送权限失败: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">image, err := executor.DoBuild(opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;构建镜像失败: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = executor.DoPush(image, opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;推送镜像失败: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;镜像推送成功!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为 build ，注意 <code>KANIKO_DIR</code> 的目录和 <code>SrcContext</code> 不能重合，还有建议去看看源码，<code>KANIKO_DIR</code> 修改很不方便，自行接入测试就知道了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull xxx.xxx.xxx:5000/build-test/test</span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: manifest for xxx.xxx.xxx:5000/build-test/test:latest not found: manifest unknown: manifest unknown</span><br><span class="line">$ cat Dockerfile </span><br><span class="line">FROM xxx.xxx.xxx:5000/xxx/font_image</span><br><span class="line">COPY Dockerfile /opt</span><br><span class="line">RUN chmod -R 644 /opt</span><br><span class="line">$ docker run --net host  --rm -ti -v $PWD:/v -w /v  -v ~/.docker:/root/.docker  centos:7</span><br><span class="line">$ KANIKO_DIR=/opt ./build Dockerfile xxx.xxx.xxx:5000/build-test/test</span><br><span class="line">INFO[0000] Retrieving image manifest xxx.xxx.xxx:5000/xxx/xxxx_image</span><br><span class="line">INFO[0000] Retrieving image xxx.xxx.xxx:5000/xxx/xxxx_imagefrom registry xxx.xxx.xxx:5000 </span><br><span class="line">INFO[0000] Built cross stage deps: map[]                </span><br><span class="line">INFO[0000] Retrieving image manifest xxx.xxx.xxx:5000/xxx/xxxx_image</span><br><span class="line">INFO[0000] Returning cached image manifest              </span><br><span class="line">INFO[0000] Executing 0 build triggers                   </span><br><span class="line">INFO[0000] Building stage &#x27;xxx.xxx.xxx:5000/xxx/font_image&#x27; [idx: &#x27;0&#x27;, base-idx: &#x27;-1&#x27;] </span><br><span class="line">INFO[0000] Unpacking rootfs as cmd COPY Dockerfile /opt requires it. </span><br><span class="line">INFO[0000] COPY Dockerfile /opt                         </span><br><span class="line">INFO[0000] Taking snapshot of files...                  </span><br><span class="line">INFO[0000] RUN chmod -R 644 /opt                        </span><br><span class="line">INFO[0000] Initializing snapshotter ...                 </span><br><span class="line">INFO[0000] Taking snapshot of full filesystem...        </span><br><span class="line">INFO[0004] Cmd: /bin/sh                                 </span><br><span class="line">INFO[0004] Args: [-c chmod -R 644 /opt]                 </span><br><span class="line">INFO[0004] Running: [/bin/sh -c chmod -R 644 /opt]      </span><br><span class="line">INFO[0004] Taking snapshot of full filesystem...        </span><br><span class="line">INFO[0005] No files were changed, appending empty layer to config. No layer added to image. </span><br><span class="line">INFO[0005] Pushing image to xxx.xxx.xxx:5000/build-test/test </span><br><span class="line">INFO[0006] Pushed xxx.xxx.xxx:5000/build-test/test@sha256:06efb31a8d750f4e34099091c905562d25aa180ff6d0845179acc633e51f01f7</span><br></pre></td></tr></table></figure><p>退出到宿主机上拉取 <code>docker pull xxx.xxx.xxx:5000/build-test/test</code> 能拉取</p><p><code>2024/04/17</code> 发现，在容器内 golang 使用 kaniko 库构建镜像的时候，会把 <code>FROM alpine</code> 的 rootfs 解压到容器内覆盖，导致容器内 rootfs 乱了，轻则导致一些 so 问题，重则运行进程 core dump。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ KANIKO_DIR=/tmp/kaniko  build Dockerfile 127.0.0.1:5000/build-test/test:test /tmp/kaniko/ </span><br><span class="line">Destinations: 127.0.0.1:5000/build-test/test:test</span><br><span class="line">INFO[0010] Retrieving image manifest alpine             </span><br><span class="line">INFO[0010] Retrieving image alpine from registry index.docker.io </span><br><span class="line">INFO[0012] Built cross stage deps: map[]                </span><br><span class="line">INFO[0012] Retrieving image manifest alpine             </span><br><span class="line">INFO[0012] Returning cached image manifest              </span><br><span class="line">INFO[0012] Executing 0 build triggers                   </span><br><span class="line">INFO[0012] Building stage &#x27;alpine&#x27; [idx: &#x27;0&#x27;, base-idx: &#x27;-1&#x27;] </span><br><span class="line">INFO[0012] Unpacking rootfs as cmd COPY Dockerfile /opt requires it. </span><br><span class="line">INFO[0015] COPY Dockerfile /opt                         </span><br><span class="line">INFO[0015] Taking snapshot of files...                  </span><br><span class="line">INFO[0015] RUN chmod -R 644 /opt                        </span><br><span class="line">INFO[0015] Initializing snapshotter ...                 </span><br><span class="line">INFO[0015] Taking snapshot of full filesystem...        </span><br><span class="line">ERRO[0019] Couldn&#x27;t eval /usr/lib/libcrypto.so.3 with link /usr/lib/libcrypto.so.3 </span><br><span class="line">INFO[0019] Cmd: /bin/sh                                 </span><br><span class="line">INFO[0019] Args: [-c chmod -R 644 /opt]                 </span><br><span class="line">INFO[0019] Running: [/bin/sh -c chmod -R 644 /opt]      </span><br><span class="line">INFO[0019] Taking snapshot of full filesystem...        </span><br><span class="line">ERRO[0022] Couldn&#x27;t eval /usr/lib/libssl.so.3 with link /usr/lib/libssl.so.3 </span><br><span class="line">INFO[0025] Skipping push to container registry due to --no-push flag</span><br></pre></td></tr></table></figure><p>例如上面是容器内是 ubuntu，FROM 的是 alpine，<code>/usr/lib/libcrypto.so.3</code> 是 alpine 的，并不是 ubuntu 的，构建镜像后有的，为啥之前没发现，是因为之前 FROM 的镜像是 busybox，基本只有 busybox sh，覆盖了容器内的也没多大问题。</p><p>官方的 <code>kaniko-project/executor</code> 实际是 scratch 空镜像加二进制和基础目录，并且是一次性运行，没有这种问题（但是看 issue 有人反馈过，在构建多个 FROM 的镜像会出现类似问题，哈哈哈）。</p><p>覆盖 issue：</p><ul><li><a href="https://github.com/GoogleContainerTools/kaniko/issues/2214">https://github.com/GoogleContainerTools/kaniko/issues/2214</a></li><li><a href="https://github.com/GoogleContainerTools/kaniko/issues/1870">https://github.com/GoogleContainerTools/kaniko/issues/1870</a></li></ul><p>并且发现 kaniko 并不能非 <code>root</code> 构建，调试过程中发现会例如前面的 FROM alpine 后 COPY ，COPY、ADD 和 RUN 都需要解开 rootfs 操作的，下面报错就是把 alpine 的层的 tar 内的目录读取后本地映射创建，获取目录的 uid，gid，在本地目录创建和 chown，相当于非 root 用户执行 <code>mkdir bin</code>后，<code>chown 0:0 bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">KANIKO_DIR=/tmp/kaniko  build Dockerfile 127.0.0.1:5000/build-test/test:<span class="built_in">test</span></span></span><br><span class="line">Destinations: 127.0.0.1:5000/build-test/test:test</span><br><span class="line">INFO[0036] Retrieving image manifest alpine             </span><br><span class="line">INFO[0036] Retrieving image alpine from registry index.docker.io </span><br><span class="line">INFO[0041] Built cross stage deps: map[]                </span><br><span class="line">INFO[0042] Retrieving image manifest alpine             </span><br><span class="line">INFO[0042] Returning cached image manifest              </span><br><span class="line">INFO[0042] Executing 0 build triggers                   </span><br><span class="line">INFO[0044] Building stage &#x27;alpine&#x27; [idx: &#x27;0&#x27;, base-idx: &#x27;-1&#x27;] </span><br><span class="line">INFO[0066] Unpacking rootfs as cmd COPY Dockerfile /opt requires it. </span><br><span class="line">构建镜像失败: error building stage: failed to get filesystem from image: chown /bin: operation not permitted</span><br></pre></td></tr></table></figure><h2 id="只推送镜像的代码"><a href="#只推送镜像的代码" class="headerlink" title="只推送镜像的代码"></a>只推送镜像的代码</h2><p>其实上面的 kaniko 底层也是使用 go-containerregistry 库推送 tar 的</p><h3 id="github-com-x2F-google-x2F-go-containerregistry"><a href="#github-com-x2F-google-x2F-go-containerregistry" class="headerlink" title="github.com&#x2F;google&#x2F;go-containerregistry"></a>github.com&#x2F;google&#x2F;go-containerregistry</h3><p>参考 <a href="https://github.com/google/go-containerregistry/blob/main/cmd/crane/cmd/push.go#L42%E4%BD%BF%E7%94%A8">crane 的 push 命令代码</a>：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/authn&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/name&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/v1/remote&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/v1/tarball&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换为你的 Docker 镜像 tar 文件的路径</span></span><br><span class="line">img, err := tarball.ImageFromPath(os.Args[<span class="number">1</span>], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error loading Docker image from tarball: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h, _ := img.Digest()</span><br><span class="line">fmt.Printf(<span class="string">&quot;local image Digest: %s\n&quot;</span>, h.String())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建要推送到的镜像仓库的名称</span></span><br><span class="line">repoName, err := name.ParseReference(os.Args[<span class="number">2</span>], name.Insecure)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error parsing repository URL: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用remote.Write将镜像推送到远程仓库，DefaultKeychain是读取家目录的~/.docker/config.json,如果直接使用用户名和密码授权，使用authn.Basic实列一个结构体x后，然后remote.WithAuth(x)</span></span><br><span class="line">err = remote.Write(</span><br><span class="line">repoName,</span><br><span class="line">img,</span><br><span class="line">remote.WithAuthFromKeychain(authn.DefaultKeychain),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error push repository URL: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remoteImg, err := remote.Image(repoName, remote.WithAuthFromKeychain(authn.DefaultKeychain))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error get: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">h, _ = remoteImg.Digest()</span><br><span class="line"><span class="comment">// 验证是否成功推送，或者直接使用 remote.Image 判断远端镜像存在否</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Image pushed successfully: %s\n&quot;</span>, h.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后为 tarPush 镜像，测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull xxx.xxx.xxx:5000/test/test:test</span><br><span class="line">Error response from daemon: manifest for xxx.xxx.xxx:5000/test/test:test not found: manifest unknown: manifest unknown</span><br><span class="line"># 保存镜像</span><br><span class="line">$ docker save  centos:7 -o image.tar</span><br><span class="line"># 容器里测试，没有挂载 docker.sock </span><br><span class="line">$ docker run --rm -ti --net host -v ~/.docker:/root/.docker -v $PWD:/v -w /v centos:7</span><br><span class="line">$ ./tarPush image.tar xxx.xxx.xxx:5000/test/test:test1</span><br><span class="line">local image Digest: sha256:26ee6ac028a8c40861034deb292a6ce45cf713e9761250a32ef69b08c2abc67f</span><br><span class="line">Image pushed successfully: sha256:26ee6ac028a8c40861034deb292a6ce45cf713e9761250a32ef69b08c2abc67f</span><br><span class="line"># 退出去，宿主机上拉取</span><br><span class="line"># docker pull xxx.xxx.xxx:5000/test/test:test</span><br><span class="line">test: Pulling from test/test</span><br><span class="line">Digest: sha256:26ee6ac028a8c40861034deb292a6ce45cf713e9761250a32ef69b08c2abc67f</span><br><span class="line">Status: Downloaded newer image for xxx.xxx.xxx:5000/test/test:test</span><br><span class="line">xxx.xxx.xxx:5000/test/test:test</span><br></pre></td></tr></table></figure><p>我向 <code>google/go-containerregistry</code> 提交了 pr 支持 <a href="https://github.com/google/go-containerregistry/pull/1858">support gzip on tarball.ImageFromPath</a> 离线镜像推送不支持 gzip 的，也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save alpine | gzip -&gt; alpine.tar.gz</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><code>KANIKO_DIR</code> 为啥说要提前设置环境变量，是因为包下面的 import 级别设置了值，代码里 <code>os.Setenv</code> 是不行的，必须启动设置变量 <code>KANIKO_DIR</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/GoogleContainerTools/kaniko/blob/v1.19.2/pkg/config/init.go#L29-L33</span><br><span class="line">var KanikoDir = func() string &#123;</span><br><span class="line">if kd, ok := os.LookupEnv(&quot;KANIKO_DIR&quot;); ok &#123;</span><br><span class="line">return kd</span><br><span class="line">&#125;</span><br><span class="line">return constants.DefaultKanikoPath</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;golang 代码层面构建和推送容器镜像到远端仓库的 demo 参考&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>docker 和 apparmor</title>
    <link href="http://zhangguanzhang.github.io/2024/01/08/docker-apparmor/"/>
    <id>http://zhangguanzhang.github.io/2024/01/08/docker-apparmor/</id>
    <published>2024-01-08T21:05:30.000Z</published>
    <updated>2024-01-08T21:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>从搜索和源码探索 docker 如何处理 apparmor</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>suse12sp5 上古系统记得之前接手还是 17.05 rpm 安装的，后续找了个 19.03.15 的 rpm 安装上的，之所以使用 rpm 是因为 docker static bin 安装起不来（忘记啥报错了来着），然后现在尝试了 24.0.5 的能起来，但是容器无法启动，发现和 apparmor 有关。apparmor、seccomp和 SELinux 都是用于增强 Linux 系统安全性的安全性模块。它们提供了对进程、应用程序和系统资源的额外访问控制层。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p>系统信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">suse12sp5:~ # cat /etc/os-release </span><br><span class="line">NAME=&quot;SLES&quot;</span><br><span class="line">VERSION=&quot;12-SP5&quot;</span><br><span class="line">VERSION_ID=&quot;12.5&quot;</span><br><span class="line">PRETTY_NAME=&quot;SUSE Linux Enterprise Server 12 SP5&quot;</span><br><span class="line">ID=&quot;sles&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;32&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:suse:sles:12:sp5&quot;</span><br><span class="line">suse12sp5:~ # uname -a</span><br><span class="line">Linux suse12sp5 4.12.14-120-default #1 SMP Thu Nov 7 16:39:09 UTC 2019 (fd9dc36) x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">suse12sp5:~ # apparmor_parser --version</span><br><span class="line">AppArmor parser version 2.8.2</span><br><span class="line">Copyright (C) 1999-2008 Novell Inc.</span><br><span class="line">Copyright 2009-2012 Canonical Ltd.</span><br><span class="line">suse12sp5:~ # rpm -qa | grep libsecc</span><br><span class="line">libseccomp2-32bit-2.3.1-10.1.x86_64</span><br><span class="line">libseccomp2-2.3.1-10.1.x86_64</span><br></pre></td></tr></table></figure><p>24.0.5 的 docker static bin 安装好后导入镜像，无法起容器，报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: AppArmor enabled on system but the docker-default profile could not be loaded: running `/sbin/apparmor_parser apparmor_parser -Kr /data/kube/docker/tmp/docker-default1881723382` failed with output: AppArmor parser error for /data/kube/docker/tmp/docker-default1881723382 in /data/kube/docker/tmp/docker-default1881723382 at line 16: syntax error, unexpected TOK_OPENPAREN, expecting TOK_MODE</span><br></pre></td></tr></table></figure><p>代码里搜报错 <code>AppArmor enabled on system but the</code> 搜到 <code>ensureDefaultAppArmorProfile</code> 方法里：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/moby/moby/blob/v24.0.5/daemon/apparmor_default.go#L27</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensureDefaultAppArmorProfile</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> apparmor.HostSupports() &#123;</span><br><span class="line">loaded, err := aaprofile.IsLoaded(defaultAppArmorProfile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Could not check if %s AppArmor profile was loaded: %s&quot;</span>, defaultAppArmorProfile, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nothing to do.</span></span><br><span class="line"><span class="keyword">if</span> loaded &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the profile.</span></span><br><span class="line"><span class="keyword">if</span> err := aaprofile.InstallDefault(defaultAppArmorProfile); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;AppArmor enabled on system but the %s profile could not be loaded: %s&quot;</span>, defaultAppArmorProfile, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apparmor.HostSupports</code> 是 <code>os.Getenv(&quot;container&quot;) == &quot;&quot;</code> 且 <code>/sys/module/apparmor/parameters/enabled</code> 里是 <code>Y</code> 且存在命令 <code>/sbin/apparmor_parser</code> 则满足<br><code>aaprofile.IsLoaded</code> 是等同于 <code>grep &#39;docker-default &#39; /sys/kernel/security/apparmor/profiles</code> 判断 apparmor 策略 <code>docker-default</code> 加载没，没加载则加载</p><h3 id="docker-的-apparmor-生成和加载"><a href="#docker-的-apparmor-生成和加载" class="headerlink" title="docker 的 apparmor 生成和加载"></a>docker 的 apparmor 生成和加载</h3><p>然后就是 <a href="https://github.com/moby/moby/blob/v24.0.5/profiles/apparmor/apparmor.go#L33-L99">profiles&#x2F;apparmor&#x2F;apparmor.go 里的  <code>generateDefault 和 InstallDefault</code></a>:</p><ul><li>docker daemon 进程读取 <code>/proc/self/attr/current</code> 为空则策略名为 <code>unconfined</code></li><li>创建 <code>os.CreateTemp</code> 临时文件，并用模板 <code>profiles/apparmor/template.go</code> 生成到临时文件里</li><li>使用 <code>/sbin/apparmor_parser -Kr &lt;tmp_file&gt;</code> 加载策略</li><li>无论加载成功还是失败，最后会把这个临时策略文件删掉</li></ul><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><p>上面报错就是策略文件内容有问题，但是 docker daemon 会把策略文件删掉，最开始 clone 源码修改不删掉临时文件后 make 替换，但是后面发现了个简单粗暴套路：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cp /sbin/apparmor_parser /sbin/apparmor_parser_REAL</span><br><span class="line">cat &gt; /sbin/apparmor_parser &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;$*&quot; &gt;&gt; /root/apparmor_parser_arg_log</span><br><span class="line"></span><br><span class="line">if [ $# -eq 2 ]; then</span><br><span class="line">    cat $2 &gt; /root/apparmor_parser_profile_log</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">/sbin/apparmor_parser_REAL $*</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后 docker start 后 <code>/root/apparmor_parser_profile_log</code> 就生成内容了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;tunables/global&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">profile docker-default flags=(attach_disconnected,mediate_deleted) &#123;</span><br><span class="line"></span><br><span class="line">  #include &lt;abstractions/base&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  network,</span><br><span class="line">  capability,</span><br><span class="line">  file,</span><br><span class="line">  umount,</span><br><span class="line">  # Host (privileged) processes may send signals to container processes.</span><br><span class="line">  signal (receive) peer=unconfined,</span><br><span class="line">  # dockerd may send signals to container processes (for &quot;docker kill&quot;).</span><br><span class="line">  signal (receive) peer=unconfined</span><br><span class="line">,</span><br><span class="line">  # Container processes may send signals amongst themselves.</span><br><span class="line">  signal (send,receive) peer=docker-default,</span><br><span class="line"></span><br><span class="line">  deny @&#123;PROC&#125;/* w,   # deny write for all files directly in /proc (not in a subdir)</span><br><span class="line">  # deny write to files not in /proc/&lt;number&gt;/** or /proc/sys/**</span><br><span class="line">  deny @&#123;PROC&#125;/&#123;[^1-9],[^1-9][^0-9],[^1-9s][^0-9y][^0-9s],[^1-9][^0-9][^0-9][^0-9/]*&#125;/** w,</span><br><span class="line">  deny @&#123;PROC&#125;/sys/[^k]** w,  # deny /proc/sys except /proc/sys/k* (effectively /proc/sys/kernel)</span><br><span class="line">  deny @&#123;PROC&#125;/sys/kernel/&#123;?,??,[^s][^h][^m]**&#125; w,  # deny everything except shm* in /proc/sys/kernel/</span><br><span class="line">  deny @&#123;PROC&#125;/sysrq-trigger rwklx,</span><br><span class="line">  deny @&#123;PROC&#125;/kcore rwklx,</span><br><span class="line"></span><br><span class="line">  deny mount,</span><br><span class="line"></span><br><span class="line">  deny /sys/[^f]*/** wklx,</span><br><span class="line">  deny /sys/f[^s]*/** wklx,</span><br><span class="line">  deny /sys/fs/[^c]*/** wklx,</span><br><span class="line">  deny /sys/fs/c[^g]*/** wklx,</span><br><span class="line">  deny /sys/fs/cg[^r]*/** wklx,</span><br><span class="line">  deny /sys/firmware/** rwklx,</span><br><span class="line">  deny /sys/kernel/security/** rwklx,</span><br><span class="line"></span><br><span class="line">  # suppress ptrace denials when using &#x27;docker ps&#x27; or using &#x27;ps&#x27; inside a container</span><br><span class="line">  ptrace (trace,read,tracedby,readby) peer=docker-default,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>/sbin/apparmor_parser -Kr /root/apparmor_parser_profile_log</code> 和上面一样的报错，尝试后发现去掉 <code>signal</code> 和 <code>ptrace</code> 行才可以，然后在 rpm 19.03 环境上面这样 hack 后拿到的策略文件也是没有 <code>signal</code> 和 <code>ptrace</code> 行的，删掉这俩类型后加载就只报警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-KR 卸载</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apparmor_parser -Kr /root/apparmor_parser_profile_log</span></span><br><span class="line">Warning from test (test line 38): profile docker-default mount rules not enforced</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aa-status</span></span><br><span class="line">...</span><br><span class="line">   docker-default (xxxx) </span><br><span class="line">   docker-default (xxxx) </span><br><span class="line">   docker-default (xxxx)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>容器也能启动了，固化就把这个文件存放到 <code>/etc/apparmor.d/docker-default</code> ，这样提前加载后，docker daemon 判断加载了就不加载它的内置模板了。后续加了下下面几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#123;PROC&#125;/sys/kernel/ r,</span><br></pre></td></tr></table></figure><h2 id="apparmor-和一些其他信息"><a href="#apparmor-和一些其他信息" class="headerlink" title="apparmor 和一些其他信息"></a>apparmor 和一些其他信息</h2><h3 id="规则文件解释"><a href="#规则文件解释" class="headerlink" title="规则文件解释"></a>规则文件解释</h3><p><code>#include </code> 后面不是就绝对路径则是 <code>/etc/apparmor.d/</code> 内的，提供一些变量命名和目录权限<br><code>profile &lt;name|bin-path&gt; flags=(xx,xxx,xxxx) &#123;</code> 名字（供外部 docker&#x2F;k8s 使用该策略）或者二进制路径限制，flags 后面可以逗号或者空格分隔<br>    - <code>attach_disconnected</code> 允许连接端口的进程<br>    - <code>mediate_deleted</code> 允许进程访问已被删除的文件<br>    - <code>complain</code> 默认是 <code>enforce</code> 模式，操作会被拒绝，complain 则会记录日志，kill 则 deny 的时候 kill 掉，查看进程模式可以通过 <code>cat /proc/&lt;pid&gt;/attr/current</code> 可以查看进程的策略名和模式，例如 <code>dodcker-default enforce</code><br>还有其他属性就不介绍了，例如文件，网络，mount 啥的，自行搜下文档</p><p>开启打印后，可以系统日志里看到信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/printk_ratelimit</span><br><span class="line">echo -n &quot;all&quot; &gt; /sys/module/apparmor/parameters/audit</span><br></pre></td></tr></table></figure><h3 id="docker-示例"><a href="#docker-示例" class="headerlink" title="docker 示例"></a>docker 示例</h3><p>搜相关 issue 的时候发现，之前的模板里有判断 apparmor_parser 的版本，后面又去掉了，是因为有人提交了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l contrib/apparmor/</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root  916 Jan  8 21:25 main.go</span><br><span class="line">-rw-r--r-- 1 root root 5357 Jan  8 21:24 template.go</span><br></pre></td></tr></table></figure><p>看了下代码，可以生成参考的策略内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line">$ go run contrib/apparmor/*.go 111</span><br><span class="line">$ cat 111</span><br><span class="line">@&#123;DOCKER_GRAPH_PATH&#125;=/var/lib/docker</span><br><span class="line"></span><br><span class="line">profile /usr/bin/docker (attach_disconnected, complain) &#123;</span><br><span class="line">  # Prevent following links to these files during container setup.</span><br><span class="line">  deny /etc/** mkl,</span><br><span class="line">  deny /dev/** kl,</span><br><span class="line">  deny /sys/** mkl,</span><br><span class="line">  deny /proc/** mkl,</span><br><span class="line"></span><br><span class="line">  mount -&gt; @&#123;DOCKER_GRAPH_PATH&#125;/**,</span><br><span class="line">  mount -&gt; /,</span><br><span class="line">  mount -&gt; /proc/**,</span><br><span class="line">  mount -&gt; /sys/**,</span><br><span class="line">  mount -&gt; /run/docker/netns/**,</span><br><span class="line">  mount -&gt; /.pivot_root[0-9]*/,</span><br><span class="line"></span><br><span class="line">  / r,</span><br><span class="line"></span><br><span class="line">  umount,</span><br><span class="line">  pivot_root,</span><br><span class="line">  signal (receive) peer=@&#123;profile_name&#125;,</span><br><span class="line">  signal (receive) peer=unconfined,</span><br><span class="line">  signal (send),</span><br><span class="line">  network,</span><br><span class="line">  capability,</span><br><span class="line">  owner /** rw,</span><br><span class="line">  @&#123;DOCKER_GRAPH_PATH&#125;/** rwl,</span><br><span class="line">  @&#123;DOCKER_GRAPH_PATH&#125;/network/files/boltdb.db k,</span><br><span class="line">  @&#123;DOCKER_GRAPH_PATH&#125;/network/files/local-kv.db k,</span><br><span class="line">  # For user namespaces:</span><br><span class="line">  @&#123;DOCKER_GRAPH_PATH&#125;/[0-9]*.[0-9]*/network/files/boltdb.db k,</span><br><span class="line">  @&#123;DOCKER_GRAPH_PATH&#125;/[0-9]*.[0-9]*/network/files/local-kv.db k,</span><br><span class="line"></span><br><span class="line">  # For non-root client use:</span><br><span class="line">  /dev/urandom r,</span><br><span class="line">  /dev/null rw,</span><br><span class="line">  /dev/pts/[0-9]* rw,</span><br><span class="line">  /run/docker.sock rw,</span><br><span class="line">  /proc/** r,</span><br><span class="line">  /proc/[0-9]*/attr/exec w,</span><br><span class="line">  /sys/kernel/mm/hugepages/ r,</span><br><span class="line">  /etc/localtime r,</span><br><span class="line">  /etc/ld.so.cache r,</span><br><span class="line">  /etc/passwd r,</span><br><span class="line"></span><br><span class="line">  ptrace peer=@&#123;profile_name&#125;,</span><br><span class="line">  ptrace (read) peer=docker-default,</span><br><span class="line">  deny ptrace (trace) peer=docker-default,</span><br><span class="line">  deny ptrace peer=/usr/bin/docker///bin/ps,</span><br><span class="line"></span><br><span class="line">  /usr/lib/** rm,</span><br><span class="line">  /lib/** rm,</span><br><span class="line"></span><br><span class="line">  /usr/bin/docker pix,</span><br><span class="line">  /sbin/xtables-multi rCx,</span><br><span class="line">  /sbin/iptables rCx,</span><br><span class="line">  /sbin/modprobe rCx,</span><br><span class="line">  /sbin/auplink rCx,</span><br><span class="line">  /sbin/mke2fs rCx,</span><br><span class="line">  /sbin/tune2fs rCx,</span><br><span class="line">  /sbin/blkid rCx,</span><br><span class="line">  /bin/kmod rCx,</span><br><span class="line">  /usr/bin/xz rCx,</span><br><span class="line">  /bin/ps rCx,</span><br><span class="line">  /bin/tar rCx,</span><br><span class="line">  /bin/cat rCx,</span><br><span class="line">  /sbin/zfs rCx,</span><br><span class="line">  /sbin/apparmor_parser rCx,</span><br><span class="line"></span><br><span class="line">  # Transitions</span><br><span class="line">  change_profile -&gt; docker-*,</span><br><span class="line">  change_profile -&gt; unconfined,</span><br><span class="line"></span><br><span class="line">  profile /bin/cat (complain) &#123;</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /proc r,</span><br><span class="line">    /bin/cat mr,</span><br><span class="line"></span><br><span class="line">    # For reading in &#x27;docker stats&#x27;:</span><br><span class="line">    /proc/[0-9]*/net/dev r,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /bin/ps (complain) &#123;</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /etc/localtime r,</span><br><span class="line">    /etc/passwd r,</span><br><span class="line">    /etc/nsswitch.conf r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /proc/[0-9]*/** r,</span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /bin/ps mr,</span><br><span class="line"></span><br><span class="line">    # We don&#x27;t need ptrace so we&#x27;ll deny and ignore the error.</span><br><span class="line">    deny ptrace (read, trace),</span><br><span class="line"></span><br><span class="line">    # Quiet dac_override denials</span><br><span class="line">    deny capability dac_override,</span><br><span class="line">    deny capability dac_read_search,</span><br><span class="line">    deny capability sys_ptrace,</span><br><span class="line"></span><br><span class="line">    /dev/tty r,</span><br><span class="line">    /proc/stat r,</span><br><span class="line">    /proc/cpuinfo r,</span><br><span class="line">    /proc/meminfo r,</span><br><span class="line">    /proc/uptime r,</span><br><span class="line">    /sys/devices/system/cpu/online r,</span><br><span class="line">    /proc/sys/kernel/pid_max r,</span><br><span class="line">    /proc/ r,</span><br><span class="line">    /proc/tty/drivers r,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/iptables (complain) &#123;</span><br><span class="line">    signal (receive) peer=/usr/bin/docker,</span><br><span class="line">    capability net_admin,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/auplink flags=(attach_disconnected, complain) &#123;</span><br><span class="line">    signal (receive) peer=/usr/bin/docker,</span><br><span class="line">    capability sys_admin,</span><br><span class="line">    capability dac_override,</span><br><span class="line"></span><br><span class="line">    @&#123;DOCKER_GRAPH_PATH&#125;/aufs/** rw,</span><br><span class="line">    @&#123;DOCKER_GRAPH_PATH&#125;/tmp/** rw,</span><br><span class="line">    # For user namespaces:</span><br><span class="line">    @&#123;DOCKER_GRAPH_PATH&#125;/[0-9]*.[0-9]*/** rw,</span><br><span class="line"></span><br><span class="line">    /sys/fs/aufs/** r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /apparmor/.null r,</span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /sbin/auplink rm,</span><br><span class="line">    /proc/fs/aufs/** rw,</span><br><span class="line">    /proc/[0-9]*/mounts rw,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/modprobe /bin/kmod (complain) &#123;</span><br><span class="line">    signal (receive) peer=/usr/bin/docker,</span><br><span class="line">    capability sys_module,</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /apparmor/.null rw,</span><br><span class="line">    /sbin/modprobe rm,</span><br><span class="line">    /bin/kmod rm,</span><br><span class="line">    /proc/cmdline r,</span><br><span class="line">    /sys/module/** r,</span><br><span class="line">    /etc/modprobe.d&#123;/,/**&#125; r,</span><br><span class="line">  &#125;</span><br><span class="line">  # xz works via pipes, so we do not need access to the filesystem.</span><br><span class="line">  profile /usr/bin/xz (complain) &#123;</span><br><span class="line">    signal (receive) peer=/usr/bin/docker,</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /usr/bin/xz rm,</span><br><span class="line">    deny /proc/** rw,</span><br><span class="line">    deny /sys/** rw,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/xtables-multi (attach_disconnected, complain) &#123;</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /sbin/xtables-multi rm,</span><br><span class="line">    /apparmor/.null w,</span><br><span class="line">    /dev/null rw,</span><br><span class="line"></span><br><span class="line">    /proc r,</span><br><span class="line"></span><br><span class="line">    capability net_raw,</span><br><span class="line">    capability net_admin,</span><br><span class="line">    network raw,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/zfs (attach_disconnected, complain) &#123;</span><br><span class="line">    file,</span><br><span class="line">    capability,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/mke2fs (complain) &#123;</span><br><span class="line">    /sbin/mke2fs rm,</span><br><span class="line"></span><br><span class="line">    /lib/** rm,</span><br><span class="line"></span><br><span class="line">    /apparmor/.null w,</span><br><span class="line"></span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /etc/mke2fs.conf r,</span><br><span class="line">    /etc/mtab r,</span><br><span class="line"></span><br><span class="line">    /dev/dm-* rw,</span><br><span class="line">    /dev/urandom r,</span><br><span class="line">    /dev/null rw,</span><br><span class="line"></span><br><span class="line">    /proc/swaps r,</span><br><span class="line">    /proc/[0-9]*/mounts r,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/tune2fs (complain) &#123;</span><br><span class="line">    /sbin/tune2fs rm,</span><br><span class="line"></span><br><span class="line">    /lib/** rm,</span><br><span class="line"></span><br><span class="line">    /apparmor/.null w,</span><br><span class="line"></span><br><span class="line">    /etc/blkid.conf r,</span><br><span class="line">    /etc/mtab r,</span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line"></span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /dev/.blkid.tab r,</span><br><span class="line">    /dev/dm-* rw,</span><br><span class="line"></span><br><span class="line">    /proc/swaps r,</span><br><span class="line">    /proc/[0-9]*/mounts r,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/blkid (complain) &#123;</span><br><span class="line">    /sbin/blkid rm,</span><br><span class="line"></span><br><span class="line">    /lib/** rm,</span><br><span class="line">    /apparmor/.null w,</span><br><span class="line"></span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /etc/blkid.conf r,</span><br><span class="line"></span><br><span class="line">    /dev/null rw,</span><br><span class="line">    /dev/.blkid.tab rl,</span><br><span class="line">    /dev/.blkid.tab* rwl,</span><br><span class="line">    /dev/dm-* r,</span><br><span class="line"></span><br><span class="line">    /sys/devices/virtual/block/** r,</span><br><span class="line"></span><br><span class="line">    capability mknod,</span><br><span class="line"></span><br><span class="line">    mount -&gt; @&#123;DOCKER_GRAPH_PATH&#125;/**,</span><br><span class="line">  &#125;</span><br><span class="line">  profile /sbin/apparmor_parser (complain) &#123;</span><br><span class="line">    /sbin/apparmor_parser rm,</span><br><span class="line"></span><br><span class="line">    /lib/** rm,</span><br><span class="line"></span><br><span class="line">    /etc/ld.so.cache r,</span><br><span class="line">    /etc/apparmor/** r,</span><br><span class="line">    /etc/apparmor.d/** r,</span><br><span class="line">    /etc/apparmor.d/cache/** w,</span><br><span class="line"></span><br><span class="line">    /dev/null rw,</span><br><span class="line"></span><br><span class="line">    /sys/kernel/security/apparmor/** r,</span><br><span class="line">    /sys/kernel/security/apparmor/.replace w,</span><br><span class="line"></span><br><span class="line">    /proc/[0-9]*/mounts r,</span><br><span class="line">    /proc/sys/kernel/osrelease r,</span><br><span class="line">    /proc r,</span><br><span class="line"></span><br><span class="line">    capability mac_admin,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="suse-的一些信息"><a href="#suse-的一些信息" class="headerlink" title="suse 的一些信息"></a>suse 的一些信息</h3><p><a href="https://build.opensuse.org/package/view_file/Virtualization:containers/docker/docker-mount-secrets.patch?rev=47ac7417f50a4e69851ecbf39cdf7c03">suse secrets 的 patch</a></p><h2 id="一些故障"><a href="#一些故障" class="headerlink" title="一些故障"></a>一些故障</h2><p>UOS 系统上容器无法启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">root@user-PC:~# cat /etc/os-release </span><br><span class="line">PRETTY_NAME=&quot;UnionTech OS Server 20 Enterprise&quot;</span><br><span class="line">NAME=&quot;UnionTech OS Server 20 Enterprise&quot;</span><br><span class="line">VERSION_ID=&quot;20&quot;</span><br><span class="line">VERSION=&quot;20&quot;</span><br><span class="line">ID=UOS</span><br><span class="line">HOME_URL=&quot;https://www.chinauos.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bbs.chinauos.com&quot;</span><br><span class="line">VERSION_CODENAME=fou</span><br><span class="line">root@user-PC:~# uname -a</span><br><span class="line">Linux user-PC 4.19.0-arm64-server #3211 SMP Thu Apr 15 10:21:53 CST 2021 aarch64 GNU/Linux</span><br><span class="line">root@user-PC:~# lscpu</span><br><span class="line">Architecture:        aarch64</span><br><span class="line">CPU op-mode(s):      64-bit</span><br><span class="line">Byte Order:          Little Endian</span><br><span class="line">CPU(s):              64</span><br><span class="line">On-line CPU(s) list: 0-63</span><br><span class="line">Thread(s) per core:  1</span><br><span class="line">Core(s) per socket:  32</span><br><span class="line">Socket(s):           2</span><br><span class="line">NUMA node(s):        4</span><br><span class="line">Vendor ID:           0x48</span><br><span class="line">Model:               0</span><br><span class="line">Model name:          HUAWEI Kunpeng 920 5231K</span><br><span class="line">Stepping:            0x1</span><br><span class="line">BogoMIPS:            200.00</span><br><span class="line">L1d cache:           4 MiB</span><br><span class="line">L1i cache:           4 MiB</span><br><span class="line">L2 cache:            32 MiB</span><br><span class="line">L3 cache:            128 MiB</span><br><span class="line">NUMA node0 CPU(s):   0-15</span><br><span class="line">NUMA node1 CPU(s):   16-31</span><br><span class="line">NUMA node2 CPU(s):   32-47</span><br><span class="line">NUMA node3 CPU(s):   48-63</span><br><span class="line">Flags:               half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt lpae evtstrm</span><br><span class="line">root@user-PC:~# docker info</span><br><span class="line">Client:</span><br><span class="line"> Version:    25.0.5</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 1</span><br><span class="line">  Running: 1</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 1</span><br><span class="line"> Server Version: 25.0.5</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Using metacopy: true</span><br><span class="line">  Native Overlay Diff: false</span><br><span class="line">  userxattr: false</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: io.containerd.runc.v2 runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 7c3aca7a610df76212171d200ca3811ff6096eb8</span><br><span class="line"> runc version: v1.1.12-0-g51d5e94</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: builtin</span><br><span class="line"> Kernel Version: 4.19.0-arm64-server</span><br><span class="line"> Operating System: UnionTech OS Server 20 Enterprise</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: aarch64</span><br><span class="line"> CPUs: 64</span><br><span class="line"> Total Memory: 255.4GiB</span><br><span class="line"> Name: user-PC</span><br><span class="line"> ID: 36c34e5e-d83f-4b96-902d-a5b3b605cec2</span><br><span class="line"> Docker Root Dir: /data3/kube/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  reg.xxx.lan:5000</span><br><span class="line">  treg.yun.xxx.cn</span><br><span class="line">  0.0.0.0/0</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://registry.docker-cn.com/</span><br><span class="line">  https://docker.mirrors.ustc.edu.cn/</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"> Product License: Community Engine</span><br><span class="line"></span><br><span class="line">WARNING: No swap limit support</span><br></pre></td></tr></table></figure><p>启动报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name t1 2e72</span><br><span class="line">50e7dc221804297487e057055663c8315cd3a3218aacb631394798cdf9e9f8da</span><br><span class="line">docker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: unable to apply apparmor profile: apparmor failed to apply profile: write /proc/self/attr/exec: invalid argument: unknown.</span><br></pre></td></tr></table></figure><p>搜了几个相关 issue，docker 和 runc 版本都足够新，机器上也有安装 <code>/sbin/apparmor_parser</code> ，之前有在 4.1x 内核上发现 apparmor 功能不完整， 关闭 apparmor 尝试下就好了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># GRUB_CMDLINE_LINUX 或者 GRUB_CMDLINE_LINUX_DEFAULT</span><br><span class="line"># 添加 apparmor=0 security=</span><br><span class="line">vi &#x27;+:set mouse-=a&#x27; /etc/default/grub</span><br></pre></td></tr></table></figure><p>更新 grub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable --now apparmor</span><br><span class="line"># apt</span><br><span class="line">update-grub</span><br><span class="line"># yum</span><br><span class="line">grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启后的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cmdline </span><br><span class="line">BOOT_IMAGE=/vmlinuz-4.19.0-arm64-server root=UUID=a17eff26-xxxx-4899-xxxx-975b0ec48ca4 ro splash quiet console=tty plymouth.ignore-serial-consoles apparmor=0 security= DEEPIN_GFXMODE=</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/moby/moby/issues/36952">github issue，关于signal (receive) peer&#x3D;unconfined 是上游不支持</a></li><li><a href="https://github.com/moby/moby/issues/33060">Impossible to see contents of AppArmor Profile “docker-default”</a></li><li><a href="https://gitlab.com/apparmor/apparmor/-/wikis/AppArmor_Failures">apparmor wiki</a></li><li><a href="https://github.com/docker-library/golang/issues/467">libseccomp bug</a></li><li><a href="https://documentation.suse.com/zh-cn/sles/15-SP2/html/SLES-all/cha-apparmor-intro.html">suse apparmor</a></li><li><a href="https://help.ubuntu.com/community/AppArmor">ubuntu apparmor</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从搜索和源码探索 docker 如何处理 apparmor&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="apparmor" scheme="http://zhangguanzhang.github.io/tags/apparmor/"/>
    
  </entry>
  
</feed>
