<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangguanzhang</title>
  
  <subtitle>站在巨人的肩膀上</subtitle>
  <link href="http://zhangguanzhang.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhangguanzhang.github.io/"/>
  <updated>2022-07-28T19:18:30.000Z</updated>
  <id>http://zhangguanzhang.github.io/</id>
  
  <author>
    <name>Zhangguanzhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>exsi 使用 redhat8.4 搭建k8s集群，flannel vxlan 模式的不正常排错</title>
    <link href="http://zhangguanzhang.github.io/2022/07/28/redhat84-vxlan-esxi/"/>
    <id>http://zhangguanzhang.github.io/2022/07/28/redhat84-vxlan-esxi/</id>
    <published>2022-07-28T19:18:30.000Z</published>
    <updated>2022-07-28T19:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天处理的一个问题，exsi 上 redhat8.4 搭建 k8s 环境，使用 flannel vxlan 模式，pod 的网络表现得非常异常</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>测试使用我们的工具部署，发现部署中有问题，无法顺利部署完，看到我负责的 etcd 有问题，我就上去看看</p><h2 id="排错过程"><a href="#排错过程" class="headerlink" title="排错过程"></a>排错过程</h2><h3 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h3><p>etcd 的 pod 信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -o wide | grep etcd</span><br><span class="line">etcd1-10.xx.xx.188              1/1     Running            0          27m   172.27.2.11    10.xx.xx.188   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd2-10.xx.xx.201              1/1     Running            0          27m   172.27.1.11    10.xx.xx.201   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd3-10.xx.xx.208              1/1     Running            0          27m   172.27.0.12    10.xx.xx.208   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>看了下三个 etcd 的日志，报错无法连到其他的 etcd ，看下他们的互相通信，执行命令的主机是在 188 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl 172.27.2.11:2380</span><br><span class="line">404 page not found</span><br><span class="line">$ curl 172.27.1.11:2380</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>很奇怪，跨节点不通，但是更奇怪的是可以 ping 通非本机的 pod ip：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ping 172.27.1.11 </span><br><span class="line">PING 172.27.1.11 (172.27.1.11) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.27.1.11: icmp_seq=1 ttl=63 time=0.534 ms</span><br><span class="line">64 bytes from 172.27.1.11: icmp_seq=2 ttl=63 time=0.464 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.27.1.11 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1030ms</span><br></pre></td></tr></table></figure><h3 id="抓包现象"><a href="#抓包现象" class="headerlink" title="抓包现象"></a>抓包现象</h3><p>其实这个就已经很奇怪了，因为无论 ping 还是发应用层请求到另一个节点上的 pod，都会走 flannel 的 vxlan 封包的，不应该 icmp 通，而 curl 不通。</p><p>下面是在 201 上抓包， icmp 能抓到， curl 的抓不到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn -i flannel.1  host 172.27.1.11     </span><br><span class="line">tcpdump: verbose output suppressed, use -v[v]... for full protocol decode</span><br><span class="line">listening on flannel.1, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span><br><span class="line">03:52:49.136420 IP 172.27.2.0 &gt; 172.27.1.11: ICMP echo request, id 30780, seq 1, length 64</span><br><span class="line">03:52:49.136586 IP 172.27.1.11 &gt; 172.27.2.0: ICMP echo reply, id 30780, seq 1, length 64</span><br><span class="line">03:52:50.165997 IP 172.27.2.0 &gt; 172.27.1.11: ICMP echo request, id 30780, seq 2, length 64</span><br><span class="line">03:52:50.166129 IP 172.27.1.11 &gt; 172.27.2.0: ICMP echo reply, id 30780, seq 2, length 64</span><br></pre></td></tr></table></figure><h3 id="错误的尝试"><a href="#错误的尝试" class="headerlink" title="错误的尝试"></a>错误的尝试</h3><p>虽然最终解决了，但是还是按照时间线写下我的处理过程，看下 iptables 规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-N LIBVIRT_INP</span><br><span class="line">-N LIBVIRT_OUT</span><br><span class="line">-N LIBVIRT_FWO</span><br><span class="line">-N LIBVIRT_FWI</span><br><span class="line">-N LIBVIRT_FWX</span><br><span class="line">-N DOCKER</span><br><span class="line">-N DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-N DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-N DOCKER-USER</span><br><span class="line">-N KUBE-PROXY-CANARY</span><br><span class="line">-N KUBE-EXTERNAL-SERVICES</span><br><span class="line">-N KUBE-SERVICES</span><br><span class="line">-N KUBE-FORWARD</span><br><span class="line">-N KUBE-FIREWALL</span><br><span class="line">-N KUBE-KUBELET-CANARY</span><br><span class="line">-A INPUT -j KUBE-FIREWALL</span><br><span class="line">-A INPUT -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes externally-visible service portals&quot; -j KUBE-EXTERNAL-SERVICES</span><br><span class="line">-A INPUT -j LIBVIRT_INP</span><br><span class="line">-A INPUT -i cni0 -j ACCEPT</span><br><span class="line">-A FORWARD -m comment --comment &quot;kubernetes forwarding rules&quot; -j KUBE-FORWARD</span><br><span class="line">-A FORWARD -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES</span><br><span class="line">-A FORWARD -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes externally-visible service portals&quot; -j KUBE-EXTERNAL-SERVICES</span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j LIBVIRT_FWX</span><br><span class="line">-A FORWARD -j LIBVIRT_FWI</span><br><span class="line">-A FORWARD -j LIBVIRT_FWO</span><br><span class="line">-A FORWARD -j ACCEPT</span><br><span class="line">-A OUTPUT -j KUBE-FIREWALL</span><br><span class="line">-A OUTPUT -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES</span><br><span class="line">-A OUTPUT -j LIBVIRT_OUT</span><br><span class="line">-A LIBVIRT_INP -i virbr0 -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line">-A LIBVIRT_INP -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">-A LIBVIRT_INP -i virbr0 -p udp -m udp --dport 67 -j ACCEPT</span><br><span class="line">-A LIBVIRT_INP -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT</span><br><span class="line">-A LIBVIRT_OUT -o virbr0 -p udp -m udp --dport 53 -j ACCEPT</span><br><span class="line">-A LIBVIRT_OUT -o virbr0 -p tcp -m tcp --dport 53 -j ACCEPT</span><br><span class="line">-A LIBVIRT_OUT -o virbr0 -p udp -m udp --dport 68 -j ACCEPT</span><br><span class="line">-A LIBVIRT_OUT -o virbr0 -p tcp -m tcp --dport 68 -j ACCEPT</span><br><span class="line">-A LIBVIRT_FWO -s 192.168.122.0/24 -i virbr0 -j ACCEPT</span><br><span class="line">-A LIBVIRT_FWO -i virbr0 -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A LIBVIRT_FWI -d 192.168.122.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A LIBVIRT_FWI -o virbr0 -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">-A LIBVIRT_FWX -i virbr0 -o virbr0 -j ACCEPT</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">-A KUBE-FORWARD -m conntrack --ctstate INVALID -j DROP</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding rules&quot; -m mark --mark 0x4000/0x4000 -j ACCEPT</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding conntrack pod source rule&quot; -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding conntrack pod destination rule&quot; -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A KUBE-FIREWALL -m comment --comment &quot;kubernetes firewall for dropping marked packets&quot; -m mark --mark 0x8000/0x8000 -j DROP</span><br><span class="line">-A KUBE-FIREWALL ! -s 127.0.0.0/8 -d 127.0.0.0/8 -m comment --comment &quot;block incoming localnet connections&quot; -m conntrack ! --ctstate RELATED,ESTABLISHED,DNAT -j DROP</span><br><span class="line"># Warning: iptables-legacy tables present, use iptables-legacy to see them</span><br></pre></td></tr></table></figure><p>看到 iptables 里有 libvirt 的规则，问了下，这个机器是安装的过程中选的 <code>Server with GUI</code>，一般 GUI 的 centos 也会带 libvirt 相关的包，先尝试关闭所有节点上的服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable --now \</span><br><span class="line">    libvirtd-admin.socket \</span><br><span class="line">    libvirtd-ro.socket \</span><br><span class="line">    libvirtd.socket \</span><br><span class="line">    libvirtd</span><br></pre></td></tr></table></figure><p>重启后看看规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-N KUBE-PROXY-CANARY</span><br><span class="line">-N DOCKER</span><br><span class="line">-N DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-N DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-N DOCKER-USER</span><br><span class="line">-N KUBE-EXTERNAL-SERVICES</span><br><span class="line">-N KUBE-SERVICES</span><br><span class="line">-N KUBE-FORWARD</span><br><span class="line">-N KUBE-FIREWALL</span><br><span class="line">-N KUBE-KUBELET-CANARY</span><br><span class="line">-A INPUT -j KUBE-FIREWALL</span><br><span class="line">-A INPUT -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes externally-visible service portals&quot; -j KUBE-EXTERNAL-SERVICES</span><br><span class="line">-A INPUT -i cni0 -j ACCEPT</span><br><span class="line">-A FORWARD -m comment --comment &quot;kubernetes forwarding rules&quot; -j KUBE-FORWARD</span><br><span class="line">-A FORWARD -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES</span><br><span class="line">-A FORWARD -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes externally-visible service portals&quot; -j KUBE-EXTERNAL-SERVICES</span><br><span class="line">-A FORWARD -j DOCKER-USER</span><br><span class="line">-A FORWARD -j DOCKER-ISOLATION-STAGE-1</span><br><span class="line">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A FORWARD -o docker0 -j DOCKER</span><br><span class="line">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line">-A FORWARD -j ACCEPT</span><br><span class="line">-A OUTPUT -j KUBE-FIREWALL</span><br><span class="line">-A OUTPUT -m conntrack --ctstate NEW -m comment --comment &quot;kubernetes service portals&quot; -j KUBE-SERVICES</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-1 -j RETURN</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE-2 -j RETURN</span><br><span class="line">-A DOCKER-USER -j RETURN</span><br><span class="line">-A KUBE-FORWARD -m conntrack --ctstate INVALID -j DROP</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding rules&quot; -m mark --mark 0x4000/0x4000 -j ACCEPT</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding conntrack pod source rule&quot; -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A KUBE-FORWARD -m comment --comment &quot;kubernetes forwarding conntrack pod destination rule&quot; -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A KUBE-FIREWALL -m comment --comment &quot;kubernetes firewall for dropping marked packets&quot; -m mark --mark 0x8000/0x8000 -j DROP</span><br><span class="line">-A KUBE-FIREWALL ! -s 127.0.0.0/8 -d 127.0.0.0/8 -m comment --comment &quot;block incoming localnet connections&quot; -m conntrack ! --ctstate RELATED,ESTABLISHED,DNAT -j DROP</span><br><span class="line"># Warning: iptables-legacy tables present, use iptables-legacy to see them</span><br></pre></td></tr></table></figure><p>之前没注意看结尾的 <code>Warning</code>，redhat 8 换成了 <code>nf_tables</code> 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -V</span><br><span class="line">iptables v1.8.4 (nf_tables)</span><br></pre></td></tr></table></figure><p>想看下是不是 <code>legacy</code> 的 iptables 规则影响了，但是机器上并没有 <code>iptables-legacy</code> 命令，rpmfind 的网站下也没找到相关的 rpm 包，然后突发奇想，拉下 kube-proxy 的镜像看看 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull registry.aliyuncs.com/k8sxio/kube-proxy:v1.21.11</span><br><span class="line">v1.21.11: Pulling from k8sxio/kube-proxy</span><br><span class="line">20b09fbd3037: Pull complete </span><br><span class="line">89906a4ae339: Pull complete </span><br><span class="line">Digest: sha256:2dde58797be0da1f63ba386016c3b11d4447cfbf9b9bad9b72763ea24d9016f3</span><br><span class="line">Status: Downloaded newer image for registry.aliyuncs.com/k8sxio/kube-proxy:v1.21.11</span><br><span class="line">registry.aliyuncs.com/k8sxio/kube-proxy:v1.21.11</span><br><span class="line">$ docker run --rm -ti --privileged -v /run/xtables.lock:/run/xtables.lock \</span><br><span class="line">    -v /lib/modules:/lib/modules \</span><br><span class="line">    registry.aliyuncs.com/k8sxio/kube-proxy:v1.21.11 sh</span><br><span class="line"># iptables -V</span><br><span class="line">iptables v1.8.5 (legacy)</span><br><span class="line"># iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line"># iptables -t nat -S</span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-P POSTROUTING ACCEPT</span><br><span class="line"># exit</span><br></pre></td></tr></table></figure><p>规则也是对的，使用 <code>nft list ruleset </code> 看了下 nf tables 的规则也没啥问题，和 iptables 看到的是一样的。</p><h3 id="开始有头绪"><a href="#开始有头绪" class="headerlink" title="开始有头绪"></a>开始有头绪</h3><p>我们之前客户遇到过深信服的超融合和 aCloud 虚拟化平台会使用 8472&#x2F;udp 导致虚机搭建的 k8s 集群使用 flannel 的 vxlan 模式有问题，所以我们的 flannel 的 vxlan 端口改为了 8475 端口了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kube-system get cm kube-flannel-cfg -o yaml | grep -PB2 &#x27;847\d\s*$&#x27;</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;,</span><br><span class="line">        &quot;Port&quot;: 8475</span><br></pre></td></tr></table></figure><p>然后我突发奇想的改下端口试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kube-system edit cm kube-flannel-cfg</span><br><span class="line">$ kubectl -n kube-system get cm kube-flannel-cfg -o yaml | grep -PB2 &#x27;847\d\s*$&#x27;</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;,</span><br><span class="line">        &quot;Port&quot;: 8472</span><br><span class="line">$ kubectl -n kube-system get pod -o wide -l k8s-app=kube-dns</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE     IP             NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-6jwmg                         1/1     Running   2          3h54m   172.27.4.2     10.xx.xx.222   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-bxqx5                         1/1     Running   0          3h54m   172.27.0.2     10.xx.xx.201   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-k84bn                         1/1     Running   0          3h54m   172.27.5.2     10.xx.xx.224   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-pzvgq                         1/1     Running   3          3h54m   172.27.2.2     10.xx.xx.188   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-rrhql                         1/1     Running   1          3h54m   172.27.1.2     10.xx.xx.208   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-s2kn4                         1/1     Running   0          3h54m   172.27.7.2     10.xx.xx.223   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-wh8qc                         1/1     Running   0          3h54m   172.27.6.2     10.xx.xx.225   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-wqpsw                         1/1     Running   0          3h54m   172.27.3.2     10.xx.xx.221   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">$ kubectl -n kube-system delete pod -l app=flannel</span><br><span class="line">pod &quot;kube-flannel-ds-6jjkb&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-6xvwg&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-7kpvl&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-8zzbc&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-hgnzz&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-jcthk&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-l757g&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-mmnh8&quot; deleted</span><br></pre></td></tr></table></figure><p>然后发现 curl 能通( coredns 的 metrics 9153 是 http 应用，平时测跨节点通信的时候去 curl 访问下就行了，毕竟不是每台机器都有 telnet 命令的)，改回 8475 就不通:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ curl 172.27.4.2:9153</span><br><span class="line">404 page not found</span><br><span class="line">$ kubectl -n kube-system edit cm kube-flannel-cfg</span><br><span class="line">configmap/kube-flannel-cfg edited</span><br><span class="line">$ kubectl -n kube-system get cm kube-flannel-cfg -o yaml | grep -PB2 &#x27;847\d\s*$&#x27;</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;,</span><br><span class="line">        &quot;Port&quot;: 8475</span><br><span class="line">$ kubectl -n kube-system delete pod -l app=flannel</span><br><span class="line">pod &quot;kube-flannel-ds-2622n&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-2zssl&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-85kbs&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-89qp9&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-c6qgm&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-dtxzv&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-kjldq&quot; deleted</span><br><span class="line">pod &quot;kube-flannel-ds-ntfbs&quot; deleted</span><br><span class="line">$ curl 172.27.5.2:9153</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>验证了下，发现非 8472 的端口就不行，搜了下相关关键字 <code>redhat 8 vxlan exsi</code>，搜到红帽的一个文章 vxlan 的使用，给的端口也是 8472 端口。</p><p>我们加了 NetworkManager 的子配置文件不让 NetworkManager 管理 flannel.1 接口，尝试纳管后，调整 flannel 的 vxlan 端口，对比了下属性，没啥大致区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli conn show flannel.1</span><br><span class="line">vxlan.parent:                           ens192</span><br><span class="line">vxlan.id:                               1</span><br><span class="line">vxlan.local:                            10.xx.xx.222</span><br><span class="line">vxlan.remote:                           --</span><br><span class="line">vxlan.source-port-min:                  0</span><br><span class="line">vxlan.source-port-max:                  0</span><br><span class="line">vxlan.destination-port:                 8475</span><br><span class="line">vxlan.tos:                              0</span><br><span class="line">vxlan.ttl:                              0</span><br><span class="line">vxlan.ageing:                           300</span><br><span class="line">vxlan.limit:                            0</span><br><span class="line">vxlan.learning:                         no</span><br><span class="line">vxlan.proxy:                            no</span><br><span class="line">vxlan.rsc:                              no</span><br><span class="line">vxlan.l2-miss:                          no</span><br><span class="line">vxlan.l3-miss:                          no</span><br><span class="line">$ nmcli conn show flannel.1 &gt; 8475.txt</span><br><span class="line">$ nmcli conn show flannel.1 &gt; 8472.txt</span><br><span class="line">$ diff 847*.txt</span><br><span class="line">2c2</span><br><span class="line">&lt; connection.uuid:                        7da6bb14-a551-49e9-affe-2569dc04c800</span><br><span class="line">---</span><br><span class="line">&gt; connection.uuid:                        1af65851-a9a5-4899-816e-f8c064882643</span><br><span class="line">11c11</span><br><span class="line">&lt; connection.timestamp:                   1658910968</span><br><span class="line">---</span><br><span class="line">&gt; connection.timestamp:                   1658910776</span><br><span class="line">81c81</span><br><span class="line">&lt; vxlan.destination-port:                 8472</span><br><span class="line">---</span><br><span class="line">&gt; vxlan.destination-port:                 8475</span><br><span class="line">96c96</span><br><span class="line">&lt; GENERAL.UUID:                           7da6bb14-a551-49e9-affe-2569dc04c800</span><br><span class="line">---</span><br><span class="line">&gt; GENERAL.UUID:                           1af65851-a9a5-4899-816e-f8c064882643</span><br><span class="line">104,105c104,105</span><br><span class="line">&lt; GENERAL.DBUS-PATH:                      /org/freedesktop/NetworkManager/ActiveConnection/3</span><br><span class="line">&lt; GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/Settings/3</span><br><span class="line">---</span><br><span class="line">&gt; GENERAL.DBUS-PATH:                      /org/freedesktop/NetworkManager/ActiveConnection/2</span><br><span class="line">&gt; GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/Settings/2</span><br><span class="line">110,117c110,117</span><br><span class="line">&lt; IP4.ROUTE[1]:                           dst = 172.27.3.0/24, nh = 172.27.3.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[2]:                           dst = 172.27.7.0/24, nh = 172.27.7.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[3]:                           dst = 172.27.5.0/24, nh = 172.27.5.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[4]:                           dst = 172.27.6.0/24, nh = 172.27.6.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[5]:                           dst = 172.27.2.0/24, nh = 172.27.2.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[6]:                           dst = 172.27.0.0/24, nh = 172.27.0.0, mt = 0</span><br><span class="line">&lt; IP4.ROUTE[7]:                           dst = 172.27.1.0/24, nh = 172.27.1.0, mt = 0</span><br><span class="line">&lt; IP6.ADDRESS[1]:                         fe80::f8a4:b9ff:fe5d:6c9d/64</span><br><span class="line">---</span><br><span class="line">&gt; IP4.ROUTE[1]:                           dst = 172.27.0.0/24, nh = 172.27.0.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[2]:                           dst = 172.27.1.0/24, nh = 172.27.1.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[3]:                           dst = 172.27.2.0/24, nh = 172.27.2.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[4]:                           dst = 172.27.3.0/24, nh = 172.27.3.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[5]:                           dst = 172.27.5.0/24, nh = 172.27.5.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[6]:                           dst = 172.27.6.0/24, nh = 172.27.6.0, mt = 0</span><br><span class="line">&gt; IP4.ROUTE[7]:                           dst = 172.27.7.0/24, nh = 172.27.7.0, mt = 0</span><br><span class="line">&gt; IP6.ADDRESS[1]:                         fe80::60f1:eeff:fe77:1633/64</span><br><span class="line">119,120c119,120</span><br><span class="line">&lt; IP6.ROUTE[1]:                           dst = ff00::/8, nh = ::, mt = 256, table=255</span><br><span class="line">&lt; IP6.ROUTE[2]:                           dst = fe80::/64, nh = ::, mt = 256</span><br><span class="line">---</span><br><span class="line">&gt; IP6.ROUTE[1]:                           dst = fe80::/64, nh = ::, mt = 256</span><br><span class="line">&gt; IP6.ROUTE[2]:                           dst = ff00::/8, nh = ::, mt = 256, table=255</span><br></pre></td></tr></table></figure><h3 id="对照组对比"><a href="#对照组对比" class="headerlink" title="对照组对比"></a>对照组对比</h3><p>最开始 redhat8.4 的适配任务应该是分配给我的，我手上在忙其他项目事情，分配给了另一个同事。他说他在武汉的 exsi 上的 redhat8.4 搞的跨节点没问题。</p><p>我上去看了下确实，有问题的这个虚机所在的 exsi 是在珠海，武汉这个虚机是 <code>minimal install</code> 的，然后让几个人一起，搞了个对照组。</p><p>系统的镜像都是一样的 redhat 8.4 ，安装类型为 gui 和 minimal :</p><table><thead><tr><th align="left">类型</th><th align="center">exsi地区+版本</th><th align="center">pod 跨节点通信正常？</th><th align="center">flannel vxlan的端口单独改为8472才通</th></tr></thead><tbody><tr><td align="left">gui</td><td align="center">珠海6.7.0</td><td align="center">x</td><td align="center">yes</td></tr><tr><td align="left">minimal</td><td align="center">珠海6.7.0</td><td align="center">x</td><td align="center">yes</td></tr><tr><td align="left">gui</td><td align="center">武汉6.0.0</td><td align="center">✔</td><td align="center">不需要</td></tr><tr><td align="left">minimal</td><td align="center">武汉6.0.0</td><td align="center">✔</td><td align="center">不需要</td></tr></tbody></table><p>而且四个场景的 vxlan 模块信息是一模一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ modinfo vxlan</span><br><span class="line">filename:       /lib/modules/4.18.0-305.el8.x86_64/kernel/drivers/net/vxlan.ko.xz</span><br><span class="line">alias:          rtnl-link-vxlan</span><br><span class="line">description:    Driver for VXLAN encapsulated traffic</span><br><span class="line">author:         Stephen Hemminger &lt;stephen@networkplumber.org&gt;</span><br><span class="line">version:        0.1</span><br><span class="line">license:        GPL</span><br><span class="line">rhelversion:    8.4</span><br><span class="line">srcversion:     C4B9CCC8F1BB3F9CDEEDACF</span><br><span class="line">depends:        udp_tunnel,ip6_udp_tunnel</span><br><span class="line">intree:         Y</span><br><span class="line">name:           vxlan</span><br><span class="line">vermagic:       4.18.0-305.el8.x86_64 SMP mod_unload modversions </span><br><span class="line">sig_id:         PKCS#7</span><br><span class="line">signer:         Red Hat Enterprise Linux kernel signing key</span><br><span class="line">sig_key:        0D:85:6D:FE:90:3F:7B:A0:D7:04:19:55:4C:9C:D5:EE:1D:42:8D:B6</span><br><span class="line">sig_hashalgo:   sha256</span><br><span class="line">signature:      93:09:AA:FE:BA:D1:10:CD:12:8F:2A:F9:43:D4:50:36:4F:36:51:0C:</span><br><span class="line">4B:BD:3D:89:65:1F:5D:7E:24:EE:4E:90:8B:38:99:24:EE:0B:31:4F:</span><br><span class="line">E5:DC:57:C8:60:4A:6F:FE:43:27:43:B1:EC:A4:A1:A4:9F:47:65:91:</span><br><span class="line">0C:6D:6D:E0:A8:4C:97:95:75:27:D5:B0:CD:0A:77:40:A9:A6:ED:E6:</span><br><span class="line">C9:72:26:23:07:4D:B7:D3:B8:B9:AF:C5:18:AF:EA:F8:B7:6C:90:B9:</span><br><span class="line">FD:F1:8F:CE:73:A8:1F:92:F2:FA:A7:5E:53:BE:D6:64:55:06:5B:54:</span><br><span class="line">29:DB:E3:2E:CC:DF:CF:1C:7D:DC:53:CB:92:38:BC:42:7D:89:1F:21:</span><br><span class="line">0A:47:07:63:E6:B9:C6:1E:26:C5:4E:B2:9A:9F:DB:0D:86:31:EE:2A:</span><br><span class="line">DA:87:AE:16:AA:6F:0D:B3:11:0B:44:FD:5E:11:82:8E:83:9D:E8:4F:</span><br><span class="line">2E:1B:A9:AC:66:2D:12:11:43:B0:9B:1E:2C:1C:8B:8B:80:B8:16:9B:</span><br><span class="line">8C:A3:C8:73:C5:D7:0F:E7:B5:F7:30:7D:57:CA:CE:74:3C:A2:DB:9F:</span><br><span class="line">D6:ED:F3:A4:EE:D7:D2:FF:F0:46:1E:18:52:92:A5:6E:BA:30:7F:18:</span><br><span class="line">BB:1C:49:A1:03:05:87:A2:6A:FE:07:8A:CE:14:1F:EE:C9:82:84:B4:</span><br><span class="line">CC:2B:2E:BF:21:BF:78:7B:39:01:1C:EE:C4:48:7B:9C:BA:8C:3B:D3:</span><br><span class="line">75:B5:1D:5A:57:9F:C6:FA:D7:2C:C3:30:49:3E:94:FC:1E:C2:5E:AA:</span><br><span class="line">F4:D8:80:46:46:C1:BF:3C:80:54:46:78:5F:4D:A5:93:41:65:CC:E4:</span><br><span class="line">ED:78:0E:28:2A:DF:EE:C4:8E:EF:25:82:9C:28:07:7D:C1:95:AA:AD:</span><br><span class="line">E8:5C:A7:CC:91:22:03:BB:1F:AD:87:E9:AD:E3:DE:4B:6C:33:A2:FD:</span><br><span class="line">15:E3:41:3B:C5:A7:84:89:25:2F:B7:1B:EF:1F:6A:D6:FE:A6:36:D6:</span><br><span class="line">19:1E:0F:06</span><br><span class="line">parm:           udp_port:Destination UDP port (ushort)</span><br><span class="line">parm:           log_ecn_error:Log packets received with corrupted ECN (bool)</span><br></pre></td></tr></table></figure><p>exsi 的 DVS 虚拟交换机开混杂模式了（中间还把几台机器迁移到同一台 exsi 上，可是还是有问题）还是不行，询问了内部的 exsi 人员，他让我看看是不是 NSX 影响的，给我发了个文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://kb.vmware.com/s/article/2149996?lang=zh_cn 这个文章说：</span><br><span class="line">从 NSX 6.2.4 开始，默认 VXLAN 端口为 4789，这是由 IANA 分配的标准端口。在 NSX 6.2.4 之前的版本中，默认 VXLAN UDP 端口号为 8472</span><br></pre></td></tr></table></figure><p>对于 NSX 完全懵逼，然后找了个 vmware 的大佬 spark-go 咨询了下，大佬帮我看了下我们的 exsi 上没有 NSX。大佬帮我搜索了下，搜到一个 redhat 发布的 (kernel bug RHSA-2021:2570)[<a href="https://access.redhat.com/errata/RHSA-2021:2570]">https://access.redhat.com/errata/RHSA-2021:2570]</a> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ESXi][RHEL-8] VMXNET3 v4 causes invalid checksums of inner packets of VXLAN tunnel (BZ#1960702)</span><br></pre></td></tr></table></figure><p>其实昨天我搜素结果里有这个文章的，但是没有点进去看，光去看第一个 redhat 的使用 libvirtd 和 vxlan 的文档了。<code>vmxnet3</code> 是 exsi 给虚机的虚拟网卡，看 bug 描述和内核版本对比了下，就应该是这个问题了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux localhost.localdomain 4.18.0-305.el8.x86_64 #1 SMP Thu Apr 29 08:54:30 EDT 2021 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>但是找不到下载内核的地方，redhat 使用 yum 要注册，中间试过安装 centos 8 的内核后起不来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ grubby --info DEFAULT</span><br><span class="line">index=0</span><br><span class="line">kernel=&quot;/boot/vmlinuz-4.18.0-348.7.1.el8_5.x86_64&quot;</span><br><span class="line">args=&quot;ro crashkernel=auto resume=/dev/mapper/rhel-swap rd.lvm.lv=rhel/root rd.lvm.lv=rhel/swap rhgb quiet $tuned_params&quot;</span><br><span class="line">root=&quot;/dev/mapper/rhel-root&quot;</span><br><span class="line">initrd=&quot;/boot/initramfs-4.18.0-348.7.1.el8_5.x86_64.img $tuned_initrd&quot;</span><br><span class="line">title=&quot;CentOS Linux (4.18.0-348.7.1.el8_5.x86_64) 8&quot;</span><br><span class="line">id=&quot;d0b79c361c3d4f728f1f9b86bb54acd5-4.18.0-348.7.1.el8_5.x86_64&quot;</span><br></pre></td></tr></table></figure><p>然后使用简单粗暴的办法，既然触发的 checksum 错误，关闭 flannel.1 的校验看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl -n kube-system get cm kube-flannel-cfg -o yaml | grep -PB2 &#x27;847\d\s*$&#x27;</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;,</span><br><span class="line">        &quot;Port&quot;: 8475</span><br><span class="line">$ curl 172.27.1.2:9153 </span><br><span class="line">^C</span><br><span class="line">$ /sbin/ethtool -K flannel.1 tx-checksum-ip-generic off</span><br><span class="line">Actual changes:</span><br><span class="line">tx-checksum-ip-generic: off</span><br><span class="line">tx-tcp-segmentation: off [not requested]</span><br><span class="line">tx-tcp-ecn-segmentation: off [not requested]</span><br><span class="line">tx-tcp-mangleid-segmentation: off [not requested]</span><br><span class="line">tx-tcp6-segmentation: off [not requested]</span><br><span class="line">$ curl 172.27.1.2:9153 </span><br><span class="line">404 page not found</span><br></pre></td></tr></table></figure><p>看了下珠海的虚机网络适配器类型就是 <code>VMXNET 3</code> ，武汉的是 <code>E1000</code>。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://access.redhat.com/errata/RHSA-2021:2570">RHSA-2021:2570</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天处理的一个问题，exsi 上 redhat8.4 搭建 k8s 环境，使用 flannel vxlan 模式，pod 的网络表现得非常异常&lt;/p&gt;</summary>
    
    
    
    
    <category term="exsi" scheme="http://zhangguanzhang.github.io/tags/exsi/"/>
    
    <category term="redhat8.4" scheme="http://zhangguanzhang.github.io/tags/redhat8-4/"/>
    
    <category term="vxlan" scheme="http://zhangguanzhang.github.io/tags/vxlan/"/>
    
  </entry>
  
  <entry>
    <title>k8s pod 没有 IP ，报错 failed to read pod IP from plugin/docker</title>
    <link href="http://zhangguanzhang.github.io/2022/07/12/pod-no-ip-addr/"/>
    <id>http://zhangguanzhang.github.io/2022/07/12/pod-no-ip-addr/</id>
    <published>2022-07-12T19:11:20.000Z</published>
    <updated>2022-07-12T19:11:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>有事回到工位上，还没坐下同事就过来喊我，让我帮忙看个客户的生产环境问题，大致就是客户为了搞安全，开了 ipset，然后发现业务受影响了。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -o wide | grep -v Runn</span><br><span class="line">NAME                                                  READY   STATUS             RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">xxxx-privilege-r97z4                                  0/1     CrashLoopBackOff   51         107m    &lt;none&gt;        10.x.xx.xx   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd1-10.x.xx.xx                                      0/1     CrashLoopBackOff   61         44m     &lt;none&gt;        10.x.xx.xx   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">promtail-7jk8j                                        0/1     CrashLoopBackOff   51         107m    &lt;none&gt;        10.x.xx.xx   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">zookeeper-1-10.x.xx.xx                                0/1     CrashLoopBackOff   83         107m    &lt;none&gt;        10.x.xx.xx   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>看下 etcd 日志，谁让 etcd 是 golang 写的，golang 服务的日志比 java 的日志更清晰 😉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a |grep etcd | head -n 3</span><br><span class="line">a01d26e5668a        mirrorgooglecontainers/pause-amd64:3.1                                                                       &quot;/pause&quot;                 1 second ago         Created                                                                 k8s_POD_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_3182</span><br><span class="line">2434b43b2026        mirrorgooglecontainers/pause-amd64:3.1                                                                       &quot;/pause&quot;                 3 seconds ago        Exited (0) 1 second ago                                                 k8s_POD_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_3181</span><br><span class="line">8e434211ee24        b5d94f31df3a                                                                                                 &quot;/app/etcd --name=et…&quot;   5 seconds ago        Exited (1) 4 seconds ago                                                k8s_etcd1_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_62</span><br><span class="line">$ docker logs 8e43</span><br><span class="line">2022-07-12 09:11:45.659987 W | pkg/flags: unrecognized environment variable ETCD_PORT_2379_TCP_PORT=2379</span><br><span class="line">2022-07-12 09:11:45.660118 W | pkg/flags: unrecognized environment variable ETCD_SERVICE_PORT_ETCD_CLIENT_2379=2379</span><br><span class="line">2022-07-12 09:11:45.660149 W | pkg/flags: unrecognized environment variable ETCD_PORT_2379_TCP_ADDR=xxx.xx.145.219</span><br><span class="line">2022-07-12 09:11:45.660161 W | pkg/flags: unrecognized environment variable ETCD_PORT_2379_TCP_PROTO=tcp</span><br><span class="line">2022-07-12 09:11:45.660180 W | pkg/flags: unrecognized environment variable ETCD_SERVICE_HOST=xxx.xx.145.219</span><br><span class="line">2022-07-12 09:11:45.660202 W | pkg/flags: unrecognized environment variable ETCD_PORT_2379_TCP=tcp://xxx.xx.145.219:2379</span><br><span class="line">2022-07-12 09:11:45.660227 W | pkg/flags: unrecognized environment variable ETCD_SERVICE_PORT=2379</span><br><span class="line">2022-07-12 09:11:45.660322 W | pkg/flags: unrecognized environment variable ETCD_PORT=tcp://xxx.xx.145.219:2379</span><br><span class="line">2022-07-12 09:11:45.660376 E | etcdmain: error verifying flags, expected IP in URL for binding (http://:2380). See &#x27;etcd --help&#x27;.</span><br></pre></td></tr></table></figure><p>日志报错没有 IP，看了下 flannel 的 pod 都是正常运行的，看下 kubelet 日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -xe --no-pager -u kubelet</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: with error: exit status 1</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: I0712 17:13:31.384403     761 kubelet.go:1933] SyncLoop (PLEG): &quot;xxxx-privilege-r97z4_default(3b3e512c-61e4-4e0f-ae19-217f9d23bdce)&quot;, event: &amp;pleg.PodLifecycleEvent&#123;ID:&quot;3b3e512c-61e4-4e0f-ae19-217f9d23bdce&quot;, Type:&quot;ContainerStarted&quot;, Data:&quot;9584c21ffd29fcc723f9855b3235e652058c8f8dd66bcc1539fd8d213c059482&quot;&#125;</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: I0712 17:13:31.385046     761 kuberuntime_manager.go:434] Sandbox for pod &quot;xxxx-privilege-r97z4_default(3b3e512c-61e4-4e0f-ae19-217f9d23bdce)&quot; has no IP address.  Need to start a new one</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: W0712 17:13:31.398508     761 docker_sandbox.go:384] failed to read pod IP from plugin/docker: NetworkPlugin cni failed on the status hook for pod &quot;zookeeper-1-10.x.xx.xx_default&quot;: Unexpected command output nsenter: failed to execute ip: No such file or directory</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: with error: exit status 1</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: I0712 17:13:31.418775     761 kubelet.go:1933] SyncLoop (PLEG): &quot;zookeeper-1-10.x.xx.xx_default(9ede2a2352bf8cd0cf86767166391721)&quot;, event: &amp;pleg.PodLifecycleEvent&#123;ID:&quot;9ede2a2352bf8cd0cf86767166391721&quot;, Type:&quot;ContainerStarted&quot;, Data:&quot;1f7169d3e335fd0e79c717290d8ac42de5d089dae5fa4647a13ebe53b8611c88&quot;&#125;</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: I0712 17:13:31.419167     761 kuberuntime_manager.go:434] Sandbox for pod &quot;zookeeper-1-10.x.xx.xx_default(9ede2a2352bf8cd0cf86767166391721)&quot; has no IP address.  Need to start a new one</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: W0712 17:13:31.430948     761 docker_sandbox.go:384] failed to read pod IP from plugin/docker: NetworkPlugin cni failed on the status hook for pod &quot;xxxx-gateway-7dd6cdc85d-6hsz7_default&quot;: Unexpected command output nsenter: failed to execute ip: No such file or directory</span><br><span class="line">Jul 12 17:13:31 xxx.xxx.xxx kubelet[761]: with error: exit status 1</span><br></pre></td></tr></table></figure><p>看报错意思是执行 ip netns 报错，看了下，果然没 ip 命令了，系统是 centos 7.9，需要安装 <code>iproute</code> 包，在 <a href="http://www.rpmfind.net/">http://www.rpmfind.net/</a> 上下了个 centos7 的 rpm 后让人传上去安装后就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a |grep etcd  | head -n 5</span><br><span class="line">52b7b3a6a5b2        b5d94f31df3a                                                                                                 &quot;/app/etcd --name=et…&quot;   30 seconds ago       Up 29 seconds                                                         k8s_etcd1_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_68</span><br><span class="line">93f00c95f7ba        mirrorgooglecontainers/pause-amd64:3.1                                                                       &quot;/pause&quot;                 33 seconds ago       Up 32 seconds                                                         k8s_POD_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_3378</span><br><span class="line">fb75458a53b8        mirrorgooglecontainers/pause-amd64:3.1                                                                       &quot;/pause&quot;                 36 seconds ago       Exited (0) 34 seconds ago                                             k8s_POD_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_3377</span><br><span class="line">e291ec9ed471        mirrorgooglecontainers/pause-amd64:3.1                                                                       &quot;/pause&quot;                 39 seconds ago       Exited (0) 37 seconds ago                                             k8s_POD_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_3376</span><br><span class="line">e6eeed41ef31        b5d94f31df3a                                                                                                 &quot;/app/etcd --name=et…&quot;   3 minutes ago        Exited (1) 3 minutes ago                                              k8s_etcd1_etcd1-10.x.xx.xx_default_90bb7a6b237dd87a85e03ed7981e90f3_67</span><br></pre></td></tr></table></figure><p>按理说不应该有人去卸载它，是不是有其他依赖给它卸载了，看下日志果然：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ grep -C 20  iprout /var/log/yum.log</span><br><span class="line">Jul 04 22:43:24 Erased: plymouth-0.8.9-0.34.20140113.el7.centos.x86_64</span><br><span class="line">Jul 04 22:43:24 Erased: plymouth-scripts-0.8.9-0.34.20140113.el7.centos.x86_64</span><br><span class="line">Jul 04 22:43:24 Erased: iptables-services-1.4.21-35.el7.x86_64</span><br><span class="line">Jul 04 22:43:25 Erased: kbd-1.15.5-15.el7.x86_64</span><br><span class="line">Jul 04 22:43:25 Erased: kexec-tools-2.0.15-51.el7_9.3.x86_64</span><br><span class="line">Jul 04 22:43:25 Erased: dracut-network-033-572.el7.x86_64</span><br><span class="line">Jul 04 22:43:25 Erased: 12:dhclient-4.2.5-82.el7.centos.x86_64</span><br><span class="line">Jul 04 22:43:26 Erased: initscripts-9.49.53-1.el7_9.1.x86_64</span><br><span class="line">Jul 04 22:43:27 Erased: open-vm-tools-11.0.5-3.el7_9.3.x86_64</span><br><span class="line">Jul 04 22:43:27 Erased: iproute-4.11.0-30.el7.x86_64</span><br><span class="line">Jul 04 22:43:27 Erased: iptables-1.4.21-35.el7.x86_64</span><br><span class="line">Jul 04 22:44:33 Installed: iptables-1.4.21-35.el7.x86_64</span><br><span class="line">$ uptime -s</span><br><span class="line">2022-07-12 13:37:19</span><br></pre></td></tr></table></figure><p>上面的 <code>-C 20</code> 就这几行，说明日志文件内容就这么点，看就是客户之前自己去安装 iptables 的那个一次性导入规则服务导致的，客户自己的锅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;有事回到工位上，还没坐下同事就过来喊我，让我帮忙看个客户的生产环境问题，大致就是客户为了搞安全，开了 ipset，然后发现业务受影响了。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker info无warning，iptables规则正常，宿主机就是不转发</title>
    <link href="http://zhangguanzhang.github.io/2022/06/03/container-not-forward/"/>
    <id>http://zhangguanzhang.github.io/2022/06/03/container-not-forward/</id>
    <published>2022-06-03T15:18:30.000Z</published>
    <updated>2022-06-03T15:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>06、02 凌晨被喊醒帮忙看问题，客户侧重启部分 k8s 节点机器后，业务的部分接口出现问题，环境无法向日葵之类的远程，只能发命令后，现场人员执行。</p><h3 id="具体现象"><a href="#具体现象" class="headerlink" title="具体现象"></a>具体现象</h3><p>业务 pod 日志看是无法连到非 k8s 机器上的 mysql 的 3306， <code>docker info</code> 命令无 warning 也就是代表下面的几个内核参数正常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>查看 <code>iptables -S</code> 规则没有优先级高的 drop 之类的规则，默认 FORWARD Chain 的最后行为规则也不是 DROP。因为用了 cni plugins ，pod 的容器都是挂在 cni0 下的，可以 -i 插入优先放行的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables --<span class="built_in">wait</span> -I INPUT -i cni0 -j ACCEPT</span><br></pre></td></tr></table></figure><p>让现场插入了还是不行，然后让看看安全软件，<code>ps aux | grep xxx</code> 关键字后找到了个 <code>titanagent</code>，搜了下是青藤云安全，之前遇到过安全软件拦截 pod 的网络请求，凌晨无法找到相关青藤云人员，暂时把几个节点 <code>drain</code> 了 </p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>06&#x2F;03 号客户找人卸载了青藤云，发现还是不行，提供了远程，我上去看。</p><h3 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h3><p>查了下，发现重启的节点上的容器，无法访问非宿主机的ip和端口，ping 另一个 k8s 主机都不行，用 tcpdump 抓包发现宿主机没转发，然后用 docker 起个默认桥接网络的试下也是不行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -ti --entrypoint bash xxx telnet xxx 3306</span><br></pre></td></tr></table></figure><p>然后看了下 iptables 状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -vnL -w | grep -A10 FORWARD</span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 KUBE-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */</span><br><span class="line">    0     0 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes service portals */</span><br><span class="line">    0     0 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  *      *       172.27.0.0/16        0.0.0.0/0           </span><br><span class="line">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            172.27.0.0/16</span><br></pre></td></tr></table></figure><p>果然没转发，仔细看是所有的都没转发，思考了下是不是客户 <code>/etc/sysctl.conf</code> 里改了啥 docker info 没检测到的转发相关的内核参数，然后重启后就没转发的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/sysctl.conf /etc/sysctl.conf.bak</span><br><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>看了下参数很多，就直接粗暴的处理了，备份文件，然后二分排除。第一行到中间注释，重启后上面的 docker 命令测试，最后找到是下面这个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.default.forwarding=0</span><br></pre></td></tr></table></figure><h3 id="net-ipv4-conf-default-forwarding-的测试"><a href="#net-ipv4-conf-default-forwarding-的测试" class="headerlink" title="net.ipv4.conf.default.forwarding 的测试"></a>net.ipv4.conf.default.forwarding 的测试</h3><p>其实问题还没完，我试了下如果设置为0重启，然后起容器了，然后设置为1还是不行，然后找个干净的环境来下面步骤复现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &#x27;/net.ipv4.conf.default.forwarding/s#1#0#&#x27; /etc/sysctl.conf</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run --rm -tid --name test --entrypoint bash nicolaka/netshoot</span><br><span class="line">timeout 3 docker exec test ping -c 1 114.114.114.114</span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.conf.default.forwarding=1</span><br><span class="line">timeout 3 docker exec test ping -c 1 114.114.114.114</span><br></pre></td></tr></table></figure><p>然后看下参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -a |&amp; grep forwarding </span><br><span class="line">net.ipv4.conf.all.forwarding = 1</span><br><span class="line">net.ipv4.conf.all.mc_forwarding = 0</span><br><span class="line">net.ipv4.conf.default.forwarding = 1</span><br><span class="line">net.ipv4.conf.default.mc_forwarding = 0</span><br><span class="line">net.ipv4.conf.docker0.forwarding = 0</span><br><span class="line">net.ipv4.conf.docker0.mc_forwarding = 0</span><br><span class="line">net.ipv4.conf.eth0.forwarding = 1</span><br><span class="line">net.ipv4.conf.eth0.mc_forwarding = 0</span><br><span class="line">net.ipv4.conf.lo.forwarding = 1</span><br><span class="line">net.ipv4.conf.lo.mc_forwarding = 0</span><br><span class="line">net.ipv4.conf.veth10d8150.forwarding = 0</span><br><span class="line">net.ipv4.conf.veth10d8150.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.all.forwarding = 0</span><br><span class="line">net.ipv6.conf.all.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.default.forwarding = 0</span><br><span class="line">net.ipv6.conf.default.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.docker0.forwarding = 0</span><br><span class="line">net.ipv6.conf.docker0.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.eth0.forwarding = 0</span><br><span class="line">net.ipv6.conf.eth0.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.lo.forwarding = 0</span><br><span class="line">net.ipv6.conf.lo.mc_forwarding = 0</span><br><span class="line">net.ipv6.conf.veth10d8150.forwarding = 0</span><br><span class="line">net.ipv6.conf.veth10d8150.mc_forwarding = 0</span><br></pre></td></tr></table></figure><p>桥接工具看下，因为只有 docker 并且上面一个容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.0242b6e42b7fnoveth10d8150</span><br></pre></td></tr></table></figure><p>把容器的网卡所在的网桥 docker0 转发开启下再试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w net.ipv4.conf.docker0.forwarding=1</span><br><span class="line">$ timeout 3 docker exec test ping -c 1 114.114.114.114</span><br><span class="line">PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=1 ttl=67 time=17.5 ms</span><br><span class="line"></span><br><span class="line">--- 114.114.114.114 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 17.500/17.500/17.500/0.000 ms</span><br></pre></td></tr></table></figure><p>所以如果是关闭后开机，需要设置总开关和相关的网桥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.default.forwarding=1</span><br><span class="line">net.ipv4.conf.docker0.forwarding=1</span><br><span class="line">net.ipv4.conf.cni0.forwarding=1</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个参数不知道为啥 docker info 不检查它</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;06、02 凌晨被喊醒帮忙看问题，客户侧重启部分 k8s 节点机器后，业务的部分接口出现问题，环境无法向日葵之类的远程，只能发命令后，现场人</summary>
      
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="kernal" scheme="http://zhangguanzhang.github.io/tags/kernal/"/>
    
  </entry>
  
  <entry>
    <title>低版本内核下容器内部无法使用 unix socket 通信</title>
    <link href="http://zhangguanzhang.github.io/2022/05/13/overlayfs-unix-socket/"/>
    <id>http://zhangguanzhang.github.io/2022/05/13/overlayfs-unix-socket/</id>
    <published>2022-05-13T14:18:30.000Z</published>
    <updated>2022-05-13T14:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>最近几次遇到的机器上所有容器内，都无法使用 unix:&#x2F;&#x2F; 去通信的的一个问题。</p><h2 id="遇到的几个错误现象"><a href="#遇到的几个错误现象" class="headerlink" title="遇到的几个错误现象"></a>遇到的几个错误现象</h2><p>最开始是我们部署容器内无法使用 ansible 去操作其他机器，后面是该机器上所有容器内的 supervisorctl 无法通过 unix sock 连接 supervisord </p><h3 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h3><p>报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">failt: [10.x.x.x]: UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Data could not be sent to remote host \&quot;10.x.x.x\&quot;. Make sure this host can be reached over ssh: Control socket connect (/tmp/ansible-ssh-10.x.x.x-22-root): Connection refused</span><br><span class="line">    Failed to connect to new control master&quot;, &quot;unreachable&quot;: true&#125;</span><br></pre></td></tr></table></figure><p>ansible 的命令加上 <code>-vvvv</code> 后复制 ssh 的所有参数执行，然后发现去掉 socket 的参数就能连上，以前遇到过这个问题，当时搜到 issue 后是改 ansible.cfg 把 ssh 的持久化 socket 路径换了下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ssh_connection]</span><br><span class="line">#control_path = /tmp/ansible-ssh-%%h-%%p-%%r</span><br><span class="line">control_path = /dev/shm/cp%%h-%%p-%%r</span><br></pre></td></tr></table></figure><h3 id="supervisor-的-unix-x2F-x2F-refused"><a href="#supervisor-的-unix-x2F-x2F-refused" class="headerlink" title="supervisor 的 unix:&#x2F;&#x2F; refused"></a>supervisor 的 unix:&#x2F;&#x2F; refused</h3><p>然后昨天我们开发机器上，发现有个业务容器内不能用 <code>supervisorctl</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ supervisorctl status </span><br><span class="line">unix:///var/run/supervisor.sock refused connection</span><br></pre></td></tr></table></figure><p>然后今天我们的一个部署容器发现也是这样，大致分析了下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启动参数</span><br><span class="line">#/usr/local/bin/python3.7 /usr/local/bin/supervisord -c /root/xxx/supervisord.conf.containd --nodaemon</span><br><span class="line"># 指定配置文件还是一样</span><br><span class="line">$ supervisorctl -c   /root/xxx/supervisord.conf.containd status</span><br><span class="line">unix:///var/run/supervisor.sock refused connection</span><br><span class="line"></span><br><span class="line"># socket 文件存在，权限也对</span><br><span class="line">ls -l /var/run/supervisor.sock </span><br><span class="line">srw-rw---- 1 root root 0 5月  13 11:32 /var/run/supervisor.sock</span><br></pre></td></tr></table></figure><p>配置里相关的都是对的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br></pre></td></tr></table></figure><p>然后对比另一个我自己的正常的 CentOS 机器上部署容器内部的 supervisor 配置文件发现是一模一样的，断定和配置无关，然后搜了下发现是内核问题。低版本的 overlayfs 内部使用 unix sock 文件通信会出问题，机器相关信息为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/os-release</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;16.04 LTS (Xenial Xerus)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 16.04 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;16.04&quot;</span><br><span class="line">HOME_URL=&quot;http://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">UBUNTU_CODENAME=xenial</span><br><span class="line">$ uname -a</span><br><span class="line">Linux xxx 4.4.0-21-generic #37-Ubuntu ....</span><br></pre></td></tr></table></figure><h2 id="解决容器内使用-sock-文件通信的问题"><a href="#解决容器内使用-sock-文件通信的问题" class="headerlink" title="解决容器内使用 sock 文件通信的问题"></a>解决容器内使用 sock 文件通信的问题</h2><p>ubuntu 官方说这个在内核 <code>4.4.0-36.55</code> 修复了，需要升级内核，先说下升级内核的步骤</p><h3 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg --get-selections |grep -E &#x27;^linux&#x27;</span><br><span class="line">linux-baseinstall</span><br><span class="line">linux-firmwareinstall</span><br><span class="line">linux-genericinstall</span><br><span class="line">linux-headers-4.4.0-21install</span><br><span class="line">linux-headers-4.4.0-21-genericinstall</span><br><span class="line">linux-headers-genericinstall</span><br><span class="line">linux-image-4.4.0-21-genericinstall</span><br><span class="line">linux-image-extra-4.4.0-21-genericinstall</span><br><span class="line">linux-image-genericinstall</span><br></pre></td></tr></table></figure><p>查找指定内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache search linux| grep 4.4.0-36</span><br><span class="line">linux-cloud-tools-4.4.0-36 - Linux kernel version specific cloud tools for version 4.4.0-36</span><br><span class="line">linux-cloud-tools-4.4.0-36-generic - Linux kernel version specific cloud tools for version 4.4.0-36</span><br><span class="line">linux-cloud-tools-4.4.0-36-lowlatency - Linux kernel version specific cloud tools for version 4.4.0-36</span><br><span class="line">linux-headers-4.4.0-36 - Header files related to Linux kernel version 4.4.0</span><br><span class="line">linux-headers-4.4.0-36-generic - Linux kernel headers for version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-headers-4.4.0-36-lowlatency - Linux kernel headers for version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-4.4.0-36-generic - Linux kernel image for version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-4.4.0-36-lowlatency - Linux kernel image for version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-image-extra-4.4.0-36-generic - Linux kernel extra modules for version 4.4.0 on 64 bit x86 SMP</span><br><span class="line">linux-signed-image-4.4.0-36-generic - Signed kernel image generic</span><br><span class="line">linux-signed-image-4.4.0-36-lowlatency - Signed kernel image lowlatency</span><br><span class="line">linux-tools-4.4.0-36 - Linux kernel version specific tools for version 4.4.0-36</span><br><span class="line">linux-tools-4.4.0-36-generic - Linux kernel version specific tools for version 4.4.0-36</span><br><span class="line">linux-tools-4.4.0-36-lowlatency - Linux kernel version specific tools for version 4.4.0-36</span><br></pre></td></tr></table></figure><p>安装指定内核：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y linux-&#123;headers,image&#125;-4.4.0-36-generic</span><br></pre></td></tr></table></figure><p>可以看下 <code>/boot/grub/grub.cfg</code> 里第一个 menuentry 段的 <code>initrd</code> 是否指定到新的内核了，整体开机 grub 菜单可以通过下面命令查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ grep -Ei &#x27;submenu|menuentry &#x27; /boot/grub/grub.cfg | sed -re &quot;s/(.? )&#x27;([^&#x27;]+)&#x27;.*/\1 \2/&quot;</span><br><span class="line">menuentry  Ubuntu</span><br><span class="line">submenu  Advanced options for Ubuntu</span><br><span class="line">menuentry  Ubuntu, with Linux 4.4.0-36-generic</span><br><span class="line">menuentry  Ubuntu, with Linux 4.4.0-36-generic (recovery mode)</span><br><span class="line">menuentry  Ubuntu, with Linux 4.4.0-21-generic</span><br><span class="line">menuentry  Ubuntu, with Linux 4.4.0-21-generic (recovery mode)</span><br></pre></td></tr></table></figure><p>如果想开机启动到 submenu 的 第三个，可以改文件 <code>/etc/default/grub</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEFAULT=&quot;1&gt;2&quot;</span><br></pre></td></tr></table></figure><p>前面是外层菜单，后面是子菜单，0 开始，更新下 grub:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>重启后进入发现好了。</p><h3 id="不升级内核的办法"><a href="#不升级内核的办法" class="headerlink" title="不升级内核的办法"></a>不升级内核的办法</h3><p>就是容器内的 sock 文件存放到容器内部的 <code>/dev/shm/</code> 里即可。</p><h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p>Centos 7 没问题是因为 centos 的内核是 backport 的，可以理解为 centos 的 overlay 内核模块实际上是 4.10 内核代码移植的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Supervisor/supervisor/issues/654">https://github.com/Supervisor/supervisor/issues/654</a></li><li><a href="https://github.com/moby/moby/issues/12080">https://github.com/moby/moby/issues/12080</a></li><li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1214500">https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1214500</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;最近几次遇到的机器上所有容器内，都无法使用 unix:&amp;#x2F;&amp;#x2F; 去通信的的一个问题。&lt;/p&gt;
&lt;h2 id=&quot;遇到的几个错误</summary>
      
    
    
    
    
    <category term="overlay" scheme="http://zhangguanzhang.github.io/tags/overlay/"/>
    
    <category term="kernal" scheme="http://zhangguanzhang.github.io/tags/kernal/"/>
    
  </entry>
  
  <entry>
    <title>nfc 折腾笔记，ACR122U/proxmark3</title>
    <link href="http://zhangguanzhang.github.io/2022/04/23/nfc/"/>
    <id>http://zhangguanzhang.github.io/2022/04/23/nfc/</id>
    <published>2022-04-23T14:28:30.000Z</published>
    <updated>2022-04-23T14:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期折腾 nfc 相关，以后 nfc 的折腾也会更新在这个文章内</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>以前买过 ACR122U ，想着帮人门禁解密导入手环挣点外快，没想到弄不开，然后群友送了个 proxmark3（pm3）我，折腾了下，做个笔记</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><h3 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h3><p>卡片介绍，通常分为 IC 卡和 ID 卡：</p><ol><li>ID 卡一般低频，不可写入数据，只读卡号，还有 HID 卡（一些大厂工牌），卡表明有编号，里面一般是圆形线圈。</li><li>IC 卡高频，大部分可以擦写，银行，交通，门禁，饭卡，工牌之类都用使用。RFID、NFC 属于 IC 卡，线圈一般是矩形。IC 卡我们破解啥的一般是下面几种类型相关:</li></ol><table><thead><tr><th>类型</th><th>说明</th><th>频率</th><th>擦写情况</th></tr></thead><tbody><tr><td>M1</td><td>NXP Mifare系列卡, 工作在高频（13.56Mhz），全称Mifare S50，是最常见的卡，出厂固化UID</td><td>13.56Mhz</td><td>UID 部分不可擦写</td></tr><tr><td>M0</td><td>相当于M1卡的精简版，容量更小、功能更少，但价格更低</td><td>13.56Mhz</td><td>UID 部分不可擦写</td></tr><tr><td>UID</td><td>全称Mifare UID Chinese magic card，国外叫做中国魔术卡，M1卡的变异版本，使用后门指令(magic指令)，可修改UID（UID在block0分区），可以用来完整克隆M1卡的数据；但是现在新的读卡系统通过检测卡片对后门指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能（即UID防火墙系统）；</td><td>13.56Mhz</td><td>UID 部分可擦写</td></tr><tr><td>CUID</td><td>为了避开UID防火墙系统，CUID卡应运而生，取消响应后门指令(magic指令)，可修改UID，是目前市场上最常用的复制卡；但是现在貌似也有 CUID 卡的防火墙</td><td>13.56Mhz</td><td>UID 部分可擦写</td></tr><tr><td>FUID</td><td>FUID卡只能写一次UID，写完之后自动固化UID所在分区，就等同M1卡，目前任何防火墙系统都无法屏蔽，复制的卡几乎和原卡一模一样；</td><td>13.56Mhz</td><td>可擦写一次</td></tr><tr><td>UFUID</td><td>集UID卡和FUID卡的优点于一身，使用后门指令，可修改UID，再手动锁卡，变成M1卡。可先反复读写UID，确认数据无误，手动锁卡变成M1，解决了UID卡的UID防火墙屏蔽，也解决FUID的一次性写入容易写错的问题，且价格比FUID卡还便宜；</td><td>13.56Mhz</td><td>可擦写一次</td></tr></tbody></table><p>判断是 M0卡(Mifare UltraLight)，还是 M1卡(Mifare Classic 1k)，可以通过 SAK 值判断。</p><table><thead><tr><th>产品</th><th>ATQA</th><th>SAK</th><th>UID长度</th></tr></thead><tbody><tr><td>Mifare Mini</td><td>00 04</td><td>09</td><td>4 bytes</td></tr><tr><td>Mifare Classic 1k</td><td>00 04</td><td>08</td><td>4 bytes</td></tr><tr><td>Mifare Classic 4k</td><td>00 02</td><td>18</td><td>4 bytes</td></tr><tr><td>Mifare Ultraligh</td><td>00 44</td><td>00</td><td>4 bytes写</td></tr><tr><td>Mifare Plus</td><td>00 44</td><td>20</td><td>4 bytes</td></tr></tbody></table><p>SAK 为 20 的是 CPU 模拟卡，基本无解，还有种 SAK 是 28的，是带 M1 数据的 cpu 模拟卡，只能读取 M1 的数据部分，不一定能模拟成功。</p><h3 id="卡片数据存储介绍"><a href="#卡片数据存储介绍" class="headerlink" title="卡片数据存储介绍"></a>卡片数据存储介绍</h3><p>M1(Mifare classic 1K) 卡片，即存储容量 1K &#x3D; 1024Byte，有 16 个扇区，每个扇区有 4 个块，每个块 16 个字节：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 扇区</span><br><span class="line">0区块:00000000000000000000000000000000</span><br><span class="line">1区块:00000000000000000000000000000000</span><br><span class="line">2区块:00000000000000000000000000000000</span><br><span class="line">3区块:FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span><br><span class="line"></span><br><span class="line">1 扇区</span><br><span class="line">0区块:00000000000000000000000000000000</span><br><span class="line">1区块:00000000000000000000000000000000</span><br><span class="line">2区块:00000000000000000000000000000000</span><br><span class="line">3区块:FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span><br></pre></td></tr></table></figure><ol><li>0 扇区的 0 区块出厂赋予的，前 4 个字节是 UID，第 5 个字节是 UID，第 6 个字节是 SAK，包括后面的一起是厂商码，所有卡片的厂商码都无法修改。</li><li>除了 0 扇区以外，每个扇区的块0、块1、块2 为数据块，可用于存储数据。</li><li>每个扇区的块3为控制块，包括密码keyA，存取控制，密码keyB。存取控制的作用是控制对应扇区记录的读写权限与keyA和keyB的关系。由于每个扇区都有独立的key和存取控制，因此M1卡可以做到一卡多用互不干扰。</li></ol><p>更多详情见 <a href="https://hceng.cn/2019/07/12/NFC%E6%89%8B%E6%9C%BA%E6%A8%A1%E6%8B%9F%E5%8A%A0%E5%AF%86%E9%97%A8%E7%A6%81%E5%8D%A1/">NFC手机模拟加密门禁卡</a> 里的基础知识。</p><h3 id="ACR122U"><a href="#ACR122U" class="headerlink" title="ACR122U"></a>ACR122U</h3><p>Linux 下面有个复制脚本，<a href="https://www.lostserver.com/static/nfc-cloner.sh">nfc-clone</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y mfoc  libnfc-bin libnfc-bin libnfc-examples</span><br></pre></td></tr></table></figure><p>ACR122U 上面的命令就可以驱动了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nfc-list</span><br><span class="line">nfc-list uses libnfc 1.7.1</span><br><span class="line">errorlibnfc.driver.acr122_usbUnable to claim USB interface (Device or resource busy)</span><br><span class="line">nfc-list: ERROR: Unable to open NFC device: acr122_usb:001:015</span><br><span class="line">$ lsmod | grep pn533</span><br><span class="line">pn533_usb              20480  0</span><br><span class="line">pn533                  36864  1 pn533_usb</span><br><span class="line">nfc                   110592  1 pn533</span><br></pre></td></tr></table></figure><p>上面报错参考 <a href="https://github.com/nfc-tools/libnfc/issues/402">nfc-tools&#x2F;libnfc</a> 解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/modprobe.d/blacklist-libnfc.conf</span><br><span class="line">blacklist nfc</span><br><span class="line">blacklist pn533</span><br><span class="line">blacklist pn533_usb</span><br><span class="line">$ sudo modprobe -rf pn533_usb</span><br><span class="line">$ nfc-list</span><br><span class="line">nfc-list uses libnfc 1.7.1</span><br><span class="line">NFC device: ACS / ACR122U PICC Interface opened</span><br></pre></td></tr></table></figure><p>读卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nfc-list</span><br><span class="line">nfc-list uses libnfc 1.7.1</span><br><span class="line">NFC device: ACS / ACR122U PICC Interface opened</span><br><span class="line">1 ISO14443A passive target(s) found:</span><br><span class="line">ISO/IEC 14443A (106 kbps) target:</span><br><span class="line">    ATQA (SENS_RES): 00  04  </span><br><span class="line">       UID (NFCID1): xx  xx  0f  7d  </span><br><span class="line">      SAK (SEL_RES): 28  </span><br><span class="line">                ATS: 78  80  90  02  20  90  00  00  00  00  00  xx  xx  0f  7d  </span><br></pre></td></tr></table></figure><p>更多参考上面的脚本。</p><h3 id="pm3"><a href="#pm3" class="headerlink" title="pm3"></a>pm3</h3><h4 id="固件编译"><a href="#固件编译" class="headerlink" title="固件编译"></a>固件编译</h4><p>官方固件仓库没看到更新，有名的就是 iceman（冰人）的 <a href="https://github.com/RfidResearchGroup/proxmark3">RfidResearchGroup&#x2F;proxmark3</a>。</p><p>我是在我的 r2s 上用 docker 起特权容器玩的，<code>apt</code> 系列系统 <code>ldd --version</code> 看看 glibc 版本，大于等于 2.27，推荐起 <code>ubuntu:18.04</code> 容器编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Linux系统中可能存在ModemManager，从而干扰系统和proxmark3的通信。</span><br><span class="line"> apt remove modemmanager</span><br><span class="line"># 获取关闭</span><br><span class="line">sudo systemctl stop ModemManager</span><br><span class="line">sudo systemctl disable ModemManager</span><br><span class="line"></span><br><span class="line">git clone https://github.com/RfidResearchGroup/proxmark3</span><br><span class="line">docker run --name t1 --restart always -tid --privileged -v $PWD/proxmark3:/opt/proxmark3 -w /opt/proxmark3 ubuntu:18.04</span><br></pre></td></tr></table></figure><p>开始编译的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f /etc/apt/sources.list ];then sed -ri &#x27;s/(deb|security|archive|ports).(debian.org|ubuntu.com)/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list; fi &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    DEBIAN_FRONTEND=noninteractive apt install gcc g++ make autoconf pkg-config cmake git libbz2-dev libreadline-dev gcc-arm-none-eabi libssl-dev usbutils -y</span><br></pre></td></tr></table></figure><p>编译之前看下 <code>Makefile.platform.sample</code> ，代码里默认是 <code>pm3 rdv4</code> 版本，就是 1k 多元带蓝牙的版本，我们一般是 pm3 GENERIC（右侧一个按钮，中间一个 usb 口，线圈内就 LF Antenna&#x2F;Rreq: 125kHZ的版本），所以编译命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make all PLATFORM=PM3GENERIC</span><br><span class="line"># 单独编译客户端的话</span><br><span class="line"># make client</span><br></pre></td></tr></table></figure><p>我的 openwrt 能用是因为有很多模块，例如下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ opkg list-installed | grep -P &#x27;cdc-|usb-&#x27;</span><br><span class="line">kmod-usb-acm - 5.10.102-1</span><br><span class="line">kmod-usb-core - 5.10.102-1</span><br><span class="line">kmod-usb-net - 5.10.102-1</span><br><span class="line">kmod-usb-net-cdc-eem - 5.10.102-1</span><br><span class="line">kmod-usb-net-cdc-ether - 5.10.102-1</span><br><span class="line">kmod-usb-net-cdc-ncm - 5.10.102-1</span><br><span class="line">kmod-usb-net-rtl8152 - 5.10.102-1</span><br><span class="line">kmod-usb-storage - 5.10.102-1</span><br><span class="line">kmod-usb-storage-extras - 5.10.102-1</span><br><span class="line">kmod-usb-storage-uas - 5.10.102-1</span><br><span class="line">libusb-1.0-0 - 1.0.24-5</span><br></pre></td></tr></table></figure><p>后续手机想操作 pm3 最好看下手机编译了 <code>usb-acm</code> 没，一般的官方 rom 都不会开这个的。</p><h4 id="pm3-操作"><a href="#pm3-操作" class="headerlink" title="pm3 操作"></a>pm3 操作</h4><p>pm3 无论啥时候插入 linux，dmesg 里都有下面信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[862180.046239] usb 2-1: USB disconnect, device number 3</span><br><span class="line">[863606.280680] cdc_acm 2-1:1.0: ttyACM0: USB ACM device</span><br></pre></td></tr></table></figure><p>有 <code>ttyACM0</code> 才是对的，否则就是你 Linux 没 USB-ACM 相关模块，有了后会多出一个字符设备 <code>/dev/ttyACM0</code> 。</p><h5 id="刷写固件"><a href="#刷写固件" class="headerlink" title="刷写固件"></a>刷写固件</h5><p>上面的 make all 会编译固件和 client。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">./pm3-flash-fullimage </span><br><span class="line">[=] Session log /root/.proxmark3/logs/log_20220420.txt</span><br><span class="line">[+] About to use the following file:</span><br><span class="line">[+]    /opt/proxmark3/client/../armsrc/obj/fullimage.elf</span><br><span class="line">[+] Loading ELF file /opt/proxmark3/client/../armsrc/obj/fullimage.elf</span><br><span class="line">[+] ELF file version Iceman/master/v4.14831-551-gda81c6806 2022-04-20 20:23:34 617717b0d</span><br><span class="line"></span><br><span class="line">[+] Waiting for Proxmark3 to appear on /dev/ttyACM0</span><br><span class="line"> 🕑  59 found</span><br><span class="line">[+] Entering bootloader...</span><br><span class="line">[+] (Press and release the button only to abort)</span><br><span class="line">[+] Waiting for Proxmark3 to appear on /dev/ttyACM0</span><br><span class="line"> 🕔  58 found</span><br><span class="line">[=] Available memory on this board: 512K bytes</span><br><span class="line"></span><br><span class="line">[=] Permitted flash range: 0x00102000-0x00180000</span><br><span class="line">[+] Loading usable ELF segments:</span><br><span class="line">[+]    1: V 0x00102000 P 0x00102000 (0x0004e974-&gt;0x0004e974) [R X] @0xb8</span><br><span class="line">[+]    2: V 0x00200000 P 0x00150974 (0x00001ba1-&gt;0x00001ba1) [R X] @0x4ea30</span><br><span class="line">[=] Note: Extending previous segment from 0x4e974 to 0x50515 bytes</span><br><span class="line"></span><br><span class="line">[+] Flashing...</span><br><span class="line">[+] Writing segments for file: /opt/proxmark3/client/../armsrc/obj/fullimage.elf</span><br><span class="line">[+]  0x00102000..0x00152514 [0x50515 / 643 blocks]</span><br><span class="line">...................................................................</span><br><span class="line">        @@@  @@@@@@@ @@@@@@@@ @@@@@@@@@@   @@@@@@  @@@  @@@</span><br><span class="line">        @@! !@@      @@!      @@! @@! @@! @@!  @@@ @@!@!@@@</span><br><span class="line">        !!@ !@!      @!!!:!   @!! !!@ @!@ @!@!@!@! @!@@!!@!</span><br><span class="line">        !!: :!!      !!:      !!:     !!: !!:  !!! !!:  !!!</span><br><span class="line">        :    :: :: : : :: :::  :      :    :   : : ::    : </span><br><span class="line">        .    .. .. . . .. ...  .      .    .   . . ..    . </span><br><span class="line">...................................................................</span><br><span class="line">...................................................................</span><br><span class="line">...................................................................... ok</span><br><span class="line"></span><br><span class="line">[+] All done</span><br><span class="line"></span><br><span class="line">[=] Have a nice day!</span><br></pre></td></tr></table></figure><p>连接 pm3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">$ ./pm3 --list</span><br><span class="line">1: /dev/ttyACM0</span><br><span class="line"></span><br><span class="line">$ ./client/proxmark3 /dev/ttyACM0 </span><br><span class="line">[=] Session log /root/.proxmark3/logs/log_20220420.txt</span><br><span class="line">[+] loaded from JSON file /root/.proxmark3/preferences.json</span><br><span class="line">[=] Using UART port /dev/ttyACM0</span><br><span class="line">[=] Communicating with PM3 over USB-CDC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  8888888b.  888b     d888  .d8888b.   </span><br><span class="line">  888   Y88b 8888b   d8888 d88P  Y88b  </span><br><span class="line">  888    888 88888b.d88888      .d88P  </span><br><span class="line">  888   d88P 888Y88888P888     8888&quot;  </span><br><span class="line">  8888888P&quot;  888 Y888P 888      &quot;Y8b.  </span><br><span class="line">  888        888  Y8P  888 888    888  </span><br><span class="line">  888        888   &quot;   888 Y88b  d88P </span><br><span class="line">  888        888       888  &quot;Y8888P&quot;    [ ❄️ ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  [ Proxmark3 RFID instrument ]</span><br><span class="line"></span><br><span class="line">    MCU....... AT91SAM7S512 Rev B</span><br><span class="line">    Memory.... 512 Kb ( 58% used )</span><br><span class="line"></span><br><span class="line">    Client.... Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:00:05</span><br><span class="line">    Bootrom... Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:02:34 </span><br><span class="line">    OS........ Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:04:23 </span><br><span class="line">    Target.... PM3 GENERIC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[usb] pm3 --&gt; hw version</span><br><span class="line"></span><br><span class="line"> [ Proxmark3 RFID instrument ]</span><br><span class="line"></span><br><span class="line"> [ CLIENT ]</span><br><span class="line">  Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:00:05 617717b0d</span><br><span class="line">  compiled with............. GCC 9.4.0</span><br><span class="line">  platform.................. Linux / aarch64</span><br><span class="line">  Readline support.......... present</span><br><span class="line">  QT GUI support............ absent</span><br><span class="line">  native BT support......... absent</span><br><span class="line">  Python script support..... absent</span><br><span class="line">  Lua SWIG support.......... present</span><br><span class="line">  Python SWIG support....... absent</span><br><span class="line"></span><br><span class="line"> [ PROXMARK3 ]</span><br><span class="line">  firmware.................. PM3 GENERIC</span><br><span class="line"></span><br><span class="line"> [ ARM ]</span><br><span class="line">  bootrom: Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:02:34 617717b0d</span><br><span class="line">       os: Iceman/master/v4.14831-551-gda81c6806 2022-04-20 22:04:23 617717b0d</span><br><span class="line">  compiled with GCC 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]</span><br><span class="line"></span><br><span class="line"> [ FPGA ] </span><br><span class="line">  LF image 2s30vq100 2022-03-23 17:21:05</span><br><span class="line">  HF image 2s30vq100 2022-03-23 17:21:16</span><br><span class="line">  HF FeliCa image 2s30vq100 2022-03-23 17:21:27</span><br><span class="line">  HF 15 image 2s30vq100 2022-03-23 17:21:38</span><br><span class="line"></span><br><span class="line"> [ Hardware ]</span><br><span class="line">  --= uC: AT91SAM7S512 Rev B</span><br><span class="line">  --= Embedded Processor: ARM7TDMI</span><br><span class="line">  --= Internal SRAM size: 64K bytes</span><br><span class="line">  --= Architecture identifier: AT91SAM7Sxx Series</span><br><span class="line">  --= Embedded flash memory 512K bytes ( 58% used )</span><br><span class="line"></span><br><span class="line">[usb] pm3 --&gt; hw status</span><br><span class="line">[#] Memory</span><br><span class="line">[#]   BigBuf_size............. 42760</span><br><span class="line">[#]   Available memory........ 42760</span><br><span class="line">[#] Tracing</span><br><span class="line">[#]   tracing ................ 1</span><br><span class="line">[#]   traceLen ............... 0</span><br><span class="line">[#] Current FPGA image</span><br><span class="line">[#]   mode.................... HF image 2s30vq100 2022-03-23 17:21:16</span><br><span class="line">[#] LF Sampling config</span><br><span class="line">[#]   [q] divisor............. 95 ( 125.00 kHz )</span><br><span class="line">[#]   [b] bits per sample..... 8</span><br><span class="line">[#]   [d] decimation.......... 1</span><br><span class="line">[#]   [a] averaging........... yes</span><br><span class="line">[#]   [t] trigger threshold... 0</span><br><span class="line">[#]   [s] samples to skip..... 0 </span><br><span class="line">[#] </span><br><span class="line">[#] LF T55XX config</span><br><span class="line">[#]            [r]               [a]   [b]   [c]   [d]   [e]   [f]   [g]</span><br><span class="line">[#]            mode            |start|write|write|write| read|write|write</span><br><span class="line">[#]                            | gap | gap |  0  |  1  | gap |  2  |  3</span><br><span class="line">[#] ---------------------------+-----+-----+-----+-----+-----+-----+------</span><br><span class="line">[#] fixed bit length (default) |  31 |  20 |  18 |  50 |  15 | N/A | N/A | </span><br><span class="line">[#]     long leading reference |  31 |  20 |  18 |  50 |  15 | N/A | N/A | </span><br><span class="line">[#]               leading zero |  31 |  20 |  18 |  40 |  15 | N/A | N/A | </span><br><span class="line">[#]    1 of 4 coding reference |  31 |  20 |  18 |  34 |  15 |  50 |  66 | </span><br><span class="line">[#] </span><br><span class="line">[#] HF 14a config</span><br><span class="line">[#]   [a] Anticol override.... std    ( follow standard )</span><br><span class="line">[#]   [b] BCC override........ std    ( follow standard )</span><br><span class="line">[#]   [2] CL2 override........ std    ( follow standard )</span><br><span class="line">[#]   [3] CL3 override........ std    ( follow standard )</span><br><span class="line">[#]   [r] RATS override....... std    ( follow standard )</span><br><span class="line">[#] Transfer Speed</span><br><span class="line">[#]   Sending packets to client...</span><br><span class="line">[#]   Time elapsed................... 500ms</span><br><span class="line">[#]   Bytes transferred.............. 295424</span><br><span class="line">[#]   Transfer Speed PM3 -&gt; Client... 590848 bytes/s</span><br><span class="line">[#] Various</span><br><span class="line">[#]   Max stack usage......... 4088 / 8480 bytes</span><br><span class="line">[#]   Debug log level......... 1 ( error )</span><br><span class="line">[#]   ToSendMax............... -1</span><br><span class="line">[#]   ToSend BUFFERSIZE....... 2308</span><br><span class="line">[#]   Slow clock.............. 30644 Hz</span><br><span class="line">[#] Installed StandAlone Mode</span><br><span class="line">[#]   LF HID26 standalone - aka SamyRun (Samy Kamkar)</span><br><span class="line">[#] </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="pm3-的操作"><a href="#pm3-的操作" class="headerlink" title="pm3 的操作"></a>pm3 的操作</h5><h6 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h6><p>上面连接后，进入到一个交互，交互里输入命令就行了，有点类似交换机和单片机里的 AT 指令，可以 <code>help</code> 查看命令，查看命令的帮助就 <code>命令 --help</code>、<code>命令 子命令 --help</code> 依次类推，你搜到的很多文章都是老命令，根据固件里实际来。</p><p><code>lf</code> 和 <code>hf</code> 对应低频和高频命令，例如我们扫描 M1 卡片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf search</span><br><span class="line"> ??  Searching for ISO14443-A tag...          </span><br><span class="line">[+]  UID: XX XX 0F 7D </span><br><span class="line">[+] ATQA: 00 04</span><br><span class="line">[+]  SAK: 28 [1]</span><br><span class="line">[+] Possible types:</span><br><span class="line">[+]    SmartMX with MIFARE Classic 1K</span><br><span class="line">[=] -------------------------- ATS --------------------------</span><br><span class="line">[+] ATS: 10 78 80 90 02 20 90 00 00 00 00 00 XX XX 0F 7D [ ED 00 ]</span><br><span class="line">[=]      10...............  TL    length is 16 bytes</span><br><span class="line">[=]         78............  T0    TA1 is present, TB1 is present, TC1 is present, FSCI is 8 (FSC = 256)</span><br><span class="line">[=]            80.........  TA1   different divisors are NOT supported, DR: [], DS: []</span><br><span class="line">[=]               90......  TB1   SFGI = 0 (SFGT = (not needed) 0/fc), FWI = 9 (FWT = 2097152/fc)</span><br><span class="line">[=]                  02...  TC1   NAD is NOT supported, CID is supported</span><br><span class="line"></span><br><span class="line">[=] -------------------- Historical bytes --------------------</span><br><span class="line">[+]   20900000000000XXXX0F7D</span><br><span class="line"></span><br><span class="line">[+] Prng detection: weak</span><br><span class="line">[#] Auth error</span><br><span class="line">[?] Hint: try `hf mf` commands</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Valid ISO 14443-A tag found</span><br><span class="line"></span><br><span class="line">[=] Short AID search:</span><br><span class="line">[?] Hint: try emv commands</span><br></pre></td></tr></table></figure><h6 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h6><p>主要利用 sniff 命令嗅探，比如常见的 14a 卡片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf 14a sniff</span><br><span class="line"></span><br><span class="line">[#] Starting to sniff。 Press PM3 Button to stop.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后保持上电，拿去刷卡，<code>卡</code> – <code>pm3</code> – <code>刷卡设备</code> ，多刷几下，等 pm3 两个灯交叉闪烁后常亮，按下 Button 按钮，pm3 客户端会显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[#] trace len = xxxx</span><br></pre></td></tr></table></figure><p>此刻赶紧保存下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; data save -f xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; trace list -t 14a</span><br></pre></td></tr></table></figure><p>运气好能分析到 <code>PWD-AUTH KEY</code> ，然后破解，参考 <a href="https://raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/">【PM3】重置小米空气净化器滤芯</a>。运气不好就无法嗅探。</p><h3 id="破解的一些说明"><a href="#破解的一些说明" class="headerlink" title="破解的一些说明"></a>破解的一些说明</h3><ol><li>把卡片解密后 dump 出来，dump 的数据是没加密的，再写入白卡，手机或者手环再读取白卡模拟</li><li>设备可以读取 dump 数据写入手机的 nfc 卡片里，但是最好不要这样做，很多手机的 nfc 是单独一块电路，不跟随刷机恢复出厂设置的，读写可能会损坏 nfc 相关硬件只有换主板了。</li><li>有些门禁设备是还校验厂商码的，这种就放弃吧，手机模拟白卡不会让写厂商码的，涉及到法律问题。</li><li>有些公司的 oa 软件支持添加电子工牌，实际添加行为是 oa 软件里点了添加后会给手机的钱包-nfc 添加一张模拟卡片，这个卡片是 cpu 模拟卡，SAK 显示 20，说明门禁联网的。</li></ol><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><ol><li>windows 我有安装串口驱动，但是下的 client 和 GUI 都无法通过 COM 口连上 pm3 ，进安全模式安装 <a href="https://github.com/RfidResearchGroup/proxmark3/tree/master/driver">官方的驱动</a> 也不行。尝试过串口软件打开 com 口，看源码是 <code>baud=115200 parity=N data=8 stop=1</code>，但是还是不行</li><li>安卓客户端 <a href="https://github.com/AndProx/AndProx">AndProx&#x2F;AndProx</a> 因为我手机内核编译没开 <code>USB_ACM</code> 导致无法使用，<a href="https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/termux_notes.md">termux</a> 同样。</li><li>多看看 <a href="https://github.com/RfidResearchGroup/proxmark3/blob/master/README.md">官方的 README.md</a></li></ol><p>也有离线嗅探固件，我就不折腾了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/">【PM3】重置小米空气净化器滤芯</a></li><li><a href="https://pm3.echo.cool/index.php/2018/08/21/pm3%E7%A6%BB%E7%BA%BF%E5%97%85%E6%8E%A2%E8%AF%B4%E6%98%8E/">PM3离线嗅探说明</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期折腾 nfc 相关，以后 nfc 的折腾也会更新在这个文章内&lt;/p&gt;</summary>
    
    
    
    
    <category term="nfc" scheme="http://zhangguanzhang.github.io/tags/nfc/"/>
    
    <category term="pm3" scheme="http://zhangguanzhang.github.io/tags/pm3/"/>
    
  </entry>
  
  <entry>
    <title>docker containerd 不定时的 segfault 的一次处理过程</title>
    <link href="http://zhangguanzhang.github.io/2022/04/22/segfault-often/"/>
    <id>http://zhangguanzhang.github.io/2022/04/22/segfault-often/</id>
    <published>2022-04-22T10:15:30.000Z</published>
    <updated>2022-04-22T10:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>客户环境 docker 和 containerd 启动时不时 segment fault 的一次处理过程。</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>问题拉我处理是 <code>04/15</code> 号，现象是客户的根分区被撑爆了，后台 tty 进去看了下是根目录充满了 <code>core.$pid</code> 的 coredump 文件。然后清理后重启发现很多容器起不来。然后喊我来看下。</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>客户系统是 centos7.9 ，先使用 <code>systemctl status docker</code> 看了下 docker 运行一段时间后就崩了，前台启动调试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dockerd --version</span><br><span class="line">Docker version 19.03.14, build 5eb3275</span><br><span class="line">$ systemctl stop kubelet docker</span><br><span class="line">$ dockerd --debug</span><br></pre></td></tr></table></figure><p>然后发现每次 dockerd 退出日志不一样，有时候是 <code>segment fault</code>，有时候报错无法通过 <code>/var/run/docker/containerd/containerd.sock</code> 连接 containerd，该 sock 文件不存在，根据这个报错可以看出来 containerd 无法启动。可以通过 <a href="https://github.com/docker/docker-ce/blob/d7080c17a580919f5340a15a8e5e013133089680/components/engine/libcontainerd/remote_daemon.go#L205-244">源码</a> 得知，如果没启动 containerd ，docker 则会 os.Exec 起一个 <code>containerd</code> 。</p><p>我们的 docker 是官方的 static bin 安装的，如果是官方包管理安装的话，containerd 会由 systemd 启动，docker bin 的方式的话，会由 dockerd 使用 exec 方式启动一个 containerd，找个同版本的查询下 cmdline 后手动前台 debug log-level 启动下 containerd：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line">$ containerd --config /var/run/docker/containerd/containerd.toml --log-level debug   </span><br><span class="line">INFO[2022-04-15T14:14:01.755841221+08:00] starting containerd                           revision=ea765aba0d05254012b0b9e595e995c09186427f version=v1.3.9</span><br><span class="line">DEBU[2022-04-15T14:14:01.755989919+08:00] changing OOM score to -500                   </span><br><span class="line">INFO[2022-04-15T14:14:01.787587081+08:00] loading plugin &quot;io.containerd.content.v1.content&quot;...  type=io.containerd.content.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.787837808+08:00] loading plugin &quot;io.containerd.snapshotter.v1.btrfs&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.790684367+08:00] skip loading plugin &quot;io.containerd.snapshotter.v1.btrfs&quot;...  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.btrfs (xfs) must be a btrfs filesystem to be used with the btrfs snapshotter: skip plugin&quot; type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.790779651+08:00] loading plugin &quot;io.containerd.snapshotter.v1.devmapper&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">WARN[2022-04-15T14:14:01.790827944+08:00] failed to load plugin io.containerd.snapshotter.v1.devmapper  error=&quot;devmapper not configured&quot;</span><br><span class="line">INFO[2022-04-15T14:14:01.790850382+08:00] loading plugin &quot;io.containerd.snapshotter.v1.aufs&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.793069978+08:00] skip loading plugin &quot;io.containerd.snapshotter.v1.aufs&quot;...  error=&quot;modprobe aufs failed: \&quot;modprobe: FATAL: Module aufs not found.\\n\&quot;: exit status 1: skip plugin&quot; type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.793133838+08:00] loading plugin &quot;io.containerd.snapshotter.v1.native&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.793229323+08:00] loading plugin &quot;io.containerd.snapshotter.v1.overlayfs&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.793392157+08:00] loading plugin &quot;io.containerd.snapshotter.v1.zfs&quot;...  type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.794994033+08:00] skip loading plugin &quot;io.containerd.snapshotter.v1.zfs&quot;...  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter: skip plugin&quot; type=io.containerd.snapshotter.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.795033213+08:00] loading plugin &quot;io.containerd.metadata.v1.bolt&quot;...  type=io.containerd.metadata.v1</span><br><span class="line">WARN[2022-04-15T14:14:01.795068521+08:00] could not use snapshotter devmapper in metadata plugin  error=&quot;devmapper not configured&quot;</span><br><span class="line">INFO[2022-04-15T14:14:01.795097127+08:00] metadata content store policy set             policy=shared</span><br><span class="line">INFO[2022-04-15T14:14:01.795925864+08:00] loading plugin &quot;io.containerd.differ.v1.walking&quot;...  type=io.containerd.differ.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.795966063+08:00] loading plugin &quot;io.containerd.gc.v1.scheduler&quot;...  type=io.containerd.gc.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796083519+08:00] loading plugin &quot;io.containerd.service.v1.containers-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796116546+08:00] loading plugin &quot;io.containerd.service.v1.content-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796143806+08:00] loading plugin &quot;io.containerd.service.v1.diff-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796174035+08:00] loading plugin &quot;io.containerd.service.v1.images-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796201988+08:00] loading plugin &quot;io.containerd.service.v1.leases-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796236554+08:00] loading plugin &quot;io.containerd.service.v1.namespaces-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796274839+08:00] loading plugin &quot;io.containerd.service.v1.snapshots-service&quot;...  type=io.containerd.service.v1</span><br><span class="line">INFO[2022-04-15T14:14:01.796309507+08:00] loading plugin &quot;io.containerd.runtime.v1.linux&quot;...  type=io.containerd.runtime.v1</span><br><span class="line">DEBU[2022-04-15T14:14:01.796470242+08:00] loading tasks in namespace                    namespace=moby</span><br><span class="line">ERRO[2022-04-15T14:14:01.796797091+08:00] connecting to shim                            error=&quot;dial unix \x00/containerd-shim/moby/427b5abebd744817fe9cf8c0aa2febadff17d5905e830d3236bb46fa58d6858b/shim.sock: connect: connection refused&quot; id=427b5abebd744817fe9cf8c0aa2febadff17d5905e830d3236bb46fa58d6858b namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.796844852+08:00] cleaning up after shim dead                   id=427b5abebd744817fe9cf8c0aa2febadff17d5905e830d3236bb46fa58d6858b namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.809292656+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">DEBU[2022-04-15T14:14:01.810296940+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.810491037+08:00] connecting to shim                            error=&quot;dial unix /run/containerd/s/058682ed3ebcc6c9b8d37022b1d379d2d11dbf583467c8d834cc09b3d0c76fea: connect: connection refused&quot; id=44d4a81a122079c684c2a45fcd412c8dc2eef3e4e3569ecae2332ac450b80076 namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.810533770+08:00] cleaning up after shim dead                   id=44d4a81a122079c684c2a45fcd412c8dc2eef3e4e3569ecae2332ac450b80076 namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.823164929+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">DEBU[2022-04-15T14:14:01.823795277+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.823953161+08:00] connecting to shim                            error=&quot;dial unix /run/containerd/s/96bd5e94f86fc8e5752989ee5f22f46924d7deea59c7b8ef11087186f81ca50b: connect: connection refused&quot; id=52aa8ad1be01f3f947bcd2f03197771f1b965b0733f3d4026a58d77979618966 namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.823995417+08:00] cleaning up after shim dead                   id=52aa8ad1be01f3f947bcd2f03197771f1b965b0733f3d4026a58d77979618966 namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.835741082+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">DEBU[2022-04-15T14:14:01.836774408+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.836931317+08:00] connecting to shim                            error=&quot;dial unix \x00/containerd-shim/moby/6b1fb39b4c5ad46612b6755f652d608ef75b3374f719b08a67cac1b7f4ddf646/shim.sock: connect: connection refused&quot; id=6b1fb39b4c5ad46612b6755f652d608ef75b3374f719b08a67cac1b7f4ddf646 namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.836979896+08:00] cleaning up after shim dead                   id=6b1fb39b4c5ad46612b6755f652d608ef75b3374f719b08a67cac1b7f4ddf646 namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.849530967+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">ERRO[2022-04-15T14:14:01.862000189+08:00] delete bundle                                 error=&quot;rename /data/kube/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/6b1fb39b4c5ad46612b6755f652d608ef75b3374f719b08a67cac1b7f4ddf646 /data/kube/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/.6b1fb39b4c5ad46612b6755f652d608ef75b3374f719b08a67cac1b7f4ddf646: file exists&quot;</span><br><span class="line">DEBU[2022-04-15T14:14:01.862166378+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.862300707+08:00] connecting to shim                            error=&quot;dial unix \x00/containerd-shim/moby/b49a6d51e1a8997440bbcb6e9267a76d8ce2f24a684454890ae98600de364f64/shim.sock: connect: connection refused&quot; id=b49a6d51e1a8997440bbcb6e9267a76d8ce2f24a684454890ae98600de364f64 namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.862334378+08:00] cleaning up after shim dead                   id=b49a6d51e1a8997440bbcb6e9267a76d8ce2f24a684454890ae98600de364f64 namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.877502812+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">DEBU[2022-04-15T14:14:01.877994394+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.878143864+08:00] connecting to shim                            error=&quot;dial unix /run/containerd/s/b538e3e9b252cc635009139b544114a233b3cc34ca48925588da77aa15cdf90a: connect: connection refused&quot; id=b902f9e634100578e9ab38eeaf9a27224d843035ae33a368d65efc071393bd2f namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.878183396+08:00] cleaning up after shim dead                   id=b902f9e634100578e9ab38eeaf9a27224d843035ae33a368d65efc071393bd2f namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.895566880+08:00] event published                               ns=moby topic=/tasks/exit type=containerd.events.TaskExit</span><br><span class="line">DEBU[2022-04-15T14:14:01.896242084+08:00] event published                               ns=moby topic=/tasks/delete type=containerd.events.TaskDelete</span><br><span class="line">ERRO[2022-04-15T14:14:01.896450640+08:00] connecting to shim                            error=&quot;dial unix /run/containerd/s/4d17ae4e022c51c38d6eff249e4a50d6eaceba757f043204ae68b9382271b0da: connect: connection refused&quot; id=dc31940495385987c90e96c333014f1ac7dc7eddb5e3f45acb19877c79e22893 namespace=moby</span><br><span class="line">WARN[2022-04-15T14:14:01.896496784+08:00] cleaning up after shim dead                   id=dc31940495385987c90e96c333014f1ac7dc7eddb5e3f45acb19877c79e22893 namespace=moby</span><br><span class="line">DEBU[2022-04-15T14:14:01.904116791+08:00] garbage collected                             d=7.541562ms</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">0x40c05f</span><br><span class="line">fatal error: bad lfnode address</span><br><span class="line">[signal SIGSEGV: segmentation violation code=0x80 addr=0x0 pc=0x45cf1f]</span><br><span class="line"></span><br><span class="line">runtime stack:</span><br><span class="line">runtime: unexpected return pc for runtime.lfnodeValidate called from 0x0</span><br><span class="line">stack: frame=&#123;sp:0x7f5918d8f5d8, fp:0x7f5918d8f600&#125; stack=[0x7f5918594148,0x7f5918d93d48)</span><br><span class="line">00007f5918d8f4d8:  000000c000000900  01000000000003e8 </span><br><span class="line">00007f5918d8f4e8:  0000000000000004  000000000000001f </span><br><span class="line">00007f5918d8f4f8:  000000000045cf1f &lt;runtime.GoroutineProfile.func2+47&gt;  0000000000000000 </span><br><span class="line">00007f5918d8f508:  0000000000000080  00000000013f1515 </span><br><span class="line">00007f5918d8f518:  00007f5918d8f560  000000000045d961 &lt;runtime.fatalthrow.func1+97&gt; </span><br><span class="line">00007f5918d8f528:  000000c000000900  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f538:  00007f5918d8f5a8  0000000000000001 </span><br><span class="line">00007f5918d8f548:  00007f5918d8f5a8  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f558:  000000c000000900  00007f5918d8f598 </span><br><span class="line">00007f5918d8f568:  0000000000430fa9 &lt;runtime.fatalthrow+89&gt;  00007f5918d8f578 </span><br><span class="line">00007f5918d8f578:  000000000045d900 &lt;runtime.fatalthrow.func1+0&gt;  000000c000000900 </span><br><span class="line">00007f5918d8f588:  0000000000430dd4 &lt;runtime.throw+116&gt;  00007f5918d8f5a8 </span><br><span class="line">00007f5918d8f598:  00007f5918d8f5c8  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f5a8:  00007f5918d8f5b0  000000000045d870 &lt;runtime.throw.func1+0&gt; </span><br><span class="line">00007f5918d8f5b8:  00000000013dce54  0000000000000012 </span><br><span class="line">00007f5918d8f5c8:  00007f5918d8f608  000000000040beba &lt;runtime.lfnodeValidate+170&gt; </span><br><span class="line">00007f5918d8f5d8: &lt;00000000013dce54  0000000000000012 </span><br><span class="line">00007f5918d8f5e8:  00000000004317a0 &lt;runtime.recordForPanic+304&gt;  000000000274594b </span><br><span class="line">00007f5918d8f5f8: !0000000000000000 &gt;0000000000000000 </span><br><span class="line">00007f5918d8f608:  00007f5918d8f648  0000000000000000 </span><br><span class="line">00007f5918d8f618:  00007f5918d8f650  00000000004317a0 &lt;runtime.recordForPanic+304&gt; </span><br><span class="line">00007f5918d8f628:  000000000274594b  0000000000000004 </span><br><span class="line">00007f5918d8f638:  00007f5918d8f670  00000000004317a0 &lt;runtime.recordForPanic+304&gt; </span><br><span class="line">00007f5918d8f648:  00007f5918d8f668  000000000043183d &lt;runtime.printlock+109&gt; </span><br><span class="line">00007f5918d8f658:  00000000027445b0  000000c000074380 </span><br><span class="line">00007f5918d8f668:  00007f5918d8f698  000000000045d8a6 &lt;runtime.throw.func1+54&gt; </span><br><span class="line">00007f5918d8f678:  0000000000431967 &lt;runtime.gwrite+167&gt;  0000000000000002 </span><br><span class="line">00007f5918d8f688:  000000000000002a  00000000014054d6 </span><br><span class="line">00007f5918d8f698:  00007f5918d8f6c8  0000000000430dad &lt;runtime.throw+77&gt; </span><br><span class="line">00007f5918d8f6a8:  00007f5918d8f6b0  000000000045d870 &lt;runtime.throw.func1+0&gt; </span><br><span class="line">00007f5918d8f6b8:  00000000014054d6  000000000000002a </span><br><span class="line">00007f5918d8f6c8:  00007f5918d8f6f8  0000000000446a60 &lt;runtime.sigpanic+1152&gt; </span><br><span class="line">00007f5918d8f6d8:  00000000014054d6  000000000000002a </span><br><span class="line">00007f5918d8f6e8:  00000000013c9053  0000000000000001 </span><br><span class="line">00007f5918d8f6f8:  00007f5918d8f720 </span><br><span class="line">runtime.throw(0x13dce54, 0x12)</span><br><span class="line">        /usr/local/go/src/runtime/panic.go:774 +0x74</span><br><span class="line">runtime: unexpected return pc for runtime.lfnodeValidate called from 0x0</span><br><span class="line">stack: frame=&#123;sp:0x7f5918d8f5d8, fp:0x7f5918d8f600&#125; stack=[0x7f5918594148,0x7f5918d93d48)</span><br><span class="line">00007f5918d8f4d8:  000000c000000900  01000000000003e8 </span><br><span class="line">00007f5918d8f4e8:  0000000000000004  000000000000001f </span><br><span class="line">00007f5918d8f4f8:  000000000045cf1f &lt;runtime.GoroutineProfile.func2+47&gt;  0000000000000000 </span><br><span class="line">00007f5918d8f508:  0000000000000080  00000000013f1515 </span><br><span class="line">00007f5918d8f518:  00007f5918d8f560  000000000045d961 &lt;runtime.fatalthrow.func1+97&gt; </span><br><span class="line">00007f5918d8f528:  000000c000000900  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f538:  00007f5918d8f5a8  0000000000000001 </span><br><span class="line">00007f5918d8f548:  00007f5918d8f5a8  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f558:  000000c000000900  00007f5918d8f598 </span><br><span class="line">00007f5918d8f568:  0000000000430fa9 &lt;runtime.fatalthrow+89&gt;  00007f5918d8f578 </span><br><span class="line">00007f5918d8f578:  000000000045d900 &lt;runtime.fatalthrow.func1+0&gt;  000000c000000900 </span><br><span class="line">00007f5918d8f588:  0000000000430dd4 &lt;runtime.throw+116&gt;  00007f5918d8f5a8 </span><br><span class="line">00007f5918d8f598:  00007f5918d8f5c8  0000000000430dd4 &lt;runtime.throw+116&gt; </span><br><span class="line">00007f5918d8f5a8:  00007f5918d8f5b0  000000000045d870 &lt;runtime.throw.func1+0&gt; </span><br><span class="line">00007f5918d8f5b8:  00000000013dce54  0000000000000012 </span><br><span class="line">00007f5918d8f5c8:  00007f5918d8f608  000000000040beba &lt;runtime.lfnodeValidate+170&gt; </span><br><span class="line">00007f5918d8f5d8: &lt;00000000013dce54  0000000000000012 </span><br><span class="line">00007f5918d8f5e8:  00000000004317a0 &lt;runtime.recordForPanic+304&gt;  000000000274594b </span><br><span class="line">00007f5918d8f5f8: !0000000000000000 &gt;0000000000000000 </span><br><span class="line">00007f5918d8f608:  00007f5918d8f648  0000000000000000 </span><br><span class="line">00007f5918d8f618:  00007f5918d8f650  00000000004317a0 &lt;runtime.recordForPanic+304&gt; </span><br><span class="line">00007f5918d8f628:  000000000274594b  0000000000000004 </span><br><span class="line">00007f5918d8f638:  00007f5918d8f670  00000000004317a0 &lt;runtime.recordForPanic+304&gt; </span><br><span class="line">00007f5918d8f648:  00007f5918d8f668  000000000043183d &lt;runtime.printlock+109&gt; </span><br><span class="line">00007f5918d8f658:  00000000027445b0  000000c000074380 </span><br><span class="line">00007f5918d8f668:  00007f5918d8f698  000000000045d8a6 &lt;runtime.throw.func1+54&gt; </span><br><span class="line">00007f5918d8f678:  0000000000431967 &lt;runtime.gwrite+167&gt;  0000000000000002 </span><br><span class="line">00007f5918d8f688:  000000000000002a  00000000014054d6 </span><br><span class="line">00007f5918d8f698:  00007f5918d8f6c8  0000000000430dad &lt;runtime.throw+77&gt; </span><br><span class="line">00007f5918d8f6a8:  00007f5918d8f6b0  000000000045d870 &lt;runtime.throw.func1+0&gt; </span><br><span class="line">00007f5918d8f6b8:  00000000014054d6  000000000000002a </span><br><span class="line">00007f5918d8f6c8:  00007f5918d8f6f8  0000000000446a60 &lt;runtime.sigpanic+1152&gt; </span><br><span class="line">00007f5918d8f6d8:  00000000014054d6  000000000000002a </span><br><span class="line">00007f5918d8f6e8:  00000000013c9053  0000000000000001 </span><br><span class="line">00007f5918d8f6f8:  00007f5918d8f720 </span><br><span class="line">runtime.lfnodeValidate(0x0)</span><br><span class="line">        /usr/local/go/src/runtime/lfstack.go:65 +0xaa</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive]:</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/containerd/go-runc.(*defaultMonitor).Wait(0x2744360, 0xc0002738c0, 0xc00035e4e0, 0x0, 0x0, 0x3d54454b434f)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/monitor.go:74 +0x50</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/containerd/go-runc.cmdOutput(0xc0002738c0, 0xc0002ee301, 0x0, 0x0, 0x0, 0x0, 0x0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/runc.go:709 +0x14e</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/containerd/go-runc.(*Runc).runOrError(0xc00055ec80, 0xc0002738c0, 0xc0002cee40, 0xc00004ee40)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/runc.go:689 +0x186</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/containerd/go-runc.(*Runc).Delete(0xc00055ec80, 0x1bcd9e0, 0xc0002cee40, 0xc000016796, 0x40, 0xc00062cd77, 0x40, 0xc00055ec80)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/runc.go:302 +0x16a</span><br><span class="line">github.com/containerd/containerd/runtime/v1/linux.(*Runtime).terminate(0xc000240960, 0x1bcd9e0, 0xc0002cee40, 0xc0002cea80, 0xc00010d5d1, 0x4, 0xc000016796, 0x40, 0x1, 0x1)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/runtime/v1/linux/runtime.go:473 +0xfc</span><br><span class="line">github.com/containerd/containerd/runtime/v1/linux.(*Runtime).cleanupAfterDeadShim(0xc000240960, 0x1bcd9e0, 0xc0002cee40, 0xc0002cea80, 0xc00010d5d1, 0x4, 0xc000016796, 0x40, 0x1b938c0, 0xc00003caf0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/runtime/v1/linux/runtime.go:432 +0x386</span><br><span class="line">github.com/containerd/containerd/runtime/v1/linux.(*Runtime).loadTasks(0xc000240960, 0x1bcd960, 0xc000040098, 0xc00010d5d1, 0x4, 0x0, 0x0, 0xc00062e610, 0x439d71, 0xc000052500)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/runtime/v1/linux/runtime.go:362 +0xa28</span><br><span class="line">github.com/containerd/containerd/runtime/v1/linux.(*Runtime).restoreTasks(0xc000240960, 0x1bcd960, 0xc000040098, 0x1a9f5c0, 0xc000532540, 0x0, 0x0, 0xc00062e898)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/runtime/v1/linux/runtime.go:298 +0x368</span><br><span class="line">github.com/containerd/containerd/runtime/v1/linux.New(0xc00034ea80, 0xc000332c60, 0x2, 0x2, 0x1968f20)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/runtime/v1/linux/runtime.go:125 +0x3db</span><br><span class="line">github.com/containerd/containerd/plugin.(*Registration).Init(0xc00009a1e0, 0xc00034ea80, 0x18c2f40)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/plugin/plugin.go:110 +0x3a</span><br><span class="line">github.com/containerd/containerd/services/server.New(0x1bcd960, 0xc000040098, 0xc00055c480, 0x1, 0x1, 0xc0002079b0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/services/server/server.go:167 +0xcaa</span><br><span class="line">github.com/containerd/containerd/cmd/containerd/command.App.func1(0xc000558580, 0x0, 0xc000162880)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/cmd/containerd/command/main.go:177 +0x7fa</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/urfave/cli.HandleAction(0x1937d80, 0x1b71550, 0xc000558580, 0xc000558580, 0x0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/urfave/cli/app.go:523 +0xc0</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/urfave/cli.(*App).Run(0xc000536700, 0xc00003c050, 0x5, 0x5, 0x0, 0x0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/urfave/cli/app.go:285 +0x5e1</span><br><span class="line">main.main()</span><br><span class="line">        github.com/containerd/containerd/cmd/containerd/main.go:33 +0x51</span><br><span class="line"></span><br><span class="line">goroutine 6 [syscall]:</span><br><span class="line">os/signal.signal_recv(0x0)</span><br><span class="line">        /usr/local/go/src/runtime/sigqueue.go:147 +0x9e</span><br><span class="line">os/signal.loop()</span><br><span class="line">        /usr/local/go/src/os/signal/signal_unix.go:23 +0x24</span><br><span class="line">created by os/signal.init.0</span><br><span class="line">        /usr/local/go/src/os/signal/signal_unix.go:29 +0x43</span><br><span class="line"></span><br><span class="line">goroutine 7 [chan receive]:</span><br><span class="line">github.com/containerd/containerd/vendor/k8s.io/klog.(*loggingT).flushDaemon(0x2721260)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/k8s.io/klog/klog.go:1010 +0x8d</span><br><span class="line">created by github.com/containerd/containerd/vendor/k8s.io/klog.init.0</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/k8s.io/klog/klog.go:411 +0xd8</span><br><span class="line"></span><br><span class="line">goroutine 43 [select]:</span><br><span class="line">github.com/containerd/containerd/cmd/containerd/command.handleSignals.func1(0xc000551380, 0xc000551320, 0x1bcd960, 0xc000040098, 0xc00054c300)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/cmd/containerd/command/main_unix.go:44 +0xf2</span><br><span class="line">created by github.com/containerd/containerd/cmd/containerd/command.handleSignals</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/cmd/containerd/command/main_unix.go:41 +0x8b</span><br><span class="line"></span><br><span class="line">goroutine 11 [select]:</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/docker/go-events.(*Broadcaster).run(0xc00003c0f0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/docker/go-events/broadcast.go:117 +0x1b3</span><br><span class="line">created by github.com/containerd/containerd/vendor/github.com/docker/go-events.NewBroadcaster</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/docker/go-events/broadcast.go:39 +0x1b0</span><br><span class="line"></span><br><span class="line">goroutine 114 [runnable]:</span><br><span class="line">os/exec.(*Cmd).Start.func2(0xc0002738c0)</span><br><span class="line">        /usr/local/go/src/os/exec/exec.go:448 +0xc6</span><br><span class="line">created by os/exec.(*Cmd).Start</span><br><span class="line">        /usr/local/go/src/os/exec/exec.go:447 +0x6d2</span><br><span class="line"></span><br><span class="line">goroutine 47 [select]:</span><br><span class="line">github.com/containerd/containerd/gc/scheduler.(*gcScheduler).run(0xc0002408a0, 0x1bcd960, 0xc000040098)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/gc/scheduler/scheduler.go:268 +0x1ce</span><br><span class="line">created by github.com/containerd/containerd/gc/scheduler.init.0.func1</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/gc/scheduler/scheduler.go:132 +0x429</span><br><span class="line"></span><br><span class="line">goroutine 115 [runnable]:</span><br><span class="line">os/exec.(*Cmd).Wait(0xc0002738c0, 0x0, 0x0)</span><br><span class="line">        /usr/local/go/src/os/exec/exec.go:514 +0x127</span><br><span class="line">github.com/containerd/containerd/vendor/github.com/containerd/go-runc.(*defaultMonitor).Start.func1(0xc0002738c0, 0xc00035e4e0)</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/monitor.go:55 +0x31</span><br><span class="line">created by github.com/containerd/containerd/vendor/github.com/containerd/go-runc.(*defaultMonitor).Start</span><br><span class="line">        /tmp/tmp.0JSku0IZFM/src/github.com/containerd/containerd/vendor/github.com/containerd/go-runc/monitor.go:53 +0xa7</span><br></pre></td></tr></table></figure><p>上面只是偶尔的报错，偶尔也会报错 <code>segment fault</code>，同时根目录也有 coredump 生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ ll /</span><br><span class="line">总用量 145912</span><br><span class="line">lrwxrwxrwx.   1 root root         7 10月 13 2021 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root      4096 4月  11 14:55 boot</span><br><span class="line">-rw-------    1 root root 230711296 4月  15 13:59 core.28650</span><br><span class="line">-rw-------    1 root root 187424768 4月  15 13:46 core.3977</span><br><span class="line">drwxr-xr-x   12 xxx  xxx        156 10月 29 11:32 data</span><br><span class="line">drwxr-xr-x   19 root root      3180 4月  15 12:38 dev</span><br><span class="line">drwxr-xr-x.  85 root root      8192 4月  15 12:44 etc</span><br><span class="line">drwxr-xr-x.   3 root root        17 10月 28 13:30 home</span><br><span class="line">lrwxrwxrwx.   1 root root         7 10月 13 2021 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root         9 10月 13 2021 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   3 root root       127 10月 28 13:32 media</span><br><span class="line">drwxr-xr-x.   2 root root         6 4月  11 2018 mnt</span><br><span class="line">drwxr-xr-x.   3 root root        24 10月 28 13:38 opt</span><br><span class="line">dr-xr-xr-x  253 root root         0 4月  15 12:38 proc</span><br><span class="line">dr-xr-x---.   7 root root       258 4月  15 13:13 root</span><br><span class="line">drwxr-xr-x   30 root root       960 4月  15 14:11 run</span><br><span class="line">lrwxrwxrwx.   1 root root         8 10月 13 2021 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root         6 4月  11 2018 srv</span><br><span class="line">dr-xr-xr-x   13 root root         0 4月  15 13:12 sys</span><br><span class="line">drwxrwxrwt.  14 root root      4096 4月  15 14:28 tmp</span><br><span class="line">drwxr-xr-x.  13 root root       155 10月 13 2021 usr</span><br><span class="line">drwxr-xr-x.  19 root root       267 10月 13 2021 var</span><br></pre></td></tr></table></figure><p>对比了二进制文件，也没损坏，查看了进程，也没有啥安全软件，查看下系统日志，其实在上面排查过程中 ssh 也会偶尔断开，然后 strace 也是没有啥头绪。</p><p>系统日志里过滤一些无用的信息后，发现 bash 也会 <code>segfault</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Apr 15 13:46:32 xxx supervisord: 2022-04-15 13:46:32,958 INFO exited: prometheus_00 (exit status 2; expected)</span><br><span class="line">Apr 15 13:46:33 xxx supervisord: 2022-04-15 13:46:33,962 INFO spawned: &#x27;prometheus_00&#x27; with pid 3751</span><br><span class="line">Apr 15 13:46:35 xxx supervisord: 2022-04-15 13:46:35,379 INFO success: prometheus_00 entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)</span><br><span class="line">Apr 15 13:46:35 xxx dockerd: failed to start daemon: failed to dial &quot;/run/containerd/containerd.sock&quot;: failed to dial &quot;/run/containerd/containerd.sock&quot;: context deadline exceeded</span><br><span class="line">Apr 15 13:46:35 xxx systemd: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">Apr 15 13:46:35 xxx systemd: Unit docker.service entered failed state.</span><br><span class="line">Apr 15 13:46:35 xxx systemd: docker.service failed.</span><br><span class="line">Apr 15 13:46:40 xxx systemd: docker.service holdoff time over, scheduling restart.</span><br><span class="line">Apr 15 13:46:40 xxx systemd: Starting Docker Application Container Engine...</span><br><span class="line">Apr 15 13:46:40 xxx systemd: Started Docker Application Container Engine.</span><br><span class="line">Apr 15 13:46:40 xxx systemd: docker.service: main process exited, code=killed, status=11/SEGV</span><br><span class="line">Apr 15 13:46:40 xxx systemd: Unit docker.service entered failed state.</span><br><span class="line">Apr 15 13:46:40 xxx systemd: docker.service failed.</span><br><span class="line">Apr 15 13:46:42 xxx kernel: bash[4028]: segfault at fa8 ip 0000000000440c58 sp 00007fff8528e830 error 4 in bash[400000+de000]</span><br></pre></td></tr></table></figure><p>单独看看 <code>segfault</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ grep kernal /var/log/messages | grep -i segfault</span><br><span class="line"></span><br><span class="line">Apr 15 11:17:31 xxx kernel: celery[13267]: segfault at 6de410 ip 000000000041b720 sp 00007ffccf1813c0 error 4 in python3.7[400000+293000]</span><br><span class="line">Apr 15 11:20:35 xxx kernel: redis-server[21118]: segfault at 5dd030 ip 00000000005dd030 sp 00007ffc05cbe440 error 14 in redis-server[6dd000+1000]</span><br><span class="line">Apr 15 11:20:35 xxx kernel: supervisord[20844]: segfault at 29 ip 000000000045c030 sp 00007ffd48aa29d0 error 4 in python3.7[400000+293000]</span><br><span class="line">Apr 15 11:20:51 xxx kernel: gunicorn[23241]: segfault at 8 ip 00000000004272c8 sp 00007ffc0c4f34e0 error 4 in python3.7[400000+293000]</span><br><span class="line">Apr 15 11:20:56 xxx kernel: celery[23193]: segfault at 10 ip 0000000000454a29 sp 00007ffd17acce78 error 4 in python3.7[400000+293000]</span><br><span class="line">Apr 15 11:20:56 xxx kernel: python[23196]: segfault at 154c0ab0 ip 0000000000420eb0 sp 00007fff43b9fe08 error 6 in python3.7[400000+293000]</span><br><span class="line">Apr 15 12:38:34 xxx kernel: init.ipv6-globa[1154]: segfault at 68 ip 000000000044f62f sp 00007ffc2cf307a8 error 6 in bash[400000+de000]</span><br><span class="line">Apr 15 12:59:25 xxx kernel: bash[11112]: segfault at 18 ip 0000000000449dc9 sp 00007ffffbc2dac8 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 13:00:58 xxx kernel: bash[14117]: segfault at ffffffff8d48ffff ip 0000000000440c36 sp 00007ffe9be29640 error 7 in bash[400000+de000]</span><br><span class="line">Apr 15 13:01:19 xxx kernel: strace[14852]: segfault at 0 ip           (null) sp 00007ffc836a2be8 error 14 in strace[400000+f7000]</span><br><span class="line">Apr 15 13:10:44 xxx kernel: grep[2587]: segfault at a0d ip 000000000040c43f sp 00007ffcda056be8 error 4 in grep[400000+25000]</span><br><span class="line">Apr 15 13:14:06 xxx kernel: strace[9484]: segfault at ffffffff89489abc ip 00000000004336c2 sp 00007ffcb217a758 error 7 in strace[400000+f7000]</span><br><span class="line">Apr 15 13:27:57 xxx kernel: grep[32713]: segfault at 0 ip           (null) sp 00007ffebf181d10 error 14 in grep[400000+25000]</span><br><span class="line">Apr 15 13:30:22 xxx kernel: bash[5138]: segfault at 108 ip 000000000040cc32 sp 00007ffd55de2728 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 13:35:56 xxx kernel: strace[15846]: segfault at 0 ip           (null) sp 00007ffef0a931e0 error 14 in strace[400000+f7000]</span><br><span class="line">Apr 15 13:36:27 xxx kernel: bash[16818]: segfault at 33173b0 ip 000000000046d584 sp 00007ffdb71ff5c8 error 6 in bash[400000+de000]</span><br><span class="line">Apr 15 13:37:04 xxx kernel: bash[17993]: segfault at 46a0 ip 0000000000440c58 sp 00007fffd76cf1e0 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 13:39:49 xxx kernel: bash[23124]: segfault at 5aa0 ip 0000000000440c58 sp 00007fff98271ac0 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 13:46:42 xxx kernel: bash[4028]: segfault at fa8 ip 0000000000440c58 sp 00007fff8528e830 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 13:59:04 xxx kernel: redis_exporter-[21520]: segfault at 43b8ba ip 000000000043b892 sp 000000c000057f48 error 7 in redis_exporter-1.23.1.linux-x86_64[400000+41f000]</span><br><span class="line">Apr 15 14:12:12 xxx kernel: grepconf.sh[20714]: segfault at 0 ip           (null) sp 00007ffe3009c158 error 14 in bash[400000+de000]</span><br><span class="line">Apr 15 14:14:43 xxx kernel: bash[25463]: segfault at 313f4023 ip 00000000313f4023 sp 00007ffd25075948 error 14 in ISO8859-1.so[7f6335587000+2000]</span><br><span class="line">Apr 15 14:22:32 xxx kernel: bash[7390]: segfault at 18 ip 0000000000449dc9 sp 00007ffc765d0558 error 4 in bash[400000+de000]</span><br><span class="line">Apr 15 14:38:21 xxx kernel: prometheus[26806]: segfault at 440eb5 ip 0000000000421391 sp 000000c0002f1f38 error 7 in prometheus[400000+20ec000]</span><br><span class="line">Apr 15 14:38:21 xxx kernel: prometheus[26801]: segfault at bffffffff8 ip 0000000000440ea3 sp 000000c000000000 error 6 in prometheus[400000+20ec000]</span><br></pre></td></tr></table></figure><p>看了下内存容量也正常，很多东西都会触发 segmenft fault，但是最常见的就是内存越界，但是根据系统日志看并不存在内存越界（毕竟这么多进程都 segfault，不可能这么多进程代码写的有问题），使用 <code>rpm -V glibc</code> 也没看到 so 文件被修改，初步怀疑客户的宿主机内存有问题，让客户迁移下这台机器。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>2022&#x2F;04&#x2F;22 反馈迁移后一切都正常了。</p><h2 id="coredump-的配置参考"><a href="#coredump-的配置参考" class="headerlink" title="coredump 的配置参考"></a>coredump 的配置参考</h2><p>参考文章 <a href="https://www.cnblogs.com/arnoldlu/p/11160510.html">coredump配置、产生、分析以及分析示例</a> coredump 的一些配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/kernel/core_pattern </span><br><span class="line">core</span><br></pre></td></tr></table></figure><p>临时修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;core-%e-%p-%t-%s&quot; &gt; /proc/sys/kernel/core_pattern </span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%% - 单个%字符</span><br><span class="line">%p - 添加pid</span><br><span class="line">%u - 添加当前uid</span><br><span class="line">%g - 添加当前gid</span><br><span class="line">%s - 添加导致产生core的信号</span><br><span class="line">%t - 添加core文件生成时的unix时间</span><br><span class="line">%h - 添加主机名</span><br><span class="line">%e - 添加程序文件名 </span><br></pre></td></tr></table></figure><p>sysctl 固化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kernel.core_pattern=core-%e-%p-%t-%s</span><br><span class="line">kernel.core_uses_pid=1</span><br></pre></td></tr></table></figure><p><code>limit.d/*.conf</code> 配置 coredump 文件限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* soft core 1024</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;客户环境 docker 和 containerd 启动时不时 segment fault 的一次处理过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="segfault" scheme="http://zhangguanzhang.github.io/tags/segfault/"/>
    
  </entry>
  
  <entry>
    <title>ecs 中毒的一次处理过程</title>
    <link href="http://zhangguanzhang.github.io/2022/04/21/ecs-xmrig/"/>
    <id>http://zhangguanzhang.github.io/2022/04/21/ecs-xmrig/</id>
    <published>2022-04-21T19:17:30.000Z</published>
    <updated>2022-04-21T19:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>一次客户 ecs 中毒的处理过程，可以给读者参考下中毒的处理过程。</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>客户机器中毒了，pm 找我来让处理下，记录下，给其他人做个处理过程的参考。</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>机器是 centos ，先利用 <code>rpm -V &lt;pkg_name&gt;</code> 确认基础的排查命令没被修改过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qf `<span class="built_in">which</span> ps`</span><br><span class="line">procps-ng-3.3.10-23.el7.x86_64</span><br><span class="line">$ rpm -V procps-ng </span><br><span class="line">$ rpm -qf `<span class="built_in">which</span> top`</span><br><span class="line">procps-ng-3.3.10-23.el7.x86_64</span><br><span class="line"><span class="comment"># 看sshd 的 so被修改了没，配置文件也可以看下</span></span><br><span class="line">$ rpm -v `<span class="built_in">which</span> sshd`</span><br><span class="line">S.5....T.  c /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>top 看到异常 cpu 的进程占用 cpu 很高：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ top</span><br><span class="line">top - 19:44:29 up 34 days,  5:08,  4 users,  load average: 612.03, 617.15, 482.75</span><br><span class="line">Tasks: 2014 total,  66 running, 1946 sleeping,   0 stopped,   2 zombie</span><br><span class="line">%Cpu(s): 96.6 us,  3.1 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</span><br><span class="line">KiB Mem : 13186040+total,  2722452 free, 48820448 used, 80317504 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used. 78946784 avail Mem </span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                                                </span><br><span class="line"> 1206 root      20   0 5251748   2.3g   3584 S  2956  1.8 465:37.77 ld-linux-x86-64</span><br></pre></td></tr></table></figure><p>给它 <code>STOP</code> 信号不让 cpu 切换到它，而不是直接 kill 掉它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kill -STOP 1206</span><br></pre></td></tr></table></figure><p>查看来源和清理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll /proc/1206/exe</span><br><span class="line">lrwxrwxrwx 1 root root 0 Apr 21 19:44 /proc/1206/exe -&gt; /dev/shm/.x/stak/ld-linux-x86-64.so.2</span><br></pre></td></tr></table></figure><h3 id="清理定时任务"><a href="#清理定时任务" class="headerlink" title="清理定时任务"></a>清理定时任务</h3><p>排查定时任务，发现有内容，清理掉， crond 的子目录也看下，文件内容和多了的子文件也处理下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line">* * * * * /dev/shm/.x/upd &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">@reboot /dev/shm/.x/upd &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">$ find /etc/cron.* -type f </span><br><span class="line">/etc/cron.d/0hourly</span><br><span class="line">/etc/cron.d/sysstat</span><br><span class="line">/etc/cron.daily/logrotate</span><br><span class="line">/etc/cron.daily/man-db.cron</span><br><span class="line">/etc/cron.deny</span><br><span class="line">/etc/cron.hourly/0anacron</span><br><span class="line"></span><br><span class="line"># 查看目录是否有其他用户的 crontab 文件</span><br><span class="line">$ ls -l /var/spool/cron/</span><br></pre></td></tr></table></figure><p>查看下进程树，是否有父进程拉起 <code>1206</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ pstree -sp 1206</span><br><span class="line">systemd(1)───ld-linux-x86-64(1206)─┬─&#123;ld-linux-x86-64&#125;(1209)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(1211)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(1216)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(1217)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(1218)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6436)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6437)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6439)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6440)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6441)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6443)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6471)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6472)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6476)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6484)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6489)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6495)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6501)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6504)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6505)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6508)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6509)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6511)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6523)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6527)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6529)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6531)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6535)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6547)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6554)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6563)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6567)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6568)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6569)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6572)</span><br><span class="line">                                   ├─&#123;ld-linux-x86-64&#125;(6579)</span><br><span class="line">                                   └─&#123;ld-linux-x86-64&#125;(6580)</span><br></pre></td></tr></table></figure><p>发现并没有，查看下进程的 <code>cmdline</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xargs -0 &lt; /proc/1206/cmdline</span><br><span class="line">xmrig   </span><br><span class="line">    --library-path stak stak/xmrig -o 185.82.200.52:443 -k</span><br></pre></td></tr></table></figure><h3 id="检查系统的-so-和开机启动项"><a href="#检查系统的-so-和开机启动项" class="headerlink" title="检查系统的 so 和开机启动项"></a>检查系统的 so 和开机启动项</h3><p>搜了下这个 ip 是外国的，查看下 ld 的 so 导入配置文件，看看是否有被加入额外的 so 导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qf /etc/ld.so.conf</span><br><span class="line">glibc-2.17-260.el7.x86_64</span><br><span class="line"># glibc 也提供了很多基础的 so，这步同时也可以看出来</span><br><span class="line"># 基础的 so 有被替换不</span><br><span class="line">$ rpm -V glibc</span><br></pre></td></tr></table></figure><p>同理查看下 systemd 的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -V systemd</span><br><span class="line">.M.......  c /etc/machine-id</span><br><span class="line">SM5....T.  c /etc/rc.d/rc.local # 这个文件也记得查下</span><br><span class="line">S.5....T.  c /etc/systemd/system.conf</span><br><span class="line">.M.......  g /etc/udev/hwdb.bin</span><br><span class="line">.M.......  g /var/lib/systemd/random-seed</span><br><span class="line">.M....G..  g /var/log/journal</span><br><span class="line">.M....G..  g /var/log/wtmp</span><br><span class="line">.M....G..  g /var/run/utmp</span><br><span class="line"># 查看下有没有被添加 systemd 的开机启动任务，异常的 timer</span><br><span class="line">$ systemctl list-units</span><br></pre></td></tr></table></figure><h3 id="清理进程相关"><a href="#清理进程相关" class="headerlink" title="清理进程相关"></a>清理进程相关</h3><p>我们环境是 k8s 和 docker 的，etcd 没证书，kubelet 的 http 可写，docker 开网络端口不 tls，redis 无密码这种现象是不存在的。看了下我们配置的部署配置文件，初步怀疑是一个有 sudo 的弱密码用户被爆破导致的中毒，查看了具有 sudo 权限和 root 的 <code>~/.ssh/authorized_keys</code> 也没被添加别人的公钥（有的话记得清理下），开始删除挖矿进程的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /dev/shm/.x/</span><br><span class="line">kill -9 1206</span><br></pre></td></tr></table></figure><h3 id="排查网络"><a href="#排查网络" class="headerlink" title="排查网络"></a>排查网络</h3><p>看看是否还有其他后台进程上报或者下载的，看了下 udp 的正常，tcp监听的端口也没莫名其妙的端口，所以提取所有活跃的 tcp 连接 ip 看看有异常的 IP 没：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ant |&amp; grep -Po &#x27;(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;&#x27; | sort | grep -v 10.187.0 | uniq -c</span><br><span class="line">     49 0.0.0.0</span><br><span class="line">      2 119.82.135.65</span><br><span class="line">    111 127.0.0.1</span><br><span class="line">      4 169.254.169.254</span><br><span class="line">   2271 192.168.0.235</span><br><span class="line">     13 2xx.1xx.15.161</span><br><span class="line">      1 3x.1xx.2x.7</span><br><span class="line">     27 4x.x.1xx.x3</span><br><span class="line">      1 xx.1xx.6x.x54</span><br><span class="line"></span><br><span class="line">$ netstat -ant | grep 119.82.135.65</span><br><span class="line">tcp        0   1281 192.168.0.235:22        119.82.135.65:38525     LAST_ACK   </span><br><span class="line">tcp        0      1 192.168.0.235:22        119.82.135.65:54598     LAST_ACK   </span><br><span class="line">$ lsof -nPi :38525</span><br><span class="line">$ lsof -nPi :54598</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p>看了下只有不断被外国 IP 暴力 ssh 的 IP，其余几个 IP 是我和客户那边的人员 IP。让客户改密码后再观察下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只是列举了大概的排查范围，有其他的自己独特的排查范围也可以尝试下。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一次客户 ecs 中毒的处理过程，可以给读者参考下中毒的处理过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ecs" scheme="http://zhangguanzhang.github.io/tags/ecs/"/>
    
    <category term="xmrig" scheme="http://zhangguanzhang.github.io/tags/xmrig/"/>
    
  </entry>
  
  <entry>
    <title>无数据的 tcp 链接被 SDN/防火墙 干掉的一种处理办法</title>
    <link href="http://zhangguanzhang.github.io/2022/04/11/sdn-tcp-keepalive/"/>
    <id>http://zhangguanzhang.github.io/2022/04/11/sdn-tcp-keepalive/</id>
    <published>2022-04-11T11:28:30.000Z</published>
    <updated>2022-04-11T11:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>客户的环境下，业务运行在 dmz 区，mysql 在非 dmz 区，业务连 mysql 的空闲 tcp 连接 240s 后会被 SDN 干掉，本文实际介绍一种不动业务(代码)，利用代理的解决办法</p><span id="more"></span><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>客户提供的环境是 ACS 虚拟化平台，我们业务部署在他们的 dmz 区，mysql 他们提供的，在非 dmz 区，部署后有个问题就是页面经常 504，504 后刷新下就好了，最后排查到是业务连 mysql 的 tcp 连接没有数据传输超过 240s 后会被 SDN 干掉。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>业务的产品挺多的，业务的 db 连接池探活就立刻反馈产品，让下个版本加进去避免这种问题，但是客户现场看看是否有不动业务的解决办法，后面大致看了下 tcp 的 keepalive 可能解决。</p><h3 id="为啥需要-tcp-的-keepalive"><a href="#为啥需要-tcp-的-keepalive" class="headerlink" title="为啥需要 tcp 的 keepalive"></a>为啥需要 tcp 的 keepalive</h3><p>不是 vrrp 和 lvs 的 keepalived 那个，其实这个问题现象和客户的 SDN 关系不大（我意思是说没必要去要求客户调整 SDN 的配置啥的），常见的园区 NAT 网络环境下也有类似问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 假如内网本机访问公网的 1.1.1.1:80 </span><br><span class="line"></span><br><span class="line"># client 端会随机分配一个 client port 用于和目标 ip 建立 tcp 连接</span><br><span class="line">CLIENT 192.168.1.2:47914 </span><br><span class="line">    ||</span><br><span class="line">    ||</span><br><span class="line">    ||</span><br><span class="line">    \/</span><br><span class="line">GW/FW SNAT # 网关或者边界有公网 ip 的防火墙做 SNAT</span><br><span class="line">    ||</span><br><span class="line">    ||</span><br><span class="line">    ||</span><br><span class="line">    \/</span><br><span class="line">REAL SERVER 1.1.1.1:80</span><br></pre></td></tr></table></figure><p>假如边界防火墙的公网 IP 为 <code>61.183.112.202</code>，在客户端访问的时候会有个管理 nat 条目的表：</p><table><thead><tr><th>内网IP</th><th>内网IP的端口</th><th>本身的端口</th><th>目的主机IP</th><th>目的主机端口</th></tr></thead><tbody><tr><td>192.168.1.2</td><td>47914</td><td>52617</td><td>1.1.1.1</td><td>80</td></tr></tbody></table><p>远端的 <code>1.1.1.1:80</code> 看到的 client tcp 信息是 <code>61.183.112.202:52617</code>，边界的公网防火墙由于园区内设备太多，这个端口转换表由于端口数量有限（0~65535），对于过期的记录，需要删除掉。大体过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 下面字符画推荐 pc 端浏览，否则会错位</span><br><span class="line"></span><br><span class="line">      client端       中间设备         服务端</span><br><span class="line">      └──┬──┘        └──┬──┘        └──┬──┘</span><br><span class="line">         │    ┌────┐    │              │</span><br><span class="line">         ├────┼data┼───►│    ┌────┐    │</span><br><span class="line">         │    └────┘    ├────┼data┼───►│</span><br><span class="line">         │              │    └────┘    │</span><br><span class="line">         │              │    ┌────┐    │</span><br><span class="line">         │    ┌────┐    │◄───┼ACK ┼────┤</span><br><span class="line">         │◄───┼ACK ┼────┤    └────┘    │</span><br><span class="line">         │    └────┘   /│              │</span><br><span class="line">         │            │ │              │</span><br><span class="line">         │            │ │              │</span><br><span class="line">         │    no data&lt;  │              │</span><br><span class="line">         │            │ │              │</span><br><span class="line">         │            │ │              │</span><br><span class="line">         │             \│              │</span><br><span class="line">         │              │长时间无数据交互│</span><br><span class="line">         │              │设备删掉表条目 │</span><br><span class="line">         │    ┌────┐    │              │</span><br><span class="line">client   ├────┼data┼───►│无连接信息     │</span><br><span class="line">发送数据  │    └────┘    │直接发送RST    │</span><br><span class="line">         │    ┌────┐    │ 或丢弃        │</span><br><span class="line">应用异常  │◄───┼RST ┼────┤              │</span><br><span class="line">         │    └────┘    │              │</span><br></pre></td></tr></table></figure><p>现场的 SDN 就是 240s 后干掉这个 tcp 连接，解决办法就是 TCP 这层的 keepalive 机制维持长连接，让网关的 nat 条目 ttl 保活。</p><h3 id="tcp-keepalive-介绍"><a href="#tcp-keepalive-介绍" class="headerlink" title="tcp keepalive 介绍"></a>tcp keepalive 介绍</h3><p>相关的内核参数有三个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -a |&amp; grep tcp.keepalive_</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 9</span><br><span class="line">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure><p>启用 tcp keepalive 的一端，在没有数据传输的时候，会有定时器（也有人翻译称为计数器）工作，到了 <code>tcp_keepalive_time</code> 秒还没有数据传输，就发一次 TCP 探测包。每隔 <code>tcp_keepalive_intvl</code> 发一次，如果首次对端响应 keepalive 报文，后面就不发送了，如果没响应也就是一直 <code>tcp_keepalive_probes</code> 次发送都没响应后，就会认为对方挂了。</p><blockquote><ul><li>TCP 探测包是一个纯 ACK 包（<a href="https://tools.ietf.org/html/rfc1122#section-4.2.3.6">RFC1122#TCP Keep-Alives</a> 规范建议：不应该包含任何数据，但也可以包含1个无意义的字节，比如0x0），其 Seq号 与上一个包是重复的，所以其实探测保活报文不在窗口控制范围内。</li></ul></blockquote><p>我们调整了业务机器上的这三个参数，但是还是依旧的问题，发现必须在应用层创建 socket 的时候设置 <code>SO_KEEPALIVE</code> 套接字选项才能生效。例如 c 语言：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conn.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, True)</span><br><span class="line">conn.setsockopt(socket.SOL_TCP, socket.TCP_KEEPIDLE, <span class="number">20</span>) # 覆盖tcp_keepalive_time</span><br><span class="line">conn.setsockopt(socket.SOL_TCP, socket.TCP_KEEPCNT, <span class="number">5</span>)  # 覆盖tcp_keepalive_probes</span><br><span class="line">conn.setsockopt(socket.SOL_TCP, socket.TCP_KEEPINTVL, <span class="number">10</span>) # 覆盖tcp_keepalive_intvl</span><br></pre></td></tr></table></figure><p>其他语言，例如 golang 的话可以看这个文章 <a href="https://zhuanlan.zhihu.com/p/69337371">知乎: golang 程序开启 tcp keepalive</a></p><h3 id="nginx-tcp-代理思路"><a href="#nginx-tcp-代理思路" class="headerlink" title="nginx tcp 代理思路"></a>nginx tcp 代理思路</h3><p>和领导讨论后说用 nginx 做代理试下，根据 nginx 官方文档的 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen">listen 字段</a> 的 <code>[so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]]</code> 看到 nginx 可以开启 <code>so_keepalive</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # http://nginx.org/en/docs/http/ngx_http_core_module.html#listen</span><br><span class="line">    #listen 0.0.0.0:3306 so_keepalive=on;</span><br><span class="line">    # 如果上面这样就使用 内核参数的值，也可以自定义，也就是下面这样对应三个参数</span><br><span class="line">    listen 0.0.0.0:3306 so_keepalive=60s:20:10;</span><br><span class="line">    proxy_pass xxxx:3306;</span><br><span class="line">    </span><br><span class="line">    #建立连接时间</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    #保持连接时间</span><br><span class="line">    proxy_timeout 3600s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试了下发现还是不行，本地搭建个环境试试。</p><h3 id="本地环境实战"><a href="#本地环境实战" class="headerlink" title="本地环境实战"></a>本地环境实战</h3><p>机器信息：</p><table><thead><tr><th>IP</th><th>role</th></tr></thead><tbody><tr><td>192.168.2.111</td><td>mysql</td></tr><tr><td>192.168.2.112</td><td>nginx</td></tr></tbody></table><p><code>192.168.2.111</code> 上利用 docker 起个 mysql:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span> </span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">zgz</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">zgz</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">zhangguanzhang</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">zhangguanzhang</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">json-file</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">20k</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure><p><code>192.168.2.112</code> 上利用 docker 起个 nginx 做代理:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">proxy</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">proxy</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf.d/:/etc/nginx/conf.d/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./stream.d/:/etc/nginx/stream.d/</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">json-file</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">100m</span></span><br></pre></td></tr></table></figure><p><code>nginx.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line">stream &#123;</span><br><span class="line">    include /etc/nginx/stream.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stream.d/test.conf</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # http://nginx.org/en/docs/http/ngx_http_core_module.html#listen</span><br><span class="line">    listen 0.0.0.0:3307 so_keepalive=60s:20:9;</span><br><span class="line">    proxy_pass 192.168.2.111:3306;</span><br><span class="line">    </span><br><span class="line">    #建立连接时间</span><br><span class="line">    proxy_connect_timeout 2s;</span><br><span class="line">    #保持连接时间</span><br><span class="line">    #proxy_timeout 3600s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起来后用 mysql的镜像起 mysql 客户端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti --net host mysql:5.7 bash</span><br><span class="line">mysql -u root -p -h 192.168.2.112 -P 3307</span><br></pre></td></tr></table></figure><p>抓包 <code>port 3306 and host 192.168.2.111</code> 没有看到 keepalive 的包，然后突然意识到 <code>listen</code> 的 <code>so_keepalive</code> 是 nginx 作为 server 端去探测 client 端的，而不是 proxy 的，搜了下搜到 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_socket_keepalive">proxy_socket_keepalive 字段</a>，<code>stream.d/test.conf</code> 配置 server 段里加下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_socket_keepalive on;</span><br></pre></td></tr></table></figure><p>然后发现这个开了后探测时间和间隔是按照的内核参数，调整了下内核参数，后续记得自行持久化到 <code>/etc/sysctl.d/xxx.conf</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -a |&amp; grep tcp.keepalive_</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 6</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 5</span><br><span class="line">net.ipv4.tcp_keepalive_time = 60</span><br></pre></td></tr></table></figure><p>mysql 客户端连接上后抓包看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">18:53:35.347954 IP 192.168.2.112.34492 &gt; 192.168.2.111.3306: Flags [.], ack 2504, win 501, options [nop,nop,TS val 3972839466 ecr 4160374696], length 0</span><br><span class="line">18:53:35.348410 IP 192.168.2.111.3306 &gt; 192.168.2.112.34492: Flags [.], ack 618, win 243, options [nop,nop,TS val 4160435115 ecr 3972779047], length 0</span><br><span class="line">18:54:36.787902 IP 192.168.2.112.34492 &gt; 192.168.2.111.3306: Flags [.], ack 2504, win 501, options [nop,nop,TS val 3972900906 ecr 4160435115], length 0</span><br><span class="line">18:54:36.788318 IP 192.168.2.111.3306 &gt; 192.168.2.112.34492: Flags [.], ack 618, win 243, options [nop,nop,TS val 4160496556 ecr 3972779047], length 0</span><br><span class="line">18:55:38.227896 IP 192.168.2.112.34492 &gt; 192.168.2.111.3306: Flags [.], ack 2504, win 501, options [nop,nop,TS val 3972962346 ecr 4160496556], length 0</span><br><span class="line">18:55:38.228185 IP 192.168.2.111.3306 &gt; 192.168.2.112.34492: Flags [.], ack 618, win 243, options [nop,nop,TS val 4160557996 ecr 3972779047], length 0</span><br><span class="line">18:56:39.667973 IP 192.168.2.112.34492 &gt; 192.168.2.111.3306: Flags [.], ack 2504, win 501, options [nop,nop,TS val 3973023786 ecr 4160557996], length 0</span><br><span class="line">18:56:39.668303 IP 192.168.2.111.3306 &gt; 192.168.2.112.34492: Flags [.], ack 618, win 243, options [nop,nop,TS val 4160619436 ecr 3972779047], length 0</span><br></pre></td></tr></table></figure><p>因为客户端 mysql 连接上后没执行任何 sql，然后 nginx 每隔 net.ipv4.tcp_keepalive_time 的 60s 发送保活报文，mysql server 端也回复了（就不进行5次间隔6s的后续探活了），所以结果就如上图抓包所示，60s 发一次保活的报文。</p><p>后面让客户调整了下业务机器上的这三个内核参数解决了该问题。</p><h3 id="wireshark-抓包"><a href="#wireshark-抓包" class="headerlink" title="wireshark 抓包"></a>wireshark 抓包</h3><p>实际如果是在 mysql client 建立连接后去抓包导入 wireshark ，心跳包会被识别成 <code>TCP Dup ACK</code>，只有抓完整的报文 wireshark 才会识别为 <code>TCP Keep-Alive ACK</code>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>应用层在套接字开启 <code>SO_KEEPALIVE</code> 才可以使用 keepalive 能力。</li><li>基本只有 c 语言才有函数能不走内核参数，来自定义自己的 keepalive 三个值。也就是说大多数应用层开启 keepalive 后，还需要调整运行的机器的这三个内核参数。</li><li>在 IM 开发经验里，客户端去使用 keepalive 才是最正确的。</li><li>redis server 有配置开启 keepalive</li><li>kafka 官方默认开启了 keepalive，见 <a href="https://issues.apache.org/jira/browse/KAFKA-2096">Enable keepalive socket option for broker</a> 和 <a href="https://github.com/apache/kafka/blob/2.1.1/core/src/main/scala/kafka/network/SocketServer.scala#L465">官方源码里的 socketChannel.socket().setKeepAlive(true) </a></li></ol><p>其实本次 nginx 做代理，在思想上挺像 sidecar 的理念的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/e3791f975d7b">简书: TCP keepalive 详解</a></li><li><a href="http://www.52im.net/thread-3506-1-1.html">即时通讯网: 彻底搞懂TCP协议层的KeepAlive保活机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/69337371">知乎: golang 程序开启 tcp keepalive</a></li><li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen">nginx doc: listen 字段</a></li><li><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_socket_keepalive">nginx doc: proxy_socket_keepalive 字段</a></li><li><a href="https://plantegg.github.io/2017/06/02/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--wireshark-dup-ack-issue/">博客: TCP-wireshark-dup-ack-issue</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;客户的环境下，业务运行在 dmz 区，mysql 在非 dmz 区，业务连 mysql 的空闲 tcp 连接 240s 后会被 SDN 干掉，本文实际介绍一种不动业务(代码)，利用代理的解决办法&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="tcp" scheme="http://zhangguanzhang.github.io/tags/tcp/"/>
    
    <category term="keepalive" scheme="http://zhangguanzhang.github.io/tags/keepalive/"/>
    
  </entry>
  
  <entry>
    <title>python kubernetes client list permission</title>
    <link href="http://zhangguanzhang.github.io/2022/03/24/python-list-kubernetes-permission/"/>
    <id>http://zhangguanzhang.github.io/2022/03/24/python-list-kubernetes-permission/</id>
    <published>2022-03-24T20:28:30.000Z</published>
    <updated>2022-03-24T20:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>这几天内部有个功能就是看 kubernetes client 的权限有哪些</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="kubeconfig-生成"><a href="#kubeconfig-生成" class="headerlink" title="kubeconfig 生成"></a>kubeconfig 生成</h3><p>先制作一个非 admin 的 kubeconfig，记得以前有个项目是部署后可以生成 kubeconfig 的，询问了一番后，其他群友提示下想起来是 <a href="https://github.com/sighupio/permission-manager">permission-manager</a>，部署后结果发现生成的 kubeconfig 压根不能用，报错未知机构签署的，结果还是按照以前 <a href="https://zhangguanzhang.github.io/2018/10/27/create-kubeconfig/">生成kubeconfig常规的两种方法</a> 生成了一个简单的。</p><h3 id="尝试过程"><a href="#尝试过程" class="headerlink" title="尝试过程"></a>尝试过程</h3><p>其实一开始打算自己写逻辑，增删改查需要的资源便利来检查，然后突然想起来 kubectl (忘了哪个版本开始)有个 auth 子命令的 <code>can-i</code> 来列出权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl --kubeconfig=/etc/kubernetes/develoop.kubeconfig  auth can-i --namespace xxx --list -v=8</span><br><span class="line">I0325 15:58:24.972928   31603 loader.go:379] Config loaded from file:  /etc/kubernetes/develoop.kubeconfig</span><br><span class="line">I0325 15:58:24.974793   31603 request.go:1107] Request Body: &#123;&quot;kind&quot;:&quot;SelfSubjectRulesReview&quot;,&quot;apiVersion&quot;:&quot;authorization.k8s.io/v1&quot;,&quot;metadata&quot;:&#123;&quot;creationTimestamp&quot;:null&#125;,&quot;spec&quot;:&#123;&quot;namespace&quot;:&quot;xxx&quot;&#125;,&quot;status&quot;:&#123;&quot;resourceRules&quot;:null,&quot;nonResourceRules&quot;:null,&quot;incomplete&quot;:false&#125;&#125;</span><br><span class="line">I0325 15:58:24.974912   31603 round_trippers.go:422] POST https://127.0.0.1:8443/apis/authorization.k8s.io/v1/selfsubjectrulesreviews</span><br><span class="line">I0325 15:58:24.974927   31603 round_trippers.go:429] Request Headers:</span><br><span class="line">I0325 15:58:24.974938   31603 round_trippers.go:433]     Accept: application/json, */*</span><br><span class="line">I0325 15:58:24.974947   31603 round_trippers.go:433]     Content-Type: application/json</span><br><span class="line">I0325 15:58:24.974957   31603 round_trippers.go:433]     User-Agent: kubectl/v1.20.6 (linux/amd64) kubernetes/8a62859</span><br><span class="line">I0325 15:58:24.974968   31603 round_trippers.go:433]     Authorization: Bearer &lt;masked&gt;</span><br><span class="line">I0325 15:58:25.007471   31603 round_trippers.go:448] Response Status: 201 Created in 32 milliseconds</span><br><span class="line">I0325 15:58:25.007513   31603 round_trippers.go:451] Response Headers:</span><br><span class="line">I0325 15:58:25.007523   31603 round_trippers.go:454]     Cache-Control: no-cache, private</span><br><span class="line">I0325 15:58:25.007530   31603 round_trippers.go:454]     Content-Type: application/json</span><br><span class="line">I0325 15:58:25.007537   31603 round_trippers.go:454]     X-Kubernetes-Pf-Flowschema-Uid: 39e31546-1002-4e5b-a810-7bbeb09467a5</span><br><span class="line">I0325 15:58:25.007547   31603 round_trippers.go:454]     X-Kubernetes-Pf-Prioritylevel-Uid: 08ee1b31-c8de-4f8a-aa1c-b098f4e02ae1</span><br><span class="line">I0325 15:58:25.007554   31603 round_trippers.go:454]     Content-Length: 1028</span><br><span class="line">I0325 15:58:25.007561   31603 round_trippers.go:454]     Date: Fri, 25 Mar 2022 07:58:25 GMT</span><br><span class="line">I0325 15:58:25.007656   31603 request.go:1107] Response Body: &#123;&quot;kind&quot;:&quot;SelfSubjectRulesReview&quot;,&quot;apiVersion&quot;:&quot;authorization.k8s.io/v1&quot;,&quot;metadata&quot;:&#123;&quot;creationTimestamp&quot;:null&#125;,&quot;spec&quot;:&#123;&#125;,&quot;status&quot;:&#123;&quot;resourceRules&quot;:[&#123;&quot;verbs&quot;:[&quot;create&quot;],&quot;apiGroups&quot;:[&quot;authorization.k8s.io&quot;],&quot;resources&quot;:[&quot;selfsubjectaccessreviews&quot;,&quot;selfsubjectrulesreviews&quot;]&#125;,&#123;&quot;verbs&quot;:[&quot;*&quot;],&quot;apiGroups&quot;:[&quot;*&quot;],&quot;resources&quot;:[&quot;secrets&quot;,&quot;configmaps&quot;,&quot;serviceaccounts&quot;,&quot;endpoints&quot;,&quot;events&quot;,&quot;pods&quot;,&quot;pods/log&quot;,&quot;pods/portforward&quot;,&quot;podtemplates&quot;,&quot;resourcequotas&quot;,&quot;limitranges&quot;,&quot;services&quot;,&quot;replicationcontrollers&quot;,&quot;daemonsets&quot;,&quot;deployments&quot;,&quot;replicasets&quot;,&quot;statefulsets&quot;,&quot;cronjobs&quot;,&quot;jobs&quot;,&quot;persistentvolumeclaims&quot;,&quot;ingresses&quot;,&quot;networkpolicies&quot;,&quot;poddisruptionbudgets&quot;]&#125;],&quot;nonResourceRules&quot;:[&#123;&quot;verbs&quot;:[&quot;get&quot;],&quot;nonResourceURLs&quot;:[&quot;/healthz&quot;,&quot;/livez&quot;,&quot;/readyz&quot;,&quot;/version&quot;,&quot;/version/&quot;]&#125;,&#123;&quot;verbs&quot;:[&quot;get&quot;],&quot;nonResourceURLs&quot;:[&quot;/api&quot;,&quot;/api/*&quot;,&quot;/apis&quot;,&quot;/apis/*&quot;,&quot;/healthz&quot;,&quot;/livez&quot;,&quot;/openapi&quot;,&quot;/openapi/*&quot;,&quot;/readyz&quot;,&quot;/version&quot;,&quot;/version/&quot;]&#125;,&#123;&quot;verbs&quot;:[&quot;get&quot;],&quot;nonResourceURLs&quot;:[&quot;/.well-known/openid-configuration&quot;,&quot;/openid/v1/jwks&quot;]&#125;],&quot;incomplete&quot;:fals [truncated 4 chars]</span><br><span class="line">Resources                                       Non-Resource URLs                     Resource Names   Verbs</span><br><span class="line">configmaps.*                                    []                                    []               [*]</span><br><span class="line">cronjobs.*                                      []                                    []               [*]</span><br><span class="line">daemonsets.*                                    []                                    []               [*]</span><br><span class="line">deployments.*                                   []                                    []               [*]</span><br><span class="line">endpoints.*                                     []                                    []               [*]</span><br><span class="line">events.*                                        []                                    []               [*]</span><br><span class="line">ingresses.*                                     []                                    []               [*]</span><br><span class="line">jobs.*                                          []                                    []               [*]</span><br><span class="line">limitranges.*                                   []                                    []               [*]</span><br><span class="line">networkpolicies.*                               []                                    []               [*]</span><br><span class="line">persistentvolumeclaims.*                        []                                    []               [*]</span><br><span class="line">poddisruptionbudgets.*                          []                                    []               [*]</span><br><span class="line">pods.*/log                                      []                                    []               [*]</span><br><span class="line">pods.*/portforward                              []                                    []               [*]</span><br><span class="line">pods.*                                          []                                    []               [*]</span><br><span class="line">podtemplates.*                                  []                                    []               [*]</span><br><span class="line">replicasets.*                                   []                                    []               [*]</span><br><span class="line">replicationcontrollers.*                        []                                    []               [*]</span><br><span class="line">resourcequotas.*                                []                                    []               [*]</span><br><span class="line">secrets.*                                       []                                    []               [*]</span><br><span class="line">serviceaccounts.*                               []                                    []               [*]</span><br><span class="line">services.*                                      []                                    []               [*]</span><br><span class="line">statefulsets.*                                  []                                    []               [*]</span><br><span class="line">selfsubjectaccessreviews.authorization.k8s.io   []                                    []               [create]</span><br><span class="line">selfsubjectrulesreviews.authorization.k8s.io    []                                    []               [create]</span><br><span class="line">                                                [/.well-known/openid-configuration]   []               [get]</span><br><span class="line">                                                [/api/*]                              []               [get]</span><br><span class="line">                                                [/api]                                []               [get]</span><br><span class="line">                                                [/apis/*]                             []               [get]</span><br><span class="line">                                                [/apis]                               []               [get]</span><br><span class="line">                                                [/healthz]                            []               [get]</span><br><span class="line">                                                [/healthz]                            []               [get]</span><br><span class="line">                                                [/livez]                              []               [get]</span><br><span class="line">                                                [/livez]                              []               [get]</span><br><span class="line">                                                [/openapi/*]                          []               [get]</span><br><span class="line">                                                [/openapi]                            []               [get]</span><br><span class="line">                                                [/openid/v1/jwks]                     []               [get]</span><br><span class="line">                                                [/readyz]                             []               [get]</span><br><span class="line">                                                [/readyz]                             []               [get]</span><br><span class="line">                                                [/version/]                           []               [get]</span><br><span class="line">                                                [/version/]                           []               [get]</span><br><span class="line">                                                [/version]                            []               [get]</span><br><span class="line">                                                [/version]                            []               [get]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>搜索 python kubernetes client selfsubjectrulesreviews 搜到官方的 <a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/AuthorizationV1Api.md#create_self_subject_rules_review">create_self_subject_rules_review 示例</a></p><p>试了下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat t2</span><br><span class="line"></span><br><span class="line">from kubernetes import client, config</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    body = client.V1SelfSubjectRulesReview()</span><br><span class="line">    print(body)</span><br><span class="line">$ python t2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;t2&quot;, line 5, in &lt;module&gt;</span><br><span class="line">    body = client.V1SelfSubjectRulesReview()</span><br><span class="line">  File &quot;/usr/local/lib/python3.7/site-packages/kubernetes/client/models/v1_self_subject_rules_review.py&quot;, line 70, in __init__</span><br><span class="line">    self.spec = spec</span><br><span class="line">  File &quot;/usr/local/lib/python3.7/site-packages/kubernetes/client/models/v1_self_subject_rules_review.py&quot;, line 160, in spec</span><br><span class="line">    raise ValueError(&quot;Invalid value for `spec`, must not be `None`&quot;)  # noqa: E501</span><br><span class="line">ValueError: Invalid value for `spec`, must not be `None`</span><br></pre></td></tr></table></figure><p>大概看了下这个类 <code>V1SelfSubjectRulesReview</code>，需要传递 spec 属性才不会报错，点击跳转到模块源码里，没看到啥有用的参考，毕竟弱语言类型。后面找了个 <a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1SelfSubjectRulesReviewSpec.md">V1SelfSubjectRulesReviewSpec</a>，单独传个空的 v1 spec 就会报错缺少 namespace，按照 python 的 client 库习惯，尝试了下面的还是报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rule_review_spec = client.V1SelfSubjectAccessReviewSpec(namespace=&#x27;xxx&#x27;)</span><br><span class="line">body = c.V1SelfSubjectRulesReview(spec=rule_review_spec)</span><br></pre></td></tr></table></figure><p>最后摸索出来下面这样才对，真是无语了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body = client.V1SelfSubjectRulesReview(spec=&#123;<span class="string">&quot;namespace&quot;</span>: namespace&#125;)</span><br><span class="line">result = client.AuthorizationV1Api().create_self_subject_rules_review(body=body)</span><br><span class="line"><span class="keyword">return</span> result.status.resource_rules</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&#x27;api_groups&#x27;: [&#x27;authorization.k8s.io&#x27;],</span><br><span class="line"> &#x27;resource_names&#x27;: None,</span><br><span class="line"> &#x27;resources&#x27;: [&#x27;selfsubjectaccessreviews&#x27;, &#x27;selfsubjectrulesreviews&#x27;],</span><br><span class="line"> &#x27;verbs&#x27;: [&#x27;create&#x27;]&#125;, &#123;&#x27;api_groups&#x27;: [&#x27;*&#x27;],</span><br><span class="line"> &#x27;resource_names&#x27;: None,</span><br><span class="line"> &#x27;resources&#x27;: [&#x27;secrets&#x27;,</span><br><span class="line">               &#x27;configmaps&#x27;,</span><br><span class="line">               &#x27;serviceaccounts&#x27;,</span><br><span class="line">               &#x27;endpoints&#x27;,</span><br><span class="line">               &#x27;events&#x27;,</span><br><span class="line">               &#x27;pods&#x27;,</span><br><span class="line">               &#x27;pods/log&#x27;,</span><br><span class="line">               &#x27;pods/portforward&#x27;,</span><br><span class="line">               &#x27;podtemplates&#x27;,</span><br><span class="line">               &#x27;resourcequotas&#x27;,</span><br><span class="line">               &#x27;limitranges&#x27;,</span><br><span class="line">               &#x27;services&#x27;,</span><br><span class="line">               &#x27;replicationcontrollers&#x27;,</span><br><span class="line">               &#x27;daemonsets&#x27;,</span><br><span class="line">               &#x27;deployments&#x27;,</span><br><span class="line">               &#x27;replicasets&#x27;,</span><br><span class="line">               &#x27;statefulsets&#x27;,</span><br><span class="line">               &#x27;cronjobs&#x27;,</span><br><span class="line">               &#x27;jobs&#x27;,</span><br><span class="line">               &#x27;persistentvolumeclaims&#x27;,</span><br><span class="line">               &#x27;ingresses&#x27;,</span><br><span class="line">               &#x27;networkpolicies&#x27;,</span><br><span class="line">               &#x27;poddisruptionbudgets&#x27;],</span><br><span class="line"> &#x27;verbs&#x27;: [&#x27;*&#x27;]&#125;]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#documentation-for-api-endpoints">documentation-for-api-endpoints</a></li><li><a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md">官方 client 库的 readme，里面有方法名字对应调用的哪个 URL</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;这几天内部有个功能就是看 kubernetes client 的权限有哪些&lt;/p&gt;
&lt;h2 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; cl</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://zhangguanzhang.github.io/tags/kubernetes/"/>
    
    <category term="python" scheme="http://zhangguanzhang.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>server 端的 cannot assign requested address</title>
    <link href="http://zhangguanzhang.github.io/2022/03/16/cannot-assign-requested-address/"/>
    <id>http://zhangguanzhang.github.io/2022/03/16/cannot-assign-requested-address/</id>
    <published>2022-03-16T20:28:30.000Z</published>
    <updated>2022-03-16T20:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>今天碰到了这个问题，但是最终结果出乎意料</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="项目相关部分"><a href="#项目相关部分" class="headerlink" title="项目相关部分"></a>项目相关部分</h3><p>客户的 OA 对接我们的应用，使用过程中会调用我们的接口，我们的接口再回调客户的回调地址。调用流是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户 OA 后端 ----&gt; 我们应用 A 的后端 -----&gt; 我们应用 B 后端  -----&gt; 客户写的回调地址</span><br></pre></td></tr></table></figure><p>然后我们接口 A 返回 B 访问回调的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Get http://10.192.xxx.xxx/xxxxinfo?...: dial tcp 10.192.xxx.xxx:80: connect: cannot assign requested address&quot;</span><br></pre></td></tr></table></figure><h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><p>一开始看到这个报错的时候就知道，这个报错是 TCP 四元组哪个组不够用都会报错这个的，但是最优先和最常见的就是 client 的端口耗尽，也就是 client 端的 port range 不够用了，一般是这个 B 服务机器上 client 的端口达到上限了，可以通过下面参数调整下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a |&amp; grep port | grep range</span><br></pre></td></tr></table></figure><p>结果实际上上去 B 服务上 curl 这个 url 能返回 http 状态码。起初以为真的是我们服务 B 在瞬间有端口没释放的 bug，但是 curl 能返回 http 状态码（但是内容是空的），说明 tcp 层面没问题。因为 http 返回信息是空的，我们初步怀疑到是客户的回调服务偷偷更新了后导致的。后面让客户取消掉他们回调 url 的后端校验 token 逻辑。他们换了后还是一样，然后他们把这个接口的逻辑代码截图了，以及把回调服务的日志发过来的。</p><p>看了下日志，发现报错信息里有 token 校验过的和没有校验成功的，校验失败的那些原因都是过期了。询问了下发现回调的 IP 后面有好几个服务副本，让客户他们去检查机器时间试试，然后客户下班了，另一个同事说可以单独修改我们服务 B 的设置，指向单台副本绕过负载均衡试试，最后发现 5 个每个单独都正常，指向负载均衡的 IP 就不行，询问后发现是硬件负载均衡。最后第二天客户排查到是硬件负载均衡的连接数异常。是深信服的硬件负载均衡。</p><h2 id="结论和学习"><a href="#结论和学习" class="headerlink" title="结论和学习"></a>结论和学习</h2><p>其实一开始的 curl 正常能返回 http 状态码就说明 tcp 没问题，不过这次也算是见识到了，server 端的端口不够也会返回 <code>cannot assign requested address</code> 的报错，也就是主动打开还是被动打开，这个错误的信息都是一样的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;今天碰到了这个问题，但是最终结果出乎意料&lt;/p&gt;
&lt;h2 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="tcp" scheme="http://zhangguanzhang.github.io/tags/tcp/"/>
    
    <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>keepalived static link build</title>
    <link href="http://zhangguanzhang.github.io/2022/02/24/keepalived-static-build/"/>
    <id>http://zhangguanzhang.github.io/2022/02/24/keepalived-static-build/</id>
    <published>2022-02-24T14:28:30.000Z</published>
    <updated>2022-02-24T14:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>之前那篇 ipvs svc 的文章，内部已经上生产了，客户的环境可能完全内网，包管理安装 keepalived 不现实，所以 keepalived 是部署容器里的。在容灾测试的时候，例如 3 台机器部署好业务，然后跑压测脚本模拟用户使用，发现关台机器的时候故障时间很短，但是这个机器开机的期间，还是很大概率故障时间很长，体现在接口的错误数量很多。大概看了下，是 keepalived 启动慢，先试启动 docker daemon，然后容器启动是顺序不固定，可能 keepalived 很后起来，于是就想着看看能不能 keepalived 拿出来，也就是静态编译。</p><h3 id="buildx-使用"><a href="#buildx-使用" class="headerlink" title="buildx 使用"></a>buildx 使用</h3><p>见文章 <a href="https://github.com/zhangguanzhang/docker-need-to-know/blob/master/2.docker-image/dockerfile/buildx.md">buildx 使用</a></p><h3 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h3><p>在官方仓库提了 issue <a href="https://github.com/acassen/keepalived/issues/2107">is there any way to static build</a> 后，和开发者沟通尝试过不少姿势都不行，然后有个大佬 hack 下编译成功了。开发者参照改了下后我试了下最新源码试可以整出来了。</p><p>主要是在 alpine 容器构建:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/acassen/keepalived.git</span><br><span class="line"><span class="built_in">cd</span> keepalived</span><br><span class="line">docker run -v <span class="variable">$PWD</span>:/opt --workdir /opt --<span class="built_in">rm</span> -ti alpine</span><br></pre></td></tr></table></figure><p>构建依赖参考仓库里的 <a href="https://github.com/acassen/keepalived/blob/master/Dockerfile.in">Dockerfile.in</a> , static 库之类的可以 <a href="https://pkgs.alpinelinux.org/packages?name=*-static*&branch=edge&repo=main">alpinelinux</a> 上去搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">if [ -f /etc/apk/repositories ];then sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories; fi &amp;&amp; \</span><br><span class="line">    if [ -f /etc/apt/sources.list ];then sed -ri &#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list; fi &amp;&amp; \</span><br><span class="line">    if [ ! -e /etc/nsswitch.conf ];then echo &#x27;hosts: files dns myhostname&#x27; &gt; /etc/nsswitch.conf; fi</span><br><span class="line"></span><br><span class="line">apk --no-cache add \</span><br><span class="line">    binutils \</span><br><span class="line">    file \</span><br><span class="line">    file-dev \</span><br><span class="line">    gcc \</span><br><span class="line">    glib \</span><br><span class="line">    glib-dev \</span><br><span class="line">    ipset \</span><br><span class="line">    ipset-dev \</span><br><span class="line">    iptables \</span><br><span class="line">    iptables-dev \</span><br><span class="line">    libmnl-dev \</span><br><span class="line">    libnftnl-dev \</span><br><span class="line">    libnl3 \</span><br><span class="line">    libnl3-dev \</span><br><span class="line">    make \</span><br><span class="line">    musl-dev \</span><br><span class="line">    net-snmp-dev \</span><br><span class="line">    openssl \</span><br><span class="line">    openssl-dev \</span><br><span class="line">    openssl-libs-static \</span><br><span class="line">    pcre2 \</span><br><span class="line">    pcre2-dev \</span><br><span class="line">    autoconf \</span><br><span class="line">    automake zlib-static  alpine-sdk linux-headers  libmnl-static</span><br></pre></td></tr></table></figure><p>当然，你会发现没有 <code>configure</code> 脚本，可以参照 <a href="https://github.com/acassen/keepalived/blob/master/INSTALL">INSTALL</a> 里执行 <code>./autogen.sh</code> 生成，INSTALL 里可以参考下，有些包名在 os 上可能换了名字。同时如果要折腾的话，建议看下 <code>--help</code> 的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure --help</span><br></pre></td></tr></table></figure><p>静态编译的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS=&#x27;-static -s&#x27; LDFLAGS=-static ./configure  --disable-dynamic-linking \</span><br><span class="line">    --prefix=/usr \</span><br><span class="line">    --exec-prefix=/usr \</span><br><span class="line">    --bindir=/usr/bin \</span><br><span class="line">    --sbindir=/usr/sbin \</span><br><span class="line">    --sysconfdir=/etc \</span><br><span class="line">    --datadir=/usr/share \</span><br><span class="line">    --localstatedir=/var \</span><br><span class="line">    --mandir=/usr/share/man \</span><br><span class="line">    --enable-bfd \</span><br><span class="line">    --enable-snmp \</span><br><span class="line">    --enable-snmp-rfc \</span><br><span class="line">    --enable-nftables \</span><br><span class="line">    --enable-regex \</span><br><span class="line">    --enable-json  --with-init=systemd --enable-vrrp --enable-libnl-dynamic</span><br></pre></td></tr></table></figure><p>配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Keepalived version       : 2.2.7</span><br><span class="line">Compiler                 : gcc gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027</span><br><span class="line">Preprocessor flags       : -D_GNU_SOURCE -DNETSNMP_NO_INLINE</span><br><span class="line">Compiler flags           : -g -static -s -Wall -Wextra -Wunused -Wstrict-prototypes -Wabi -Wabsolute-value -Waddress-of-packed-member -Walloca -Walloc-zero -Warith-conversion -Warray-bounds=2 -Wattribute-alias=2 -Wbad-function-cast -Wc11-c2x-compat -Wcast-align -Wcast-qual -Wdate-time -Wdisabled-optimization -Wdouble-promotion -Wduplicated-branches -Wduplicated-cond -Wfloat-conversion -Wfloat-equal -Wformat-overflow -Wformat-security -Wformat-signedness -Wformat-truncation -Wframe-larger-than=5120 -Wimplicit-fallthrough=3 -Winit-self -Winline -Winvalid-pch -Wjump-misses-init -Wlogical-op -Wmissing-declarations -Wmissing-field-initializers -Wmissing-include-dirs -Wmissing-prototypes -Wnested-externs -Wnormalized -Wnull-dereference -Wold-style-definition -Woverlength-strings -Wpointer-arith -Wredundant-decls -Wshadow -Wshift-overflow=2 -Wstack-protector -Wstrict-overflow=4 -Wstringop-overflow=2 -Wstringop-truncation -Wsuggest-attribute=cold -Wsuggest-attribute=const -Wsuggest-attribute=format -Wsuggest-attribute=malloc -Wsuggest-attribute=noreturn -Wsuggest-attribute=pure -Wsync-nand -Wtrampolines -Wundef -Wuninitialized -Wunknown-pragmas -Wunsafe-loop-optimizations -Wunsuffixed-float-constants -Wunused-const-variable=2 -Wvariadic-macros -Wwrite-strings -fPIE -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -O2</span><br><span class="line">Linker flags             : -static -pie -Wl,-z,relro -Wl,-z,now -L/usr/lib</span><br><span class="line">Extra Lib                : -lm -lssl -lcrypto -lnftnl -lmnl -lpcre2-8 -lnetsnmpmibs -lnetsnmpagent -lnetsnmp -lcrypto</span><br><span class="line">Use IPVS Framework       : Yes</span><br><span class="line">IPVS use libnl           : No</span><br><span class="line">IPVS syncd attributes    : Yes</span><br><span class="line">IPVS 64 bit stats        : Yes</span><br><span class="line">HTTP_GET regex support   : Yes</span><br><span class="line">fwmark socket support    : Yes</span><br><span class="line">Use VRRP Framework       : Yes</span><br><span class="line">Use VRRP VMAC            : Yes</span><br><span class="line">Use VRRP authentication  : Yes</span><br><span class="line">With track_process       : Yes</span><br><span class="line">With linkbeat            : Yes</span><br><span class="line">Use BFD Framework        : Yes</span><br><span class="line">SNMP vrrp support        : Yes</span><br><span class="line">SNMP checker support     : Yes</span><br><span class="line">SNMP RFCv2 support       : Yes</span><br><span class="line">SNMP RFCv3 support       : Yes</span><br><span class="line">SNMP send V3 for V2      : Yes</span><br><span class="line">DBUS support             : No</span><br><span class="line">Use JSON output          : Yes</span><br><span class="line">libnl version            : None</span><br><span class="line">Use IPv4 devconf         : Yes</span><br><span class="line">Use iptables             : No</span><br><span class="line">Use nftables             : Yes</span><br><span class="line">init type                : systemd</span><br><span class="line">systemd notify           : No</span><br><span class="line">Strict config checks     : No</span><br><span class="line">Build documentation      : No</span><br><span class="line">Default runtime options  : -D</span><br><span class="line"></span><br><span class="line">*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</span><br></pre></td></tr></table></figure><p><code>libnl/libnl-3</code> 这个我试了下加不进去，<code>apk add libnl-dev</code> 可以加上去，但是我看了 alpine 里 <code>keepalived -v</code> 的 configure 里也没我上面开的多。强开我试了 <code>CPPFLAGS=&#39;-I/usr/include/libnl3&#39; LDLIBS=&#39;-lnl3 -lnl-genl-3&#39; </code> 和下载 libnl-3 编译安装后都不行，想折腾和传递参数啥的话，多看看 <code>configure</code> 文件里的内容。</p><p>编译和安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/opt # keepalived -v</span><br><span class="line">Keepalived v2.2.7 (02/23,2022), git commit v2.2.7-22-geb533a93</span><br><span class="line"></span><br><span class="line">Copyright(C) 2001-2022 Alexandre Cassen, &lt;acassen@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">Built with kernel headers for Linux 5.10.41</span><br><span class="line">Running on Linux 5.4.0-99-generic #112-Ubuntu SMP Thu Feb 3 13:50:55 UTC 2022</span><br><span class="line">Distro: Alpine Linux v3.15</span><br><span class="line"></span><br><span class="line">configure options: --disable-dynamic-linking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/share/man --enable-bfd --enable-snmp --enable-snmp-rfc --enable-nftables --enable-regex --enable-json --with-init=systemd --enable-vrrp --enable-libnl-dynamic CFLAGS=-static -s LDFLAGS=-static</span><br><span class="line"></span><br><span class="line">Config options:  NFTABLES LVS REGEX VRRP VRRP_AUTH VRRP_VMAC JSON BFD OLD_CHKSUM_COMPAT SNMP_V3_FOR_V2 SNMP_VRRP SNMP_CHECKER SNMP_RFCV2 SNMP_RFCV3 INIT=systemd</span><br><span class="line"></span><br><span class="line">System options:  VSYSLOG MEMFD_CREATE IPV6_MULTICAST_ALL IPV4_DEVCONF RTA_ENCAP RTA_EXPIRES RTA_NEWDST RTA_PREF FRA_SUPPRESS_PREFIXLEN FRA_SUPPRESS_IFGROUP FRA_TUN_ID RTAX_CC_ALGO RTAX_QUICKACK RTEXT_FILTER_SKIP_STATS FRA_L3MDEV FRA_UID_RANGE RTAX_FASTOPEN_NO_COOKIE RTA_VIA FRA_PROTOCOL FRA_IP_PROTO FRA_SPORT_RANGE FRA_DPORT_RANGE RTA_TTL_PROPAGATE IFA_FLAGS LWTUNNEL_ENCAP_MPLS LWTUNNEL_ENCAP_ILA NET_LINUX_IF_H_COLLISION NETINET_LINUX_IF_ETHER_H_COLLISION IPVS_DEST_ATTR_ADDR_FAMILY IPVS_SYNCD_ATTRIBUTES IPVS_64BIT_STATS IPVS_TUN_TYPE IPVS_TUN_CSUM IPVS_TUN_GRE VRRP_IPVLAN IFLA_LINK_NETNSID INET6_ADDR_GEN_MODE VRF SO_MARK</span><br><span class="line">/opt # file `which keepalived`</span><br><span class="line">/usr/sbin/keepalived: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped</span><br><span class="line">/opt # ldd `which keepalived`</span><br><span class="line">/lib/ld-musl-x86_64.so.1: /usr/sbin/keepalived: Not a valid dynamic program</span><br></pre></td></tr></table></figure><h3 id="buildx-一步到位"><a href="#buildx-一步到位" class="headerlink" title="buildx 一步到位"></a>buildx 一步到位</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine as build</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ -f /etc/apk/repositories ];<span class="keyword">then</span> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ -f /etc/apt/sources.list ];<span class="keyword">then</span> sed -ri <span class="string">&#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ ! -e /etc/nsswitch.conf ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hosts: files dns myhostname&#x27;</span> &gt; /etc/nsswitch.conf; <span class="keyword">fi</span>  &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk --no-cache add \</span></span><br><span class="line"><span class="language-bash">        binutils \</span></span><br><span class="line"><span class="language-bash">        file \</span></span><br><span class="line"><span class="language-bash">        file-dev \</span></span><br><span class="line"><span class="language-bash">        gcc \</span></span><br><span class="line"><span class="language-bash">        glib \</span></span><br><span class="line"><span class="language-bash">        glib-dev \</span></span><br><span class="line"><span class="language-bash">        ipset \</span></span><br><span class="line"><span class="language-bash">        ipset-dev \</span></span><br><span class="line"><span class="language-bash">        iptables \</span></span><br><span class="line"><span class="language-bash">        iptables-dev \</span></span><br><span class="line"><span class="language-bash">        libmnl-dev \</span></span><br><span class="line"><span class="language-bash">        libnftnl-dev \</span></span><br><span class="line"><span class="language-bash">        libnl3 \</span></span><br><span class="line"><span class="language-bash">        libnl3-dev \</span></span><br><span class="line"><span class="language-bash">        make \</span></span><br><span class="line"><span class="language-bash">        musl-dev \</span></span><br><span class="line"><span class="language-bash">        net-snmp-dev \</span></span><br><span class="line"><span class="language-bash">        openssl \</span></span><br><span class="line"><span class="language-bash">        openssl-dev \</span></span><br><span class="line"><span class="language-bash">        openssl-libs-static \</span></span><br><span class="line"><span class="language-bash">        pcre2 \</span></span><br><span class="line"><span class="language-bash">        pcre2-dev \</span></span><br><span class="line"><span class="language-bash">        autoconf \</span></span><br><span class="line"><span class="language-bash">        automake zlib-static  alpine-sdk linux-headers  libmnl-static git</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> https://github.com/acassen/keepalived.git</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /opt/keepalived &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./autogen.sh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    CFLAGS=<span class="string">&#x27;-static -s&#x27;</span> LDFLAGS=-static ./configure  --disable-dynamic-linking \</span></span><br><span class="line"><span class="language-bash">    --prefix=/usr \</span></span><br><span class="line"><span class="language-bash">    --exec-prefix=/usr \</span></span><br><span class="line"><span class="language-bash">    --bindir=/usr/bin \</span></span><br><span class="line"><span class="language-bash">    --sbindir=/usr/sbin \</span></span><br><span class="line"><span class="language-bash">    --sysconfdir=/etc \</span></span><br><span class="line"><span class="language-bash">    --datadir=/usr/share \</span></span><br><span class="line"><span class="language-bash">    --localstatedir=/var \</span></span><br><span class="line"><span class="language-bash">    --mandir=/usr/share/man \</span></span><br><span class="line"><span class="language-bash">    --enable-bfd \</span></span><br><span class="line"><span class="language-bash">    --enable-snmp \</span></span><br><span class="line"><span class="language-bash">    --enable-snmp-rfc \</span></span><br><span class="line"><span class="language-bash">    --enable-nftables \</span></span><br><span class="line"><span class="language-bash">    --enable-regex \</span></span><br><span class="line"><span class="language-bash">    --enable-json  --with-init=systemd --enable-vrrp --enable-libnl-dynamic</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> /opt/keepalived &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make DESTDIR=/install_root install &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    find /install_root &amp;&amp; \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># delete the docs</span></span></span><br><span class="line">    rm -rf /install_root/usr/share</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch AS bin</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /install_root /</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构建:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build  . --platform linux/amd64,linux/arm64 \</span><br><span class="line">    --target bin --output . </span><br></pre></td></tr></table></figure><p>信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ./usr/sbin/keepalived -v</span><br><span class="line">Keepalived v2.2.7 (02/23,2022), git commit v2.2.7-22-geb533a93</span><br><span class="line"></span><br><span class="line">Copyright(C) 2001-2022 Alexandre Cassen, &lt;acassen@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">Built with kernel headers for Linux 5.10.41</span><br><span class="line">Running on Linux 5.4.0-99-generic #112-Ubuntu SMP Thu Feb 3 13:50:55 UTC 2022</span><br><span class="line">Distro: Ubuntu 20.04.3 LTS</span><br><span class="line"></span><br><span class="line">configure options: --disable-dynamic-linking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/share/man --enable-bfd --enable-snmp --enable-snmp-rfc --enable-nftables --enable-regex --enable-json --with-init=systemd --enable-vrrp --enable-libnl-dynamic CFLAGS=-static -s LDFLAGS=-static</span><br><span class="line"></span><br><span class="line">Config options:  NFTABLES LVS REGEX VRRP VRRP_AUTH VRRP_VMAC JSON BFD OLD_CHKSUM_COMPAT SNMP_V3_FOR_V2 SNMP_VRRP SNMP_CHECKER SNMP_RFCV2 SNMP_RFCV3 INIT=systemd</span><br><span class="line"></span><br><span class="line">System options:  VSYSLOG MEMFD_CREATE IPV6_MULTICAST_ALL IPV4_DEVCONF RTA_ENCAP RTA_EXPIRES RTA_NEWDST RTA_PREF FRA_SUPPRESS_PREFIXLEN FRA_SUPPRESS_IFGROUP FRA_TUN_ID RTAX_CC_ALGO RTAX_QUICKACK RTEXT_FILTER_SKIP_STATS FRA_L3MDEV FRA_UID_RANGE RTAX_FASTOPEN_NO_COOKIE RTA_VIA FRA_PROTOCOL FRA_IP_PROTO FRA_SPORT_RANGE FRA_DPORT_RANGE RTA_TTL_PROPAGATE IFA_FLAGS LWTUNNEL_ENCAP_MPLS LWTUNNEL_ENCAP_ILA NET_LINUX_IF_H_COLLISION NETINET_LINUX_IF_ETHER_H_COLLISION IPVS_DEST_ATTR_ADDR_FAMILY IPVS_SYNCD_ATTRIBUTES IPVS_64BIT_STATS IPVS_TUN_TYPE IPVS_TUN_CSUM IPVS_TUN_GRE VRRP_IPVLAN IFLA_LINK_NETNSID INET6_ADDR_GEN_MODE VRF SO_MARK</span><br><span class="line"></span><br><span class="line">$ ldd ./usr/sbin/keepalived </span><br><span class="line">not a dynamic executable</span><br><span class="line">$ file ./usr/sbin/keepalived</span><br><span class="line">./usr/sbin/keepalived: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped</span><br><span class="line">$ ls -lh ./usr/sbin/keepalived</span><br><span class="line">-rwxr-xr-x 1 root root 4.4M Feb 24 17:56 ./usr/sbin/keepalived</span><br></pre></td></tr></table></figure><p>试了下 arm64的也可以构建 <code>--platform linux/amd64,linux/arm64</code> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;之前那篇 ipvs svc 的文章，内部已经上生产了，客户的环境可能完全内网，包管理安装 keepalived 不现实，所以 keepali</summary>
      
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="keepalived" scheme="http://zhangguanzhang.github.io/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>proxmox 开机 error: disk &#39;lvmid/[vg uuid]/[lv uuid]&#39; not found</title>
    <link href="http://zhangguanzhang.github.io/2022/02/18/proxmox-boot-disk-lvmid-not-found/"/>
    <id>http://zhangguanzhang.github.io/2022/02/18/proxmox-boot-disk-lvmid-not-found/</id>
    <published>2022-02-18T14:17:30.000Z</published>
    <updated>2022-02-18T14:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>一次 proxmox 机器突然宕机，开机后进入 grub resuce 无法启动的处理过程</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>上午 ssh 到 proxmox 上的虚机上做实验，突然机器断开了，以为是虚机的问题，结果发现是 proxmox 机器有问题了，接上显示器重启看到进入了 grub rescue 模式。</p><p>pve 版本信息为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pveversion</span><br><span class="line">pve-manager/6.2-4/9824574a (running kernel: 5.4.34-1-pve)</span><br><span class="line"># 2022/04/06 </span><br><span class="line"># 帮别人一个 7.1-7 的这样问题也是按照文章步骤恢复的</span><br><span class="line"># 并更新文章里部分命令和介绍</span><br></pre></td></tr></table></figure><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>错误信息为如下，暂时看了下 lvm 是存在的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: disk `lvmid/ExzA22-yHkV-0ymE-XbMT-zrD6-69Wp-bboRVP/zbB3V2-Kg2Y-EdI6-dbs1-6uSo-e6wk-ZRBJdh&#x27; not found.</span><br><span class="line">Entering rescue mode...</span><br><span class="line">grub rescue&gt; ls</span><br><span class="line">(lvm/pve-root) (lvm/pve-swap) (hd0) (hd1) (hd1,gpt3) (hd1,gpt2) (hd1,gpt1) </span><br></pre></td></tr></table></figure><h3 id="进入-rescue-模式"><a href="#进入-rescue-模式" class="headerlink" title="进入 rescue 模式"></a>进入 rescue 模式</h3><p>搞个 u 盘，把 CentOS 7.9 minimal 的 ISO 烧录进去后，插到 proxmox 的 USB 口子上，开机 F12 选择从 U 盘启动。<br>选择 <code>Troubleshooting –&gt; Rescue</code> 选中 <code>Rescue a CentOS system</code> ，一直等待，有交互后，选择 3，也就是 <code>3) Skip to shell</code>。</p><p>先看下 lvm 信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ pvs</span><br><span class="line">  PV         VG  Fmt  Attr PSize    PFree  </span><br><span class="line">  /dev/sda1  pve lvm2 a--  &lt;931.51g 697.50g</span><br><span class="line">  /dev/sdb3  pve lvm2 a--  &lt;476.44g      0</span><br><span class="line">$ vgs</span><br><span class="line">  VG  #PV #LV #SN Attr   VSize VFree  </span><br><span class="line">  pve   2  23   0 wz--n- 1.37t 697.50g</span><br><span class="line">$ lvs</span><br><span class="line">  LV                           VG  Attr       LSize    Pool Origin          Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  base-101-disk-0              pve Vri---tz-k   10.00g data                                                        </span><br><span class="line">  base-106-disk-0              pve Vri---tz-k   20.00g data                                                        </span><br><span class="line">  data                         pve twi-aotz-- &lt;550.29g                      73.93  6.08                            </span><br><span class="line">  root                         pve -wi-ao----  146.00g                                                             </span><br><span class="line">  snap_vm-102-disk-0_a20210429 pve Vri---tz-k   30.00g data vm-102-disk-0                                          </span><br><span class="line">  swap                         pve -wi-ao----    7.00g                                                             </span><br><span class="line">  vm-100-cloudinit             pve Vwi-a-tz--    4.00m data                 9.38                                   </span><br><span class="line">  vm-100-disk-0                pve Vwi-a-tz--   10.00g data base-101-disk-0 16.65                                  </span><br><span class="line">  vm-100-disk-1                pve Vwi-a-tz--    7.00g data                 0.17                                   </span><br><span class="line">  vm-101-cloudinit             pve Vwi-a-tz--    4.00m data                 0.00                                   </span><br><span class="line">  vm-102-cloudinit             pve Vwi-aotz--    4.00m data                 9.38                                   </span><br><span class="line">  vm-102-disk-0                pve Vwi-aotz--  100.00g data                 73.78                                  </span><br><span class="line">  vm-102-state-a20210429       pve Vwi-a-tz--   &lt;8.49g data                 44.03                                  </span><br><span class="line">  vm-103-disk-0                pve Vwi-a-tz--   25.00g data                 99.98                                  </span><br><span class="line">  vm-104-disk-0                pve Vwi-a-tz--   &lt;2.02g data                 99.31                                  </span><br><span class="line">  vm-105-cloudinit             pve Vwi-a-tz--    4.00m data                 9.38                                   </span><br><span class="line">  vm-105-disk-0                pve Vwi-a-tz--   10.00g data                 85.13                                  </span><br><span class="line">  vm-106-cloudinit             pve Vwi-a-tz--    4.00m data                 0.00                                   </span><br><span class="line">  vm-107-cloudinit             pve Vwi-a-tz--    4.00m data                 9.38                                   </span><br><span class="line">  vm-107-disk-0                pve Vwi-a-tz--   30.00g data                 65.94                                  </span><br><span class="line">  vm-108-cloudinit             pve Vwi-aotz--    4.00m data                 9.38                                   </span><br><span class="line">  vm-108-disk-0                pve Vwi-aotz--  250.00g data                 99.21                                  </span><br><span class="line">  vm-200-disk-0                pve Vwi-aotz--   &lt;2.02g data                 99.31 </span><br></pre></td></tr></table></figure><p>激活下 vg 看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vgchange -a y</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">/usr/sbin/dmeventd: stat failed: No such file or directory</span><br><span class="line">WARNING: Failed to monirot pve/data.</span><br><span class="line">...</span><br><span class="line">20 logical volume(s) in volume group &quot;pve&quot; now active</span><br></pre></td></tr></table></figure><p>手动挂载下看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mount /dev/mapper/pve-root /mnt/sysimage</span><br><span class="line"></span><br><span class="line"># 如果报错 </span><br><span class="line">       mount: wrong fs type, bad option, bad superblock on /dev/mapper/pve-root,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br><span class="line"># 建议 pve 的 iso 进入救援模式，去修复上面的分区路径，pve 的 root 分区一般是 ext4 文件系统，所以修复下试试</span><br><span class="line">$ fsck.ext4 -y /dev/mapper/pve-root</span><br><span class="line"></span><br><span class="line"># 如果是 centos 的 iso rescue 里使用 e2fsck ，可能会报错版本低：</span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">/dev/mapper/pve-root has unsupported feature(s): metadata_csum</span><br><span class="line">e2fsck: Get a newer version of e2fsck!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cd /mnt/sysimage</span><br><span class="line">$ ls -l boot/</span><br><span class="line">total 58496</span><br><span class="line">-rw-r--r-- 1 root root   237698 May  7  2020 config-5.4.34-1-pve</span><br><span class="line">drwxr-xr-x 3 root root     4096 Jan  1  1970 efi</span><br><span class="line">drwxr-xr-x 6 root root     4096 Feb 18 12:59 grub</span><br><span class="line">-rw-r--r-- 1 root root 42573458 Aug 18  2021 initrd.img-5.4.34-1-pve</span><br><span class="line">-rw-r--r-- 1 root root   182704 Jun 26  2015 memtest86+.bin</span><br><span class="line">-rw-r--r-- 1 root root   184840 Jun 26  2015 memtest86+_multiboot.bin</span><br><span class="line">drwxr-xr-x 2 root root     4096 Sep  9  2020 pve</span><br><span class="line">-rw-r--r-- 1 root root  4795341 May  7  2020 System.map-5.4.34-1-pve</span><br><span class="line">-rw-r--r-- 1 root root 11901312 May  7  2020 vmlinuz-5.4.34-1-pve</span><br><span class="line">$ cp etc/lvm/backup/pve root/pve</span><br></pre></td></tr></table></figure><p>然后 chroot 进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount -o bind /dev /mnt/sysimage/dev</span><br><span class="line">mount -o bind /proc /mnt/sysimage/proc</span><br><span class="line">mount -o bind /run /mnt/sysimage/run</span><br><span class="line">mount -o bind /sys /mnt/sysimage/sys</span><br><span class="line"># 上面如果在chroot之前不 mount 会导致一些lstat /dev /proc /sys 的命令报错无法读取这些目录 </span><br><span class="line">chroot /mnt/sysimage</span><br></pre></td></tr></table></figure><p>里面去折腾了下，好像是 vg 和 lv 的 uuid 变了，尝试<code>vgcfgrestore</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 结尾 pve 是 root 所在的 vg 名字</span><br><span class="line">vgcfgrestore --test -f /etc/lvm/backup/pve pve</span><br><span class="line"># 输入 y 回车，失败了就下面的 --force 选项运行</span><br><span class="line">vgcfgrestore --force -f /etc/lvm/backup/pve pve</span><br></pre></td></tr></table></figure><p>重启还是不行，看了下 <code>/etc/lvm/backup/pve</code> 也没啥问题。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>lvm 信息和文件都在，可能是 grub 损坏了。尝试备份 grub.cfg 后 <code>grub-mkconfig</code> 了下， diff 对比了下也没变啥 uuid 相关的地方，然后重启再进 CentOS Rescue 模式里，选择 1 自动挂载。然后尝试 chroot 进去 <code>grub-install</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 没选自动挂载的话记得下面这些命令</span><br><span class="line">mount /dev/mapper/pve-root /mnt/sysimage</span><br><span class="line">mount -o bind /dev /mnt/sysimage/dev</span><br><span class="line">mount -o bind /proc /mnt/sysimage/proc</span><br><span class="line">mount -o bind /run /mnt/sysimage/run</span><br><span class="line">mount -o bind /sys /mnt/sysimage/sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 退出了 chroot 的话就再 chroot 进来</span><br><span class="line">chroot /mnt/sysimage</span><br><span class="line">cd /boot/grub</span><br><span class="line">cp grub.cfg grub.cfg.bak</span><br><span class="line">lvscan</span><br><span class="line">vgscan</span><br><span class="line">pvscan</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/boot/efi</code> 有些机器不是 uefi 启动的，这个时候先看下 <code>/etc/fstab</code> 里有 <code>/boot/efi</code> 的挂载没，有的话就需要下面这样挂载下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/fstab 找到 /boot/efi 的分区的 UUID，lsblk 找到该 UUID 的 dev 设备</span><br><span class="line"># 例如我的是 /dev/sda2 执行下面命令挂载 /boot/efi</span><br><span class="line">mount /dev/sda2 /boot/efi</span><br></pre></td></tr></table></figure><p>grub-install </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># pve 是 grub-install 不是 grub2 也没有 grub2-install</span><br><span class="line">grub-install --debug --recheck --root-directory=/ /dev/mapper/pve-root</span><br><span class="line"># 上面的 grub-install 没失败就可以了</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>然后就好了。</p><h3 id="一些其他命令"><a href="#一些其他命令" class="headerlink" title="一些其他命令"></a>一些其他命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grub-probe -d /dev/mapper/pve-root -t drive</span><br><span class="line"># 如果下面命令报错就无法 grub-install</span><br><span class="line">$ grub-probe -d /dev/mapper/pve-root </span><br><span class="line">ext2</span><br><span class="line"># 用于更新 grub 信息，但是一般对这种情况没多大用貌似</span><br><span class="line">grup-update</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一次 proxmox 机器突然宕机，开机后进入 grub resuce 无法启动的处理过程&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>18.09.03 docker daemon layer broken 的一次不优雅处理</title>
    <link href="http://zhangguanzhang.github.io/2022/02/10/docker-daemon-layer-broken/"/>
    <id>http://zhangguanzhang.github.io/2022/02/10/docker-daemon-layer-broken/</id>
    <published>2022-02-10T14:28:30.000Z</published>
    <updated>2022-02-10T14:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次 18.09.03 docker daemon 存储的层损坏无法修复的过程，虽然不优雅，但是没找到更好的解决办法，暂时记录仅供参考。</p><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>机器重启后，部分 pod 无法启动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Containers: 51</span><br><span class="line"> Running: 27</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 24</span><br><span class="line">Images: 23</span><br><span class="line">Server Version: 18.09.3</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: xfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: e6b3f5632f50dbc4e9cb6288d911bf4f5e95b18e</span><br><span class="line">runc version: 6635b4f0c6af3810594d2770f662f34ddc15b40d</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 3.10.0-693.el7.x86_64</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 8</span><br><span class="line">Total Memory: 15.51GiB</span><br><span class="line">Name: hdzwvm000006238.novalocal</span><br><span class="line">ID: AUFF:32CM:54KK:FA2F:M3GS:EI77:2VSQ:HH3T:2LXM:7AFG:WXAQ:IKSV</span><br><span class="line">Docker Root Dir: /data/kube/docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): false</span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br></pre></td></tr></table></figure><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>初步排查了下确认部分镜像损坏了，比如下面这个，<code>history --no-trunc</code> 看了下这个镜像的 rootfs 是 ubuntu ，结果报错下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -ti --entrypoint bash xxx.cn/base/xxxxxx-amd64:v2</span><br><span class="line">standard_init_linux.go:207: exec user process caused &quot;no such file or directory&quot;</span><br></pre></td></tr></table></figure><p>之前也有类似情况，但是 rmi后 load就好了。这次是 rmi 掉后手动 load 也不行，对比了镜像离线文件的 md5sum 和包里的是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum ./images/xxxxxx-amd64-v2#release_zzzzzzz </span><br><span class="line">cd1cf11ac90d6df59a31460cb1624933  ./images/xxxxxx-amd64-v2#release_zzzzzzz</span><br><span class="line"></span><br><span class="line">$ docker rmi xxx.cn/base/xxxxxx-amd64:v2</span><br><span class="line">Untagged: xxx.cn/base/xxxxxx-amd64:v2</span><br><span class="line">Deleted: sha256:fe7c32d1138c5215dba9fbfa4f675eff47f1a30605d9914fff34a5db00ad45f0</span><br><span class="line">$ docker load -i  xxxxxx-amd64-v2#release_zzzzzzz </span><br><span class="line">Loaded image: xxx.cn/base/xxxxxx-amd64:v2</span><br><span class="line">$ docker run --rm -ti --entrypoint bash xxx.cn/base/xxxxxx-amd64:v2</span><br><span class="line">standard_init_linux.go:207: exec user process caused &quot;no such file or directory&quot;</span><br></pre></td></tr></table></figure><p>然后排查到有安全软件 <code>sangfor</code>，并且机器重启过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep san</span><br><span class="line">root      1183  0.0  0.0 113184  1492 ?        S    Feb09   0:03 /bin/bash /sangfor/edr/agent/bin/eps_services_ctrl</span><br><span class="line">root      5132  0.0  0.0 113436  1696 ?        S    Feb09   0:17 /bin/bash /sangfor/edr/agent/bin/abs_monitor</span><br><span class="line">root      5164  0.0  0.0  48092  3392 ?        S    Feb09   0:04 /sangfor/edr/agent/bin/abs_deployer</span><br><span class="line">root      5205  0.0  0.0  43036  1552 ?        Ss   Feb09   0:07 /sangfor/edr/agent/bin/edr_monitor</span><br><span class="line">root      5378  0.0  0.0 194948  6260 ?        Sl   Feb09   0:04 /sangfor/edr/agent/bin/sfupdatemgr -p edr_monitor</span><br><span class="line">root      5379  0.0  0.0  43360  3560 ?        S    Feb09   0:01 /sangfor/edr/agent/bin/ipc_proxy</span><br><span class="line">root      5380  0.6  0.1 708028 29892 ?        Sl   Feb09   6:56 /sangfor/edr/agent/bin/edr_agent</span><br><span class="line">root      5381  0.1  0.0  17060  1332 ?        S&lt;   Feb09   1:58 /sangfor/edr/agent/bin/cpulimit --limit=50 --exe=edr_agent</span><br><span class="line">root      5382  0.0  0.0 113568  1900 ?        S    Feb09   0:28 /bin/bash /sangfor/edr/agent/bin/asset_collection_cpulimit.sh</span><br><span class="line">root      5383  0.0  0.0 128944  5444 ?        Sl   Feb09   0:27 /sangfor/edr/agent/bin/edr_sec_plan</span><br><span class="line">root      5384  0.0  0.0 117656  8956 ?        S    Feb09   0:00 /sangfor/edr/agent/bin/lloader /sangfor/edr/agent/bin/../lmodules/isolate_area_tool.lua</span><br><span class="line">root      5385  0.0  0.0  68916  3928 ?        S    Feb09   0:01 /sangfor/edr/agent/bin/lloader /sangfor/edr/agent/bin/../lmodules/isolate_area_main.lua</span><br><span class="line">root     22594  0.0  0.0 112712   976 pts/2    S+   11:37   0:00 grep --color=auto san</span><br><span class="line">$ uptime -s</span><br><span class="line">2022-02-09 17:19:09</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br><span class="line">$ tail -n 40 /var/spool/mail/root</span><br><span class="line">...</span><br><span class="line">edr pid 5205</span><br><span class="line">ls: cannot access /sangfor/edr/agent/bin/../packages/: No such file or directory</span><br><span class="line"></span><br><span class="line">$ ll /etc/cron.d</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 128 Aug  3  2017 0hourly</span><br><span class="line">-rw-r--r--  1 root root  60 Dec 10  2020 edr_agent</span><br><span class="line">-rw-------. 1 root root 235 Apr  1  2020 sysstat</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br><span class="line">$ cat edr_agent </span><br><span class="line">* * * * * root /sangfor/edr/agent/bin/eps_services_check.sh</span><br></pre></td></tr></table></figure><p>让客户卸载掉后还是不行，然后 save 了下发现了问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker save -o test.tar xxx.cn/base/xxxxxx-amd64:v2 </span><br><span class="line">Error response from daemon: open /data/kube/docker/overlay2/920a06a6d4eb64db0898234cd3a81b01115d6fcc2cfc50c5107e0205f7230318/diff/lib/x86_64-linux-gnu/ld-2.23.so: no such file or directory</span><br><span class="line">$ docker inspect xxx.cn/base/xxxxxx-amd64:v2 | grep 920a0</span><br><span class="line"> &quot;LowerDir&quot;: ...:/data/kube/docker/overlay2/920a06a6d4eb64db0898234cd3a81b01115d6fcc2cfc50c5107e0205f7230318/diff&quot;,</span><br><span class="line"></span><br><span class="line">$ ls -l /data/kube/docker/overlay2/920a06a6d4eb64db0898234cd3a81b01115d6fcc2cfc50c5107e0205f7230318/diff/lib/x86_64-linux-gnu/ | head</span><br><span class="line">total 10684</span><br><span class="line">lrwxrwxrwx 1 root root      10 Feb  6  2019 ld-linux-x86-64.so.2 -&gt; ld-2.23.so</span><br><span class="line">lrwxrwxrwx 1 root root      15 Feb  7  2016 libacl.so.1 -&gt; libacl.so.1.1.0</span><br><span class="line">-rw-r--r-- 1 root root   31232 Feb  7  2016 libacl.so.1.1.0</span><br><span class="line">-rw-r--r-- 1 root root   14992 Feb  6  2019 libanl-2.23.so</span><br><span class="line">lrwxrwxrwx 1 root root      14 Feb  6  2019 libanl.so.1 -&gt; libanl-2.23.so</span><br><span class="line">lrwxrwxrwx 1 root root      20 May 29  2019 libapparmor.so.1 -&gt; libapparmor.so.1.4.0</span><br><span class="line">-rw-r--r-- 1 root root   64144 May 29  2019 libapparmor.so.1.4.0</span><br><span class="line">lrwxrwxrwx 1 root root      16 Sep  9  2014 libattr.so.1 -&gt; libattr.so.1.1.0</span><br><span class="line">-rw-r--r-- 1 root root   18624 Sep  9  2014 libattr.so.1.1.0</span><br></pre></td></tr></table></figure><p>把那个镜像的离线文件拿到其他机器上 load 后看了下该层是有文件 <code>ld-2.23.so</code> 的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ll b5f1b3d6665a476b9460532568499f2923c1621d710f6a1e20cf7f3e1a928e17/diff/lib/x86_64-linux-gnu/</span><br><span class="line">total 10844</span><br><span class="line">-rwxr-xr-x 1 root root  162632 Feb  6  2019 ld-2.23.so</span><br><span class="line">lrwxrwxrwx 1 root root      10 Feb  6  2019 ld-linux-x86-64.so.2 -&gt; ld-2.23.so</span><br></pre></td></tr></table></figure><p>最后本地试了下，发现如果 daemon 的层损坏了，rmi 后 load 是不会重新覆盖的，正常 load 一个新镜像 load 的时候是会有层显示的，类似下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker load -i netshoot#latest </span><br><span class="line">b2d5eeeaba3a: Loading layer [==================================================&gt;]   5.88MB/5.88MB</span><br><span class="line">681ff9ab4914: Loading layer [==================================================&gt;]  301.4MB/301.4MB</span><br><span class="line">0e91662a9cb3: Loading layer [==================================================&gt;]  8.683MB/8.683MB</span><br><span class="line">fdcdfe126cc0: Loading layer [==================================================&gt;]  13.63MB/13.63MB</span><br><span class="line">270c883ade5e: Loading layer [==================================================&gt;]  45.31MB/45.31MB</span><br><span class="line">06e19b7687c5: Loading layer [==================================================&gt;]  14.54MB/14.54MB</span><br><span class="line">def3433d213c: Loading layer [==================================================&gt;]  4.566MB/4.566MB</span><br><span class="line">5b6adb9801a8: Loading layer [==================================================&gt;]  869.9kB/869.9kB</span><br><span class="line">765e2d110fbc: Loading layer [==================================================&gt;]  1.831MB/1.831MB</span><br><span class="line">eead121d6964: Loading layer [==================================================&gt;]  7.168kB/7.168kB</span><br><span class="line">400127227d7a: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">2b4f749a4a39: Loading layer [==================================================&gt;]  6.571MB/6.571MB</span><br><span class="line">Loaded image: netshoot:latest</span><br><span class="line">$ docker load -i netshoot#latest </span><br><span class="line">Loaded image: netshoot:latest</span><br></pre></td></tr></table></figure><p>只有镜像存在的情况下只显示一个 <code>Loaded image</code>，回看之前我们 rmi 后 load 就是没有层显示。看了下代码暂时没看出怎么判断是否已存在的，然后把 overlay2 目录删了暂时解决的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.k8s.li/Exploring-container-image.html">深入浅出容器镜像的一生</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一次 18.09.03 docker daemon 存储的层损坏无法修复的过程，虽然不优雅，但是没找到更好的解决办法，暂时记录仅供参考。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>利用 docker buildx 静态编译 nginx</title>
    <link href="http://zhangguanzhang.github.io/2022/01/26/nginx-static-build/"/>
    <id>http://zhangguanzhang.github.io/2022/01/26/nginx-static-build/</id>
    <published>2022-01-26T14:28:30.000Z</published>
    <updated>2022-01-26T14:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>内部有需求需要静态编译 nginx，尝试了下，搞出来了。先是按照官方 nginx Dockerfile 的逻辑走不通，后面下载 nginx 官方源码编译才行。</p><h3 id="buildx-使用"><a href="#buildx-使用" class="headerlink" title="buildx 使用"></a>buildx 使用</h3><p>见文章 <a href="https://github.com/zhangguanzhang/docker-need-to-know/blob/master/2.docker-image/dockerfile/buildx.md">buildx 使用</a></p><h3 id="nginx-Dockerfile"><a href="#nginx-Dockerfile" class="headerlink" title="nginx Dockerfile"></a>nginx Dockerfile</h3><p>先说下官方的失败尝试。先 clone 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nginxinc/docker-nginx.git</span><br><span class="line"><span class="built_in">cd</span> docker-nginx</span><br></pre></td></tr></table></figure><p>分为 <code>stable</code> 和 <code>mainline</code>。大概研究了下，发现 <code>case &quot;$apkArch&quot; in x86_64|aarch64)</code> 的情况是利用包管理直接安装的，其他的架构才是源码编译安装。改了下这个 case ，先用 arm64 的试下走源码编译。然后看下逻辑是下载源码进去 <code>make all</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -f -O https://hg.nginx.org/pkg-oss/archive/$&#123;NGINX_VERSION&#125;-$&#123;PKG_RELEASE&#125;.tar.gz</span><br><span class="line">tar xzvf $&#123;NGINX_VERSION&#125;-$&#123;PKG_RELEASE&#125;.tar.gz</span><br><span class="line">&amp;&amp; cd pkg-oss-$&#123;NGINX_VERSION&#125;-$&#123;PKG_RELEASE&#125; \</span><br><span class="line">&amp;&amp; cd alpine \</span><br><span class="line">&amp;&amp; make all </span><br></pre></td></tr></table></figure><p>而源码里 <code>Makefile</code> 的前面内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(MODULE_TARGET), plus)</span><br><span class="line">APKBUILD_TEMPLATE=APKBUILD-plus-module.in</span><br><span class="line">MODULE_SUFFIX=-plus</span><br><span class="line">MODULE_SUMMARY_PREFIX=NGINX Plus</span><br><span class="line">TARGET_VERSION=$(PLUS_VERSION)</span><br><span class="line">MODULE_PACKAGE_PREFIX=nginx-plus-module</span><br><span class="line">else</span><br><span class="line">APKBUILD_TEMPLATE=APKBUILD-module.in</span><br><span class="line">MODULE_SUMMARY_PREFIX=nginx</span><br><span class="line">TARGET_VERSION=$(BASE_VERSION)</span><br><span class="line">MODULE_PACKAGE_PREFIX=nginx-module</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>因为不是构建 <code>nginx-plus</code> 所以我们看 <code>cat APKBUILD-module.in</code> 里找到了下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">build() &#123;</span><br><span class="line">cd &quot;$builddir&quot;</span><br><span class="line"></span><br><span class="line">_nproc=`getconf _NPROCESSORS_ONLN`</span><br><span class="line">if [ $_nproc -gt 1 ]; then</span><br><span class="line">_make_opts=&quot;-j$_nproc&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">%%MODULE_PREBUILD%%</span><br><span class="line"></span><br><span class="line">cd &quot;$builddir&quot;</span><br><span class="line"></span><br><span class="line">CFLAGS= %%MODULE_ENV%% ./configure %%BASE_CONFIGURE_ARGS%% %%MODULE_CONFIGURE_ARGS%% --with-cc-opt=&quot;$CFLAGS %%MODULE_CC_OPT_DEBUG%%&quot; --with-ld-opt=&quot;$LDFLAGS %%MODULE_LD_OPT_DEBUG%%&quot; --with-debug</span><br><span class="line">make $_make_opts modules</span><br><span class="line">for so in `find objs/ -maxdepth 1 -type f -name &quot;*.so&quot;`; do \</span><br><span class="line">debugso=`echo $&#123;so&#125; | sed -e &#x27;s|\.so$|-debug.so|&#x27;` ; \</span><br><span class="line">mv $&#123;so&#125; $&#123;debugso&#125; ; \</span><br><span class="line">        done</span><br><span class="line">CFLAGS= %%MODULE_ENV%% ./configure %%BASE_CONFIGURE_ARGS%% %%MODULE_CONFIGURE_ARGS%% --with-cc-opt=&quot;$CFLAGS %%MODULE_CC_OPT%%&quot; --with-ld-opt=&quot;$LDFLAGS %%MODULE_LD_OPT%%&quot;</span><br><span class="line">make $_make_opts modules</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>CFLAGS</code> 和 <code>LDFLAGS</code> 是支持环境变量传入的，所以改下 Dockerfile 加入下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG CFLAGS</span><br><span class="line">ARG LDFLAGS</span><br></pre></td></tr></table></figure><p>然后开始构建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build -t zhangguanzhang/nginx:arm64-static . \</span><br><span class="line">    --platform linux/arm64 \</span><br><span class="line">    --build-arg=&quot;CFLAGS=&#x27;-static -s&#x27;&quot; --build-arg=LDFLAGS=-static</span><br></pre></td></tr></table></figure><p>然后失败，报错 <code>./configure: error: the invalid value in --with-ld-opt=&quot;-static&quot;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#6 481.1 &gt;&gt;&gt; nginx: Unpacking /tmp/tmp.OciAKf/pkg-oss-1.21.5-1/alpine/abuild-base/nginx-1.21.5.tar.gz...</span><br><span class="line">#6 482.9 checking for OS</span><br><span class="line">#6 482.9  + Linux 5.4.0-91-generic aarch64</span><br><span class="line">#6 482.9 checking for C compiler ... found</span><br><span class="line">#6 483.6  + using GNU C compiler</span><br><span class="line">#6 483.7  + gcc version: 10.3.1 20211027 (Alpine 10.3.1_git20211027) </span><br><span class="line">#6 483.7 checking for gcc -pipe switch ... found</span><br><span class="line">#6 484.3 checking for --with-ld-opt=&quot;-static&quot; ... not found</span><br><span class="line">#6 484.3 ./configure: error: the invalid value in --with-ld-opt=&quot;-static&quot;</span><br></pre></td></tr></table></figure><p>然后在 Dockerfile 里 apk add 加了 <code>glibc-static</code> 还是一样报错。然后尝试下官方的</p><h3 id="自己编译"><a href="#自己编译" class="headerlink" title="自己编译"></a>自己编译</h3><h4 id="手动步骤"><a href="#手动步骤" class="headerlink" title="手动步骤"></a>手动步骤</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti --name t1 test alpine</span><br></pre></td></tr></table></figure><p>前置依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">if [ -f /etc/apk/repositories ];then sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories; fi &amp;&amp; \</span><br><span class="line">    if [ -f /etc/apt/sources.list ];then sed -ri &#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list; fi &amp;&amp; \</span><br><span class="line">    if [ ! -e /etc/nsswitch.conf ];then echo &#x27;hosts: files dns myhostname&#x27; &gt; /etc/nsswitch.conf; fi</span><br><span class="line"></span><br><span class="line">apk add --no-cache --virtual .build-deps \</span><br><span class="line">                gcc \</span><br><span class="line">                libc-dev \</span><br><span class="line">                make \</span><br><span class="line">                openssl-dev \</span><br><span class="line">                pcre2-dev \</span><br><span class="line">                zlib-dev \</span><br><span class="line">              openssl-libs-static zlib-static  \</span><br><span class="line">                linux-headers \</span><br><span class="line">                libxslt-dev \</span><br><span class="line">                gd-dev \</span><br><span class="line">                geoip-dev \</span><br><span class="line">                perl-dev \</span><br><span class="line">                libedit-dev \</span><br><span class="line">                bash \</span><br><span class="line">                alpine-sdk \</span><br><span class="line">                findutils</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><p>下载源码包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.21.6.tar.gz</span><br><span class="line">tar zxf nginx-1.21.6.tar.gz</span><br><span class="line">cd nginx-1.21.6</span><br></pre></td></tr></table></figure><p>找下官方的编译参数，下面是我 arm64 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --entrypoint nginx nginx:alpine-perl -V</span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">built by gcc 10.3.1 20211027 (Alpine 10.3.1_git20211027) </span><br><span class="line">built with OpenSSL 1.1.1l  24 Aug 2021</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-perl_modules_path=/usr/lib/perl5/vendor_perl --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#x27;-Os -fomit-frame-pointer -g&#x27; --with-ld-opt=-Wl,--as-needed,-O1,--sort-common</span><br><span class="line">$ docker run --rm --entrypoint nginx nginx:alpine-perl -V |&amp; grep -Po -- &quot;--[a-z_-]+(=(&#x27;[^&#x27;]+&#x27;|\S+))?&quot;</span><br><span class="line">--prefix=/etc/nginx</span><br><span class="line">--sbin-path=/usr/sbin/nginx</span><br><span class="line">--modules-path=/usr/lib/nginx/modules</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf</span><br><span class="line">--error-log-path=/var/log/nginx/error.log</span><br><span class="line">--http-log-path=/var/log/nginx/access.log</span><br><span class="line">--pid-path=/var/run/nginx.pid</span><br><span class="line">--lock-path=/var/run/nginx.lock</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp</span><br><span class="line">--with-perl_modules_path=/usr/lib/perl5/vendor_perl</span><br><span class="line">--user=nginx</span><br><span class="line">--group=nginx</span><br><span class="line">--with-compat</span><br><span class="line">--with-file-aio</span><br><span class="line">--with-threads</span><br><span class="line">--with-http_addition_module</span><br><span class="line">--with-http_auth_request_module</span><br><span class="line">--with-http_dav_module</span><br><span class="line">--with-http_flv_module</span><br><span class="line">--with-http_gunzip_module</span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line">--with-http_mp</span><br><span class="line">--with-http_random_index_module</span><br><span class="line">--with-http_realip_module</span><br><span class="line">--with-http_secure_link_module</span><br><span class="line">--with-http_slice_module</span><br><span class="line">--with-http_ssl_module</span><br><span class="line">--with-http_stub_status_module</span><br><span class="line">--with-http_sub_module</span><br><span class="line">--with-http_v</span><br><span class="line">--with-mail</span><br><span class="line">--with-mail_ssl_module</span><br><span class="line">--with-stream</span><br><span class="line">--with-stream_realip_module</span><br><span class="line">--with-stream_ssl_module</span><br><span class="line">--with-stream_ssl_preread_module</span><br><span class="line">--with-cc-opt=&#x27;-Os -fomit-frame-pointer -g&#x27;</span><br><span class="line">--with-ld-opt=-Wl,--as-needed,-O1,--sort-common</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>with-http_mp</code> 和 <code>with-http_v</code> 似乎对应 <code>--with-http_mp4_module</code> 和 <code>--with-http_v2_module</code>，更多编译参数参考官方文档 <a href="http://nginx.org/en/docs/configure.html">nginx-configure</a><br>改下 <code>--with-cc-opt</code> 和 <code>--with-ld-opt</code> 后编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">  --prefix=/etc/nginx \</span><br><span class="line">  --sbin-path=/usr/sbin/nginx \</span><br><span class="line">  --modules-path=/usr/lib/nginx/modules \</span><br><span class="line">  --conf-path=/etc/nginx/nginx.conf \</span><br><span class="line">  --error-log-path=/var/log/nginx/error.log \</span><br><span class="line">  --http-log-path=/var/log/nginx/access.log \</span><br><span class="line">  --pid-path=/var/run/nginx.pid \</span><br><span class="line">  --lock-path=/var/run/nginx.lock \</span><br><span class="line">  --http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">  --with-perl_modules_path=/usr/lib/perl5/vendor_perl \</span><br><span class="line">  --user=nginx \</span><br><span class="line">  --group=nginx \</span><br><span class="line">  --with-compat \</span><br><span class="line">  --with-file-aio \</span><br><span class="line">  --with-threads \</span><br><span class="line">  --with-http_addition_module \</span><br><span class="line">  --with-http_auth_request_module \</span><br><span class="line">  --with-http_dav_module \</span><br><span class="line">  --with-http_flv_module \</span><br><span class="line">  --with-http_gunzip_module \</span><br><span class="line">  --with-http_gzip_static_module \</span><br><span class="line">  --with-http_mp4_module \</span><br><span class="line">  --with-http_random_index_module \</span><br><span class="line">  --with-http_realip_module \</span><br><span class="line">  --with-http_secure_link_module \</span><br><span class="line">  --with-http_slice_module \</span><br><span class="line">  --with-http_ssl_module \</span><br><span class="line">  --with-http_stub_status_module \</span><br><span class="line">  --with-http_sub_module \</span><br><span class="line">  --with-http_v2_module \</span><br><span class="line">  --with-mail \</span><br><span class="line">  --with-mail_ssl_module \</span><br><span class="line">  --with-stream \</span><br><span class="line">  --with-stream_realip_module \</span><br><span class="line">  --with-stream_ssl_module \</span><br><span class="line">  --with-stream_ssl_preread_module \</span><br><span class="line">  --with-cc-opt=<span class="string">&#x27;-static -s&#x27;</span> \</span><br><span class="line">  --with-ld-opt=-static</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Dockerfile-构建"><a href="#Dockerfile-构建" class="headerlink" title="Dockerfile 构建"></a>Dockerfile 构建</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine AS build</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.21</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ -f /etc/apk/repositories ];<span class="keyword">then</span> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ -f /etc/apt/sources.list ];<span class="keyword">then</span> sed -ri <span class="string">&#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ ! -e /etc/nsswitch.conf ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hosts: files dns myhostname&#x27;</span> &gt; /etc/nsswitch.conf; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk add --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="language-bash">                gcc \</span></span><br><span class="line"><span class="language-bash">                libc-dev \</span></span><br><span class="line"><span class="language-bash">                make \</span></span><br><span class="line"><span class="language-bash">                openssl-dev \</span></span><br><span class="line"><span class="language-bash">                pcre2-dev \</span></span><br><span class="line"><span class="language-bash">                zlib-dev \</span></span><br><span class="line"><span class="language-bash">              openssl-libs-static zlib-static  \</span></span><br><span class="line"><span class="language-bash">                linux-headers \</span></span><br><span class="line"><span class="language-bash">                libxslt-dev \</span></span><br><span class="line"><span class="language-bash">                gd-dev \</span></span><br><span class="line"><span class="language-bash">                geoip-dev \</span></span><br><span class="line"><span class="language-bash">                perl-dev \</span></span><br><span class="line"><span class="language-bash">                libedit-dev \</span></span><br><span class="line"><span class="language-bash">                bash \</span></span><br><span class="line"><span class="language-bash">                alpine-sdk \</span></span><br><span class="line"><span class="language-bash">                findutils &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget http://nginx.org/download/nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz &amp;&amp; tar zxf nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./configure \</span></span><br><span class="line"><span class="language-bash">    --prefix=/etc/nginx \</span></span><br><span class="line"><span class="language-bash">    --sbin-path=/usr/sbin/nginx \</span></span><br><span class="line"><span class="language-bash">    --modules-path=/usr/lib/nginx/modules \</span></span><br><span class="line"><span class="language-bash">    --conf-path=/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="language-bash">    --error-log-path=/var/log/nginx/error.log \</span></span><br><span class="line"><span class="language-bash">    --http-log-path=/var/log/nginx/access.log \</span></span><br><span class="line"><span class="language-bash">    --pid-path=/var/run/nginx.pid \</span></span><br><span class="line"><span class="language-bash">    --lock-path=/var/run/nginx.lock \</span></span><br><span class="line"><span class="language-bash">    --http-client-body-temp-path=/var/cache/nginx/client_temp \</span></span><br><span class="line"><span class="language-bash">    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span></span><br><span class="line"><span class="language-bash">    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span></span><br><span class="line"><span class="language-bash">    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span></span><br><span class="line"><span class="language-bash">    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span></span><br><span class="line"><span class="language-bash">    --with-perl_modules_path=/usr/lib/perl5/vendor_perl \</span></span><br><span class="line"><span class="language-bash">    --user=nginx \</span></span><br><span class="line"><span class="language-bash">    --group=nginx \</span></span><br><span class="line"><span class="language-bash">    --with-compat \</span></span><br><span class="line"><span class="language-bash">    --with-file-aio \</span></span><br><span class="line"><span class="language-bash">    --with-threads \</span></span><br><span class="line"><span class="language-bash">    --with-http_addition_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_auth_request_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_dav_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_flv_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_gunzip_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_gzip_static_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_mp4_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_random_index_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_realip_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_secure_link_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_slice_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_stub_status_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_sub_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_v2_module \</span></span><br><span class="line"><span class="language-bash">    --with-mail \</span></span><br><span class="line"><span class="language-bash">    --with-mail_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream \</span></span><br><span class="line"><span class="language-bash">    --with-stream_realip_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream_ssl_preread_module \</span></span><br><span class="line"><span class="language-bash">    --with-cc-opt=<span class="string">&#x27;-static -s&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    --with-ld-opt=-static &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make install &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> `<span class="built_in">which</span> nginx` /nginx-$(<span class="built_in">cat</span> /etc/apk/arch)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> scratch AS bin</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /nginx-* /</span></span><br></pre></td></tr></table></figure><p>构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker buildx build  . --platform linux/amd64,linux/arm64 \</span><br><span class="line">    --target bin --output . \</span><br><span class="line">    --build-arg=NGINX_VERSION=1.21.6</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># ll                          </span><br><span class="line">total 4                                    </span><br><span class="line">drwxr-xr-x 4 root root   62 Jan 26 16:21 ./             </span><br><span class="line">drwxr-xr-x 6 root root   98 Jan 26 15:31 ../   </span><br><span class="line">-rw-r--r-- 1 root root 2718 Jan 26 16:05 Dockerfile </span><br><span class="line">drwxr-xr-x 2 root root   26 Jan 26 16:21 linux_amd64/                                          </span><br><span class="line">drwxr-xr-x 2 root root   27 Jan 26 16:21 linux_arm64/ </span><br><span class="line"># ll linux_a*</span><br><span class="line">linux_amd64:</span><br><span class="line">total 20424</span><br><span class="line">drwxr-xr-x 2 root root       26 Jan 26 16:21 ./</span><br><span class="line">drwxr-xr-x 4 root root       62 Jan 26 16:21 ../</span><br><span class="line">-rwxr-xr-x 1 root root 20910696 Jan 26 16:12 nginx-x86_64*</span><br><span class="line"></span><br><span class="line">linux_arm64:</span><br><span class="line">total 20444</span><br><span class="line">drwxr-xr-x 2 root root       27 Jan 26 16:21 ./</span><br><span class="line">drwxr-xr-x 4 root root       62 Jan 26 16:21 ../</span><br><span class="line">-rwxr-xr-x 1 root root 20932656 Jan 26 16:21 nginx-aarch64*</span><br><span class="line"># ./linux_amd64/nginx-x86_64 -V</span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">built by gcc 10.3.1 20211027 (Alpine 10.3.1_git20211027) </span><br><span class="line">built with OpenSSL 1.1.1l  24 Aug 2021</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-perl_modules_path=/usr/lib/perl5/vendor_perl --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#x27;-static -s&#x27; --with-ld-opt=-static</span><br><span class="line"># file ./linux_amd64/nginx-x86_64 </span><br><span class="line">./linux_amd64/nginx-x86_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, with debug_info, not stripped</span><br><span class="line"># file ./linux_arm64/nginx-aarch64 </span><br><span class="line">./linux_arm64/nginx-aarch64: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>符号链接可以 <code>strip -s $(which nginx)</code> 去掉减少大小。</p><h4 id="对接到真实场景"><a href="#对接到真实场景" class="headerlink" title="对接到真实场景"></a>对接到真实场景</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine AS conf</span><br><span class="line"><span class="keyword">FROM</span> alpine AS build</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> NGINX_VERSION=<span class="number">1.21</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="keyword">if</span> [ -f /etc/apk/repositories ];<span class="keyword">then</span> sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ -f /etc/apt/sources.list ];<span class="keyword">then</span> sed -ri <span class="string">&#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ ! -e /etc/nsswitch.conf ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hosts: files dns myhostname&#x27;</span> &gt; /etc/nsswitch.conf; <span class="keyword">fi</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk add --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="language-bash">                gcc \</span></span><br><span class="line"><span class="language-bash">                libc-dev \</span></span><br><span class="line"><span class="language-bash">                make \</span></span><br><span class="line"><span class="language-bash">                openssl-dev \</span></span><br><span class="line"><span class="language-bash">                pcre2-dev \</span></span><br><span class="line"><span class="language-bash">                zlib-dev \</span></span><br><span class="line"><span class="language-bash">              openssl-libs-static zlib-static  \</span></span><br><span class="line"><span class="language-bash">                linux-headers \</span></span><br><span class="line"><span class="language-bash">                libxslt-dev \</span></span><br><span class="line"><span class="language-bash">                gd-dev \</span></span><br><span class="line"><span class="language-bash">                geoip-dev \</span></span><br><span class="line"><span class="language-bash">                perl-dev \</span></span><br><span class="line"><span class="language-bash">                libedit-dev \</span></span><br><span class="line"><span class="language-bash">                bash \</span></span><br><span class="line"><span class="language-bash">                alpine-sdk \</span></span><br><span class="line"><span class="language-bash">                findutils &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget http://nginx.org/download/nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz &amp;&amp; tar zxf nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span>.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./configure \</span></span><br><span class="line"><span class="language-bash">    --prefix=/etc/nginx \</span></span><br><span class="line"><span class="language-bash">    --sbin-path=/usr/sbin/nginx \</span></span><br><span class="line"><span class="language-bash">    --modules-path=/usr/lib/nginx/modules \</span></span><br><span class="line"><span class="language-bash">    --conf-path=/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="language-bash">    --error-log-path=/var/log/nginx/error.log \</span></span><br><span class="line"><span class="language-bash">    --http-log-path=/var/log/nginx/access.log \</span></span><br><span class="line"><span class="language-bash">    --pid-path=/var/run/nginx.pid \</span></span><br><span class="line"><span class="language-bash">    --lock-path=/var/run/nginx.lock \</span></span><br><span class="line"><span class="language-bash">    --http-client-body-temp-path=/var/cache/nginx/client_temp \</span></span><br><span class="line"><span class="language-bash">    --http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span></span><br><span class="line"><span class="language-bash">    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span></span><br><span class="line"><span class="language-bash">    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span></span><br><span class="line"><span class="language-bash">    --http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span></span><br><span class="line"><span class="language-bash">    --with-perl_modules_path=/usr/lib/perl5/vendor_perl \</span></span><br><span class="line"><span class="language-bash">    --user=nginx \</span></span><br><span class="line"><span class="language-bash">    --group=nginx \</span></span><br><span class="line"><span class="language-bash">    --with-compat \</span></span><br><span class="line"><span class="language-bash">    --with-file-aio \</span></span><br><span class="line"><span class="language-bash">    --with-threads \</span></span><br><span class="line"><span class="language-bash">    --with-http_addition_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_auth_request_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_dav_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_flv_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_gunzip_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_gzip_static_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_mp4_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_random_index_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_realip_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_secure_link_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_slice_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_stub_status_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_sub_module \</span></span><br><span class="line"><span class="language-bash">    --with-http_v2_module \</span></span><br><span class="line"><span class="language-bash">    --with-mail \</span></span><br><span class="line"><span class="language-bash">    --with-mail_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream \</span></span><br><span class="line"><span class="language-bash">    --with-stream_realip_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream_ssl_module \</span></span><br><span class="line"><span class="language-bash">    --with-stream_ssl_preread_module \</span></span><br><span class="line"><span class="language-bash">    --with-cc-opt=<span class="string">&#x27;-static -s&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    --with-ld-opt=-static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> nginx-<span class="variable">$&#123;NGINX_VERSION&#125;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> /install_root &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    make DESTDIR=/install_root install &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -f /install_root/etc/nginx/*.default &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rmdir</span> /install_root/var/run ; <span class="literal">true</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> -p /install_root/var/cache/nginx/ \</span></span><br><span class="line"><span class="language-bash">      /install_root/usr/lib/nginx/modules \</span></span><br><span class="line"><span class="language-bash">      /install_root/etc/nginx/conf.d \</span></span><br><span class="line"><span class="language-bash">      /install_root/usr/share/nginx &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> /install_root/etc/nginx/html /install_root/usr/share/nginx/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -sf /dev/stdout /install_root/var/log/nginx/access.log &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -sf /dev/stderr /install_root/var/log/nginx/error.log </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=conf /etc/nginx/nginx.conf /install_root/etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=conf /etc/nginx/conf.d /install_root/etc/nginx/conf.d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">  find /install_root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /install_root /</span></span><br><span class="line"><span class="comment"># alpine create nginx user/group </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> addgroup -g 101 -S nginx &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="keyword">if</span> [ ! -e /etc/nsswitch.conf ];<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hosts: files dns myhostname&#x27;</span> &gt;&gt; /etc/nsswitch.conf; <span class="keyword">fi</span></span></span><br><span class="line"><span class="comment"># debian create nginx user/group </span></span><br><span class="line"><span class="comment"># RUN addgroup --system --gid 101 nginx &amp;&amp; \</span></span><br><span class="line"><span class="comment">#     adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos &quot;nginx user&quot; --shell /bin/false --uid 101 nginx  &amp;&amp; \</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意 <code>worker_processes  auto;</code> 在高核心 cpu 上会非常吃配置和浪费配置，特别是 arm64 的国产服务器上，需要改成固定的数字。</p><h3 id="后续一些额外模块测试"><a href="#后续一些额外模块测试" class="headerlink" title="后续一些额外模块测试"></a>后续一些额外模块测试</h3><p>vts 模块验证不影响静态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    wget https://github.com/vozlt/nginx-module-vts/archive/refs/tags/v0.1.18.tar.gz &amp;&amp; \</span><br><span class="line">    tar zxf v0.1.18.tar.gz -C /tmp/ &amp;&amp; \</span><br><span class="line">    rm -rf v0.1.18.tar.gz</span><br><span class="line"></span><br><span class="line">RUN cd nginx-$&#123;NGINX_VERSION&#125; &amp;&amp; \</span><br><span class="line">    ...</span><br><span class="line">    --add-module=/tmp/nginx-module-vts-0.1.18 \</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.v2ex.com/t/757913">https://www.v2ex.com/t/757913</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;内部有需求需要静态编译 nginx，尝试了下，搞出来了。先是按照官方 nginx Dockerfile 的逻辑走不通，后面下载 nginx </summary>
      
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="nginx" scheme="http://zhangguanzhang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>EmuELEC 笔记</title>
    <link href="http://zhangguanzhang.github.io/2022/01/22/EmuELEC/"/>
    <id>http://zhangguanzhang.github.io/2022/01/22/EmuELEC/</id>
    <published>2022-01-22T14:28:30.000Z</published>
    <updated>2022-01-22T14:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EmuELEC-笔记"><a href="#EmuELEC-笔记" class="headerlink" title="EmuELEC 笔记"></a>EmuELEC 笔记</h1><p>后续关于 EmuELEC 的笔记和知识点都会在这里更新，假定看到这篇文章的人都具备一些 Linux 基础，命令，path，分区，挂载之类的知识。</p><h2 id="EmuELEC-介绍"><a href="#EmuELEC-介绍" class="headerlink" title="EmuELEC 介绍"></a>EmuELEC 介绍</h2><p>EmuELEC 是专为 Amlogic（晶晨）S905&#x2F;S912 方案的盒子开发的游戏系统，它基于 CoreELEC 系统，在 CoreELEC 的基础上移植了 RetroArch 和众多的独立模拟器。EmuELEC 前身为 Sx05RE。Sx05RE 整合了 Lakka、KODI、EmulationStation，常被人简称为三合一。它实际上也是一个 Linux 系统，最新版本开始只支持 arm64 架构了。</p><p>通常我们使用便宜的电视盒子（基本9成都是晶晨的 cpu）来刷 EmuELEC 系统，然后配合手柄（xbox协议，ps、psp和30块钱左右的无线手柄）能玩很多平台的游戏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3do    atari2600 atarilynx    coleco  downloadsgameandwatch  gbah     genh      megadrive        n64     nesopenbor     pcfx      pspminis  screenshots  sg-1000 solarus  uzebox      wonderswan</span><br><span class="line">amiga    atari5200 atarist     c128    cps1    dreamcastgamegear      gbc      gw      megadrive-japan  naomi   neshpc    pico-8    psx  scummvm      sgfx splash   vectrex     wonderswancolor</span><br><span class="line">amigacd32   atari7800 atomiswave  c16     cps2    famicomgamegearh     gbch     intellivision  mplayer       nds     ngppc98    pokemini  saturn  sega32x      snes tg16  vic20       x68000</span><br><span class="line">amstradcpc  atari800 bezels      c64     cps3    fbneogb      gbh      mame      msx       neocd   ngpcpcengine    ports     savestates  segacd       snesh tg16cd   videopac    zx81</span><br><span class="line">arcade    atarijaguar  BGM     capcom  daphne  fdsgba      genesis  mastersystem   msx2       neogeo  odysseypcenginecd  psp       sc-3000  sfc       snesmsu1  tic-80   virtualboy  zxspectrum</span><br></pre></td></tr></table></figure><p>arcade、mame、neogeo capcom（这四个是街机）、nes、nds、gba、ps、psp、fc、sfc、很多平台的游戏。我个人是使用 N1 盒子，但是不推荐，很多那种宽带送的电视盒子也行，根据现在的讯息去看哪个合适。国内的话能讨论这方面的有以下几个平台：</p><ul><li><a href="https://www.right.com.cn/forum/forum.php">恩山</a>，恩山是软路由为主，注意电视盒子板块去讨论</li><li><a href="https://www.emuelec.cn/">EmuELEC 中文网</a></li><li><a href="https://tieba.baidu.com/f?kw=emuelec&ie=utf-8">emuelec贴吧</a>，如果你 pc web 贴吧发帖让你下 app 端，你可以编辑好内容后 ctrl + 回车直接绕过这个限制发帖</li><li><a href="https://post.smzdm.com/">什么值得买</a>，该论坛的电视盒子版块也有人会讨论这个</li><li><a href="https://space.bilibili.com/97745521/video">b站的人中日月大佬</a>，他一般提供了整合包，业内也有名气</li></ul><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>一般是两种:</p><ul><li>电视盒子解密(并不是所有盒子都能折腾这个)后，在盒子上安装 <code>Reboot to LibreELEC</code> 的 apk ，运行它从安卓电视系统切换到 U 盘启动，从而进入到游戏系统。</li><li>你盒子本身支持从 U 盘启动，你 U 盘写入 EmuELEC 的 img 文件后插到盒子上开机即可。</li></ul><p>刷机软件推荐 <a href="https://www.balena.io/etcher/">balenaEtcher</a>，建议下载 Portable 免安装的版本。EmuELEC 的镜像去搜你设备关键字+EmuELC 找。</p><p>初次打开需要设置手柄，手柄映射图<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/picgo/xbox-set.png"><br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/picgo/controller-360.png"></p><h2 id="分区讲解"><a href="#分区讲解" class="headerlink" title="分区讲解"></a>分区讲解</h2><p>EmuELEC 的 img 刷到内存卡或者 U盘里后，windows 会弹出的让你是否格式化，记得点击否，一般是两个分区：</p><ul><li>EMUELEC 的 FAT32 分区 ，内存放有 dtb（device tree）的分区，不同电视盒子的 dtb 文件不一样，一般初次需要我们进里面的目录 device_trees 里把你设备的 xxx-dtb.img 拷贝到根目录的 <code>dtb.img</code></li><li>ext4 的分区， windows 无法识别，单独存放游戏 roms 的分区。也是一些对外开放的配置引入。单独会被挂载成 <code>/storage</code> 目录</li><li>EEROMS , 4.0 后开始新增的的分区，也就是之前的 <code>/storage/roms</code> 单独抽出来的一个单独分区，游戏都会存放在这里。</li></ul><p>前者是系统分区，一般升级的话升级这个就行了。添加游戏啥的可以在后者分区里按照平台添加，后者分区可以在 windows 上使用 <a href="https://www.diskgenius.cn/">DiskGenius</a> 打开。不过你刷好开机以及联网后，其实会自带一个 ssh 和 samba。都可以连上去操作，ssh 登录信息是 <code>root/emuelec</code>。 开机挂载 <code>/storage/roms</code> 的逻辑可以看脚本 <code>cat /usr/bin/mount_romfs.sh</code></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">EmuELEC:~ # df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">devtmpfs                791.1M      4.0K    791.1M   0% /dev</span><br><span class="line">/dev/sda1                 1.0G    694.4M    330.6M  68% /flash</span><br><span class="line">/dev/loop0              673.5M    673.5M         0 100% /</span><br><span class="line">/dev/sda2                26.1G     21.8G      4.3G  84% /storage</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /dev/shm</span><br><span class="line">tmpfs                   902.1M      9.2M    892.8M   1% /run</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs                   902.1M      2.6M    899.5M   0% /var</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /tmp</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/database</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/cores</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/joypads</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/shaders</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/overlays</span><br><span class="line">none                     26.1G     21.8G      4.3G  84% /tmp/assets</span><br></pre></td></tr></table></figure><p>启动后, EMUELEC 分区被挂载为 <code>/flash</code>, STORAGE 分区被挂载为 <code>/storage</code>, system.img(也可能是那个 SYSTEM) 通过 <code>/dev/loop0</code> 被挂载为系统根目录 <code>/</code> 。所以, 用户能修改的仅仅是 <code>/flash</code> 和 <code>/storage</code> 目录下的内容<br>root用户的 home 目录被定位到 <code>/storage</code>, 如果需要添加登录后自动执行的命令(例如添加alias), 可以直接在 <code>/storage</code> 目录下新建 <code>.profile</code> 文件来实现。</p><h3 id="wifi"><a href="#wifi" class="headerlink" title="wifi"></a>wifi</h3><p>文件 <code>/storage/.config/emuelec/configs/emuelec.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## Activate wifi (0,1)</span><br><span class="line">wifi.enabled=1</span><br><span class="line">wifi.ssid=CMCC-5G</span><br><span class="line">wifi.key=zhangguanzhang</span><br><span class="line"># secondary wifi (not configurable via the user interface)</span><br><span class="line">#wifi2.ssid=new ssid</span><br><span class="line">#wifi2.key=new key</span><br><span class="line"># third wifi (not configurable via the user interface)</span><br><span class="line">#wifi3.ssid=new ssid</span><br><span class="line">#wifi3.key=new key</span><br></pre></td></tr></table></figure><p>RA 配置文件 <code>/storage/.config/retroarch/retroarch.cfg</code></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>下载源码进入 <code>make image</code>，专门平台就加变量编译，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROJECT=Amlogic-ce DEVICE=Amlogic-ng ARCH=aarch64 DISTRO=EmuELEC make image</span><br></pre></td></tr></table></figure><p>例如贴吧也有人发自己编译的版本，但是这些比一般会锁 ssh，不让别人修改，当然你懂 Linux 的话可以 img 文件挂载了去改。网上也基本搜不到啥关于长篇大论讲编译的教程。建议还是先看官方的 <a href="https://github.com/EmuELEC/EmuELEC">README.md</a> </p><h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><h3 id="个别-HDMI-屏幕没声音"><a href="#个别-HDMI-屏幕没声音" class="headerlink" title="个别 HDMI 屏幕没声音"></a>个别 HDMI 屏幕没声音</h3><p>没声音的话尝试 EmuELEC setting – 音频 0,0 0,1 后重启试试。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>有些人说是手柄问题，有线好于 &gt; 无线，某些牌子无线 &gt; 另外的无线。也有人说电视的原因。<br>我个人是在 ra 里设置 降低延迟的选项，打开以后参数设为 1 和 2都试了下，2好点，但是 2 可能比较吃配置，卡的话就试试 1</p><h2 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h2><p><a href="https://github.com/EmuELEC/EmuELEC/wiki/bios">https://github.com/EmuELEC/EmuELEC/wiki/bios</a> bios存放路径</p><h3 id="roms-网站"><a href="#roms-网站" class="headerlink" title="roms 网站"></a>roms 网站</h3><ul><li><a href="https://www.oldmanemu.net/">老男人</a></li><li><a href="https://vimm.net/">vimm’s lair</a></li><li><a href="https://wowroms.com/en/all-roms">wowroms</a> 基本啥都有</li><li><a href="https://www.gamulator.com/roms">www.gamulator.com</a></li></ul><h3 id="缩容和提取-roms"><a href="#缩容和提取-roms" class="headerlink" title="缩容和提取 roms"></a>缩容和提取 roms</h3><p>需要缩容是因为 img 里所有分区表大小加起来会超过 U 盘容量。</p><h4 id="windows-缩容和提取-roms"><a href="#windows-缩容和提取-roms" class="headerlink" title="windows 缩容和提取 roms"></a>windows 缩容和提取 roms</h4><p>把 img 文件拖到 <code>DiskGenius</code> 里，然后删掉几个大游戏，特别 psp 里的。删掉后分区表大小并没变小，然后利用分区克隆工具，按照非 EEROMS 的分区在你 U 盘上创建后前面的分区，然后剩下分区给 EEROMS。格式化的时候记得每个分区的卷标名要设置上，<code>EMUELEC</code>、<code>STORAGE</code> 和 <code>EEROMS</code>。提取的话直接复制出来即可。</p><h4 id="Linux-缩容和提取-roms"><a href="#Linux-缩容和提取-roms" class="headerlink" title="Linux 缩容和提取 roms"></a>Linux 缩容和提取 roms</h4><p>帮同事弄的时候他 U 盘小于 64G ，<code>DiskGenius</code> 里分区克隆说不能克隆，气得我在 Linux 上搞。注意容量，先把 64G 的这个 img 文件拷贝到 Linux 上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l emuelec4.3正式版-s905x3-58g-3.img </span><br><span class="line">-rw-r--r-- 1 root root 62302191616 Jan 24 19:17 emuelec4.3正式版-s905x3-58g-3.img</span><br><span class="line"><span class="comment"># 查看下 img 分区信息</span></span><br><span class="line">$ parted emuelec4.3正式版-s905x3-58g-3.img u s p</span><br><span class="line">Model:  (file)</span><br><span class="line">Disk /data/emuelec4.3正式版-s905x3-58g-3.img: 121683968s</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start     End         Size        Type     File system  Flags</span><br><span class="line"> 1      8192s     4202495s    4194304s    primary  fat32        boot, lba</span><br><span class="line"> 2      4202496s  8388608s    4186113s    primary  ext4</span><br><span class="line"> 3      8390656s  121683967s  113293312s  primary  fat32        lba</span><br></pre></td></tr></table></figure><h5 id="img-挂载到本地目录"><a href="#img-挂载到本地目录" class="headerlink" title="img 挂载到本地目录"></a>img 挂载到本地目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个空闲的 loop 设备</span></span><br><span class="line">LOOP_D=$(losetup --find)</span><br><span class="line"><span class="comment"># 把 img 文件扫描到 loop 设备上</span></span><br><span class="line">losetup --partscan <span class="variable">$LOOP_D</span>  emuelec4.3正式版-s905x3-58g-3.img</span><br><span class="line"><span class="comment"># 这里我的 img 里是 三个分区</span></span><br><span class="line"><span class="comment"># EMUELEC 和 EEROMS 分区都是 fat32 ，里面有中文游戏，需要挂载带上 iocharset=utf8</span></span><br><span class="line"><span class="built_in">mkdir</span> -p p1 p2 p3</span><br><span class="line">mount  -o iocharset=utf8 <span class="variable">$&#123;LOOP_D&#125;</span>p1 p1</span><br><span class="line">mount  <span class="variable">$&#123;LOOP_D&#125;</span>p2 p2</span><br><span class="line">mount  -o iocharset=utf8 <span class="variable">$&#123;LOOP_D&#125;</span>p3 p3</span><br></pre></td></tr></table></figure><h5 id="克隆文件系统到-U-盘上"><a href="#克隆文件系统到-U-盘上" class="headerlink" title="克隆文件系统到 U 盘上"></a>克隆文件系统到 U 盘上</h5><p>创建 U 盘分区表，start 和 end 按照 img 文件里的信息来，最后分区结尾是 <code>100%</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ lsblk <span class="comment"># 找到 U 盘，我这里是 sdc</span></span><br><span class="line">sdc                                     8:32   1  57.6G  0 disk</span><br><span class="line"><span class="comment"># U 盘没分区表的，有的话自己清空下</span></span><br><span class="line"><span class="comment"># 在 U 盘上创建分区表</span></span><br><span class="line">parted /dev/sdc mkpart p fat32 8192s 4202495s</span><br><span class="line">parted /dev/sdc <span class="built_in">set</span> 1 boot on</span><br><span class="line">parted /dev/sdc mkpart p ext4 4202496s 8388608s</span><br><span class="line">parted /dev/sdc mkpart p fat32 8390656s 100% <span class="comment"># 最后一个直接100%</span></span><br></pre></td></tr></table></figure><p>查看下 u 盘分区信息和 img 信息是符合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ parted /dev/sdc u s p</span><br><span class="line">Model: Kingston DataTraveler 3.0 (scsi)</span><br><span class="line">Disk /dev/sdc: 120845300s</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start     End         Size        Type     File system  Flags</span><br><span class="line"> 1      8192s     4202495s    4194304s    primary               boot, lba</span><br><span class="line"> 2      4202496s  8388608s    4186113s    primary</span><br><span class="line"> 3      8390656s  120844287s  112453632s  primary               lba</span><br></pre></td></tr></table></figure><p>格式化出 U 盘文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意要带上 LABEL 名：EMUELEC STORAGE EEROMS</span></span><br><span class="line"><span class="comment"># openwrt 上没有 mkfs.vfat, 需要安装 dosfstools 后 ln -sf /usr/sbin/mkfs.fat /usr/sbin/mkfs.vfat</span></span><br><span class="line">mkfs.vfat -F 32 -n EMUELEC /dev/sdc1</span><br><span class="line">mkfs.ext4 -L STORAGE      /dev/sdc2</span><br><span class="line">mkfs.vfat -F 32 -n EEROMS /dev/sdc3</span><br></pre></td></tr></table></figure><p>如果忘记 LABEL，后面打也行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fatlabel /dev/sdc1 EMUELEC</span><br><span class="line">tune2fs -L STORAGE /dev/sdc2</span><br><span class="line">fatlabel /dev/sdc3 EEROMS</span><br><span class="line"># 查看 LABEL</span><br><span class="line">lsblk -o PATH,LABEL</span><br></pre></td></tr></table></figure><p>U 盘文件挂载到本地，并开始复制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir -p u&#123;1..3&#125;</span><br><span class="line">mount  -o iocharset=utf8 /dev/sdc1 u1</span><br><span class="line">mount  /dev/sdc2 u2</span><br><span class="line">mount  -o iocharset=utf8 /dev/sdc3 u3</span><br><span class="line"></span><br><span class="line"># 拷贝之前 df -h 看下 p3 的已使用大小是否小于等于 u3 分区表大小</span><br><span class="line"># 如果不是 可以删掉 EEROMS 分区下面 psp 里的大游戏先</span><br><span class="line">rsync -vzrtopgl  p1/ u1/</span><br><span class="line">rsync -vzrtopgl  p2/ u2/</span><br><span class="line">rsync -vzrtopgl  p3/ u3/</span><br><span class="line"></span><br><span class="line">取消 U 盘挂载</span><br><span class="line">```bash</span><br><span class="line">umount u&#123;1..3&#125;</span><br></pre></td></tr></table></figure><h5 id="制作真正缩容的-img"><a href="#制作真正缩容的-img" class="headerlink" title="制作真正缩容的 img"></a>制作真正缩容的 img</h5><p>前面的 img 挂载不要取消，我们来制作一个缩小容量的 img 文件来分享给别人使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 制作一个 57G 的空文件</span><br><span class="line">truncate -s 57G test.img</span><br><span class="line"># 对文件开始分区，分区信息参考下 img</span><br><span class="line">parted test.img mklabel msdos</span><br><span class="line">parted test.img mkpart p fat32 8192s 4202495s</span><br><span class="line">parted test.img set 1 boot on</span><br><span class="line">parted test.img mkpart p ext4 4202496s 8388608s</span><br><span class="line">parted test.img mkpart p fat32 8390656s 100%</span><br></pre></td></tr></table></figure><p>挂载我们的 img 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOOP_D2=$(losetup --find)</span><br><span class="line">losetup --partscan $LOOP_D2  test.img</span><br><span class="line"># 创建分区表</span><br><span class="line">mkfs.vfat -F 32 -n EMUELEC $&#123;LOOP_D2&#125;p1</span><br><span class="line">mkfs.ext4 -L STORAGE $&#123;LOOP_D2&#125;p2</span><br><span class="line">mkfs.vfat -F 32 -n EEROMS $&#123;LOOP_D2&#125;p3</span><br><span class="line"># 挂载</span><br><span class="line">mkdir -p u&#123;1..3&#125;</span><br><span class="line">mount  -o iocharset=utf8 $&#123;LOOP_D2&#125;p1 u1</span><br><span class="line">mount   $&#123;LOOP_D2&#125;p2 u2</span><br><span class="line">mount  -o iocharset=utf8 $&#123;LOOP_D2&#125;p3 u3</span><br></pre></td></tr></table></figure><p>拷贝到我们的新 img 里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rsync -vzrtopgl  p1/ u1/</span><br><span class="line">rsync -vzrtopgl  p2/ u2/</span><br><span class="line">rsync -vzrtopgl  p3/ u3/</span><br><span class="line">umount u&#123;1..3&#125;</span><br></pre></td></tr></table></figure><p>取消两个 img 文件映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">umount p&#123;1..3&#125;</span><br><span class="line">losetup -D  $&#123;LOOP_D2&#125;</span><br><span class="line">losetup -D  $&#123;LOOP_D&#125;</span><br></pre></td></tr></table></figure><p>然后新的 img 文件就可以直接刷 U 盘了。</p><h3 id="外置-roms"><a href="#外置-roms" class="headerlink" title="外置 roms"></a>外置 roms</h3><p>也就是你可能一个 2G 或者 4G 的 U 盘刷纯净系统，然后游戏 roms 都存放在其他地方：</p><ul><li>其他存储介质，例如另一个 u 盘或者移动硬盘。不懂 Linux 的话可以格式化成 fat32，这样 windows 可以识别，分区里新建一个 roms 文件夹，然后 roms 里存放一个空白文件 <code>emuelecroms</code> ，roms 目录里存放各个目录即可。移动硬盘一般是 <code>exfat</code> 分区，linux 和 windows 都能识别。 samba 的话官方推荐使用 systemd mount 挂载，见 <a href="https://github.com/EmuELEC/EmuELEC/wiki/ROMS-on-CIFS-SAMBA-shares">sabma share</a></li><li>网络存储，nas上分享成 samba，或者你自己电脑上开共享。</li><li>阿里云盘 webdav 挂载，我自己研究出来的</li></ul><p>默认行为可以看脚本 <code>cat /usr/bin/mount_romfs.sh</code></p><h4 id="exfat-移动硬盘"><a href="#exfat-移动硬盘" class="headerlink" title="exfat 移动硬盘"></a>exfat 移动硬盘</h4><p>移动硬盘格式化成 exfat 格式，然后游戏 roms 拷贝进去，插上去后会自动挂载一个分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">EmuELEC:~ # df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">devtmpfs                791.1M      4.0K    791.1M   0% /dev</span><br><span class="line">/dev/sda1                 1.0G    694.4M    330.6M  68% /flash</span><br><span class="line">/dev/loop0              673.5M    673.5M         0 100% /</span><br><span class="line">/dev/sda2                26.1G     21.9G      4.2G  84% /storage</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /dev/shm</span><br><span class="line">tmpfs                   902.1M     10.3M    891.8M   1% /run</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs                   902.1M      2.6M    899.5M   0% /var</span><br><span class="line">tmpfs                   902.1M         0    902.1M   0% /tmp</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/overlays</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/joypads</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/assets</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/cores</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/database</span><br><span class="line">none                     26.1G     21.9G      4.2G  84% /tmp/shaders</span><br><span class="line">/dev/sdb1               119.2G     43.1G     76.2G  36% /var/media/ZGZ # 这里我的卷名字是 ZGZ</span><br><span class="line"></span><br><span class="line"># umount 掉 /var/media/ZGZ 后挂载到 /storage/roms</span><br><span class="line">EmuELEC:~ # umount /var/media/ZGZ/</span><br><span class="line">EmuELEC:~ # mount -t exfat -o nonempty /dev/sdb1 /storage/roms</span><br></pre></td></tr></table></figure><h4 id="webdav"><a href="#webdav" class="headerlink" title="webdav"></a>webdav</h4><p>阿里云盘 webdav 是我自己摸索出来的，因为有 aliyundrive-webdav 项目能把阿里云盘抽象成 webdav ，但是我 ssh 上去看了下我的固件里并不行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EmuELEC:~ # mount</span><br><span class="line">mount             mount.exfat       mount.exfat-fuse  mount.fuse        mount.ntfs        mountpoint</span><br></pre></td></tr></table></figure><p>在官方 github 上 <a href="https://github.com/EmuELEC/EmuELEC/issues/793">提了 issue</a> 后，开发者告诉我 <code>installentware</code> 后能使用 opkg，我就整出来了。</p><h5 id="aliyundrive-webdav"><a href="#aliyundrive-webdav" class="headerlink" title="aliyundrive-webdav"></a>aliyundrive-webdav</h5><p>先准备用大佬的 <a href="https://github.com/messense/aliyundrive-webdav">messense&#x2F;aliyundrive-webdav</a> 把 阿里云盘 抽象成局域网的 webdav。有两种方案，一种是 openwrt 上，一种是非 openwrt 上，非 openwrt 上我是 Linux 跑 docker，windows 自己去 release 上下载 windows 的。Linux 的话 docker-compose 如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">aliyundrive-webdav:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">aliyundrive-webdav</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;REFRESH_TOKEN=xxxxxx&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBDAV_AUTH_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBDAV_AUTH_PASSWORD=root</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">messense/aliyundrive-webdav</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/bin/aliyundrive-webdav</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--auto-index</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--root=/person/life/Game/EmuELEC/roms</span> <span class="comment"># 阿里云盘上 roms 路径</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cache-ttl=10</span></span><br></pre></td></tr></table></figure><h5 id="挂载-webdav"><a href="#挂载-webdav" class="headerlink" title="挂载 webdav"></a>挂载 webdav</h5><p>实际上我研究出两种方案，一种是利用 rclone，一种是安装 davfs2 挂载</p><h6 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h6><p>先ssh 上去 wget <a href="https://github.com/rclone/rclone/releases">下载 linux-arm64.zip</a> 后，<code>unzip -x </code> 解压它后挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root&quot;</span> | ./rclone obscure -</span><br><span class="line"><span class="comment"># 挂载到当前 roms 目录</span></span><br><span class="line">./rclone mount :webdav: roms --webdav-url http://192.168.101.1:8080 --webdav-user root --webdav-pass DRggunKeWmBO8A9b9T2ZmkPFaR8 --cache-dir /tmp --allow-other --vfs-cache-mode writes --allow-non-empty</span><br></pre></td></tr></table></figure><p>rclone webdav 文档：</p><ul><li><a href="https://rclone.org/webdav/">https://rclone.org/webdav/</a></li><li><a href="https://rclone.org/commands/rclone_obscure/">https://rclone.org/commands/rclone_obscure/</a> # 为啥密码要加密</li></ul><h6 id="mount-t-davfs"><a href="#mount-t-davfs" class="headerlink" title="mount -t davfs"></a>mount -t davfs</h6><p>先 ssh 上去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行下面这个，一路yes 后重启</span></span><br><span class="line">installentware</span><br></pre></td></tr></table></figure><p>然后你就能使用 opkg 了，安装下 <code>davfs2</code>，源在国外，不能安装就去上面的 <a href="https://github.com/EmuELEC/EmuELEC/issues/793#issuecomment-1018214935">issue 里</a>看我安装时候的 url </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install davfs2</span><br></pre></td></tr></table></figure><p>当然这样是无法在 EmuELEC 里使用的，就像我提的 issue 里，需要修改几个地方：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 dav_user 和 dav_group 取消注释，并改成存在的用户，这里我是改成 root</span></span><br><span class="line">vi /opt/etc/davfs2/davfs2.conf </span><br></pre></td></tr></table></figure><p>改完后用 <code>grep -Ev &#39;^\s*$|^\s*#&#39; /opt/etc/davfs2/davfs2.conf</code> 查看是这样的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dav_user        root            # system wide config file only</span><br><span class="line">dav_group       root            # system wide config file only</span><br></pre></td></tr></table></figure><p>然后更改 secret 的文件权限，否则挂载 webdav 的时候会报错 <code>mount.davfs: file /opt/etc/davfs2/secrets has wrong permissions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 0600 /opt/etc/davfs2/secrets</span><br></pre></td></tr></table></figure><p>挂载 webdav，挂载完后建议 <code>ls /storage/roms</code>下，初次有一点卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t davfs  http://192.168.101.1:8080 /storage/roms</span><br></pre></td></tr></table></figure><p>后续挂载前记得执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /opt/var/run/mount.davfs/storage-roms.pid</span><br></pre></td></tr></table></figure><p>挂载完后进菜单刷新下游戏。</p><p>关于 webdav 的一些文档:</p><ul><li><a href="https://man.archlinux.org/man/mount.davfs.8.en">https://man.archlinux.org/man/mount.davfs.8.en</a></li></ul><p>后续可以参考 samba 写一个 systemd 的 mount</p><h3 id="自制-roms"><a href="#自制-roms" class="headerlink" title="自制 roms"></a>自制 roms</h3><p>我这里是自己打包一个纯净的 N1 img 和网上其他 img 里的 ROMS 复制进去为主。</p><p>N1 是个特殊存在，参照下面两个帖子：</p><ul><li>恩山 <a href="https://www.right.com.cn/forum/thread-4090331-1-1.html">EmuELEC 4.2 自主安装</a>里的，</li><li>贴吧 <a href="https://tieba.baidu.com/p/7619382778?pn=1&p_tk=1322QifLqSShpTFmTFD890NZYhknA/BTlYv+JMFCYG1WaXS0J558KEir1sr/GhyhKoYcYhmNaHzkHIG4uN84DH58wemMHpNVngGfh7poXSCPq1KfAiXaTvOnRW+aIz8lXqSf&p_timestamp=1643350078&p_sign=37ee8f2d0a49b58124628a8003121082&p_signature=f28e253e43066beb6450b9130d8fe53d&__pc2ps_ab=1322QifLqSShpTFmTFD890NZYhknA/BTlYv+JMFCYG1WaXS0J558KEir1sr/GhyhKoYcYhmNaHzkHIG4uN84DH58wemMHpNVngGfh7poXSCPq1KfAiXaTvOnRW+aIz8lXqSf%7C1643350078%7Cf28e253e43066beb6450b9130d8fe53d%7C37ee8f2d0a49b58124628a8003121082&red_tag=0480290028&qq-pf-to=pcqq.group">N1可用的鬼灭之刃EmuELEC v4.3</a></li></ul><p>下载官方的 img 文件，然后 N1 的补丁文件我用在 4.3 的官方文件里去替换是可以的。对比了下我之前的人中日月的固件和官方 img 替换了 N1 补丁文件后，发现内核是一样的都是 <code>3.14.29</code>，说明人中日月打包也只是基础设置+游戏 roms 而已。<br>先官方的 img 文件刷到 U 盘里，然后 windows 上把补丁覆盖到第一个分区。然后插 N1 开机启动后设置如下：</p><ul><li>emuelec 菜单时区，也可以可以 ssh 上去</li><li>ra 的中文乱码，<code>systemctl cat tmp-assets.mount</code> ， <code>cp -a /tmp/assets/* /storage/assets/</code> 后提取中文字体覆盖 <code>/storage/assets/ozone/</code> 下的俩 ttf 后（似乎下面的 pkg 目录也要处理？）。重启机器后选择中文，然后再在 RA 里选择保存下配置。</li><li>自家 wifi 设置啥的</li></ul><p>然后拔下来，插 Linux 上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ parted /dev/sda u s p</span><br><span class="line">Model: SanDisk Extreme Pro (scsi)</span><br><span class="line">Disk /dev/sda: 250085376s</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start     End         Size        Type     File system  Flags</span><br><span class="line"> 1      8192s     4202495s    4194304s    primary  fat32        boot, lba</span><br><span class="line"> 2      4202496s  8388608s    4186113s    primary  ext4</span><br><span class="line"> 3      8390656s  250085375s  241694720s  primary  fat32        lba</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有三个分区，先打包一个纯净版，考虑到 U 盘容量问题和现在购买基本都是 16G（jd 上好像最小 8G），打包一个 7350M 的纯净版。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate -s 7350M test.img</span><br></pre></td></tr></table></figure><p>先把设置后的 U 盘内文件系统的东西导出来到 test.img 里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> e1 e2 e3</span><br><span class="line">mount  -o iocharset=utf8 /dev/sda1 e1</span><br><span class="line">mount  /dev/sda2 e2</span><br><span class="line">mount  -o iocharset=utf8 /dev/sda1 e3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对文件开始分区，分区信息参考下 img</span></span><br><span class="line">parted test.img mklabel msdos</span><br><span class="line">parted test.img mkpart p fat32 8192s 4202495s</span><br><span class="line">parted test.img <span class="built_in">set</span> 1 boot on</span><br><span class="line">parted test.img mkpart p ext4 4202496s 8388608s</span><br><span class="line">parted test.img mkpart p fat32 8390656s 100%</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理我们的 img 文件</span></span><br><span class="line"></span><br><span class="line">LOOP_D=$(losetup --find)</span><br><span class="line">losetup --partscan <span class="variable">$LOOP_D</span>  test.img</span><br><span class="line"><span class="comment"># 创建分区表</span></span><br><span class="line">mkfs.vfat -F 32 -n EMUELEC <span class="variable">$&#123;LOOP_D&#125;</span>p1</span><br><span class="line">mkfs.ext4 -L STORAGE <span class="variable">$&#123;LOOP_D&#125;</span>p2</span><br><span class="line">mkfs.vfat -F 32 -n EEROMS <span class="variable">$&#123;LOOP_D&#125;</span>p3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line"><span class="built_in">mkdir</span> -p u&#123;1..3&#125;</span><br><span class="line">mount  -o iocharset=utf8 <span class="variable">$&#123;LOOP_D&#125;</span>p1 u1</span><br><span class="line">mount   <span class="variable">$&#123;LOOP_D&#125;</span>p2 u2</span><br><span class="line">mount  -o iocharset=utf8 <span class="variable">$&#123;LOOP_D&#125;</span>p3 u3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line">rsync -vzrtopgl  e1/ u1/</span><br><span class="line"></span><br><span class="line">rsync -vzrtopgl  e2/ u2/</span><br><span class="line"><span class="comment"># EEROMS</span></span><br><span class="line">rsync -vzrtopgl  e3/ u3/</span><br><span class="line"><span class="comment"># 添加命令别名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias ll=&#x27;ls -l&#x27;&quot;</span> &gt;&gt; u2/.config/profile.d/99-emuelec_functions.conf</span><br><span class="line"><span class="comment"># 也可以自己修改一些文件</span></span><br></pre></td></tr></table></figure><p>拷贝完成后，可以进行一些修改，例如后面的菜单汉化和主题修改。改完了后就可以收尾工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">umount e&#123;1..2&#125; u&#123;1..3&#125;</span><br><span class="line">losetup -D $LOOP_D</span><br><span class="line"></span><br><span class="line">mv test.img EmuELEC-4.3-N1-3.img</span><br><span class="line">gzip EmuELEC-4.3-N1-3.img</span><br></pre></td></tr></table></figure><h2 id="一些其他笔记"><a href="#一些其他笔记" class="headerlink" title="一些其他笔记"></a>一些其他笔记</h2><h3 id="ssh-的一些设置"><a href="#ssh-的一些设置" class="headerlink" title="ssh 的一些设置"></a>ssh 的一些设置</h3><p><code>/storage/.config/emuelec/configs/emuelec.conf</code> 里修改时区 <code>system.timezone=Asia/Shanghai</code></p><h4 id="蓝牙相关"><a href="#蓝牙相关" class="headerlink" title="蓝牙相关"></a>蓝牙相关</h4><p>连蓝牙手柄参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行后进入 bluetoothctl 交互</span></span><br><span class="line">bluetoothctl</span><br><span class="line"></span><br><span class="line">default-agent</span><br><span class="line">power on</span><br><span class="line">discoverable on</span><br><span class="line">pairable on</span><br><span class="line">scan on</span><br></pre></td></tr></table></figure><p>然后会开始扫描 蓝牙，记录下你的蓝牙手柄 MAC，开始配对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trust AC:FD:93:CB:3E:BE</span><br><span class="line">pair AC:FD:93:CB:3E:BE</span><br><span class="line">connect AC:FD:93:CB:3E:BE</span><br></pre></td></tr></table></figure><p>移除设备的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove AC:FD:93:CB:3E:BE</span><br></pre></td></tr></table></figure><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>去官方仓库找，例如 <a href="https://github.com/EmuELEC/es-theme-alekfull-EmueELEC">EmuELEC&#x2F;es-theme-alekfull-EmueELEC</a>，进入下面目录下载后解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /storage/.config/emulationstation/themes</span><br><span class="line">wget https://github.com/EmuELEC/es-theme-alekfull-EmueELEC/archive/refs/heads/master.zip</span><br><span class="line">unzip -x master.zip &amp;&amp; rm -f master.zip</span><br><span class="line">mv es-theme-alekfull-EmueELEC-* es-theme-alekfull-EmueELEC</span><br></pre></td></tr></table></figure><p>主题设置在 <code>/storage/.config/emulationstation/es_settings.cfg</code> 里的 <code>ThemeSet</code></p><h4 id="菜单汉化的话"><a href="#菜单汉化的话" class="headerlink" title="菜单汉化的话"></a>菜单汉化的话</h4><p>善用 find ，例如我看了下菜单里有部分还是英文，例如 <code>DANGER ZONE</code>，用命令查 <code>find / -type f -exec grep -Eil &#39;DANGER\s+zone&#39; &#123;&#125; \;</code>，找到如下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/storage/.config/emulationstation/resources/mamenames.xml</span><br><span class="line">/storage/.config/emuelec/configs/locale/de/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/pt_PT/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/ko/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/hu/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/nb_NO/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/pl/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/ca/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/zh_TW/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/pt_BR/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/it/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/he/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/uk_UA/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/ru_RU/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/sv_SE/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/oc_FR/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/eu_ES/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/nl/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/el/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/zh_CN/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/zh_CN/LC_MESSAGES/emulationstation2.po~</span><br><span class="line">/storage/.config/emuelec/configs/locale/cy_GB/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/ja_JP/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/nn_NO/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/es_MX/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/tr/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/es/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/es/LC_MESSAGES/emulationstation2.po~</span><br><span class="line">/storage/.config/emuelec/configs/locale/fr/LC_MESSAGES/emulationstation2.po</span><br><span class="line">/storage/.config/emuelec/configs/locale/ar/LC_MESSAGES/emulationstation2.po</span><br></pre></td></tr></table></figure><p>例如我要汉化 <code>DANGER ZONE</code> 这个菜单，按照下面步骤修改文件内容后发布：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /storage/.config/emuelec/configs/locale/zh_CN/LC_MESSAGES/</span><br><span class="line">vi emulationstation2.po</span><br><span class="line"># msgfmt 在包 gettext 里</span><br><span class="line">msgfmt -o emulationstation2.mo emulationstation2.po</span><br></pre></td></tr></table></figure><h3 id="N1-补丁后开机-CoreELEC-图标解决"><a href="#N1-补丁后开机-CoreELEC-图标解决" class="headerlink" title="N1 补丁后开机 CoreELEC 图标解决"></a>N1 补丁后开机 CoreELEC 图标解决</h3><p>参照 <a href="https://www.qishe.org/3774.html#">N1 启动原版 EmuELEC</a>:</p><p>目前 N1跑 Emuelec 的办法都是替换补丁，补丁里的内核是从 CoreELEC 编译来的，所以启动时会显示 CoreELEC 的 logo，对于洁癖党来说不能忍受，而且一直用这个补丁内核的话，就不能随 EmuELEC 的更新而更新。哪有没有办法直接启动原版呢？答案是肯定的。首先得搞清楚为什么N1不能启动原版的原因。那是因为 EmuELEC 的内核打包成 Android boot image 格式，而 N1 的 uboot 却只支持未经压缩的内核，那我们只要想办法从 EmuELEC 的中解包出来未经压缩的内核和 initramfs 就可以了。<br>从新版的EmuELEC镜像中获取 kernel.img，然后下载 <a href="http://whiteboard.ping.se/Android/Unmkbootimg">这个页面点那个 download 下载 unmkbootimg</a>，解压，在 linux 环境运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 unmkbootimg</span></span><br><span class="line">wget http://whiteboard.ping.se/uploads/Android/unmkbootimg.gz</span><br><span class="line">gzip  -d unmkbootimg.gz</span><br><span class="line"><span class="built_in">chmod</span> a+x unmkbootimg</span><br><span class="line"></span><br><span class="line">./unmkbootimg kernel.img  </span><br><span class="line"><span class="comment"># 会得到类似以下的文件：</span></span><br><span class="line">initramfs.cpio.gz  </span><br><span class="line">zImage</span><br><span class="line"><span class="comment"># 同时记住输出里的  Kernel address</span></span><br><span class="line">To recompile this image, use:</span><br><span class="line">  mkbootimg --kernel zImage --ramdisk initramfs.cpio.gz ...</span><br></pre></td></tr></table></figure><p>如果此时需要修改开机图片的话，可以执行下面操作，这个步骤是通用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> initramfs</span><br><span class="line"><span class="built_in">cd</span> initramfs</span><br><span class="line"><span class="comment"># 我看有些 initramfs.cpio.gz 并不是 gzip压缩的，所以下面报错的话先试试 file initramfs.cpio.gz 看看，是 gzip的话就 gzip -d initramfs.cpio.gz</span></span><br><span class="line">cpio -idmv &lt; ../initramfs.cpio.gz</span><br><span class="line"><span class="comment"># 替换 splash/下的 splash-1080.png 即可，必须格式也是，而不是后缀</span></span><br><span class="line"><span class="built_in">ls</span> -l splash/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换完成后打包回 initramfs.cpio.gz</span></span><br><span class="line"><span class="comment"># find . | cpio --create --format=&#x27;newc&#x27; &gt; ../initramfs.cpio.gz</span></span><br><span class="line">find . -print0 | cpio --null --create --format=newc &gt; ../initramfs.cpio.gz</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 把上面 unmkbootimg 输出的 mkbootimg 命令执行</span></span><br><span class="line"><span class="comment"># https://github.com/EmuELEC/EmuELEC/search?q=mkbootimg  https://github.com/EmuELEC/EmuELEC/search?q=ANDROID_BOOTIMG_OPTIONS</span></span><br><span class="line">mkbootimg --kernel zImage --ramdisk initramfs.cpio.gz --base 0x0 --kernel_offset 0x1080000 -o new_kernel.img</span><br></pre></td></tr></table></figure><p>下面的没试过，主要是 N1 的步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># https://www.right.com.cn/forum/thread-6632323-1-1.html</span><br><span class="line"># 把 initramfs.cpio.gz 打包成 uInitrd。</span><br><span class="line">mkimage -A arm64 -O linux -T kernel -C none -d initramfs.cpio.gz uInitrd</span><br><span class="line"></span><br><span class="line">#这里得到的 kernel 就是未压缩的内核，把他改名成 kernel.img。</span><br><span class="line">lzop -d zImage -o kernel.img.new</span><br></pre></td></tr></table></figure><p>大功告成，把 kernel.img 和 uInitrd 替换补丁里的同名文件，启动时就是用原版内核了</p><h3 id="开机启动顺序"><a href="#开机启动顺序" class="headerlink" title="开机启动顺序"></a>开机启动顺序</h3><p><a href="https://blog.csdn.net/michaelchain/article/details/119628601">https://blog.csdn.net/michaelchain/article/details/119628601</a> 参考这个，更多的不写进来了</p><p>这个是在 uboot 中进行管理的, 可以通过 <code>fw_printenv</code> 命令进行查看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EmuELEC:~ # fw_printenv</span><br><span class="line">...</span><br><span class="line">baudrate=115200</span><br><span class="line">boot_count=0</span><br><span class="line">bootcmd=if test $&#123;bootfromnand&#125; = 1; then setenv bootfromnand 0; saveenv; else run bootfromsd; run bootfromusb; fi; run storeboot</span><br><span class="line">bootcount_check=echo bootcounts=$&#123;boot_count&#125;; if itest $&#123;boot_count&#125; == 0; then setenv boot_count 1;saveenv;else if itest $&#123;boot_count&#125; == 1; then setenv boot_count 2;saveenv;else if itest $&#123;boot_count&#125; == 2; then setenv boot_count 3;saveenv;else if itest $&#123;boot_count&#125; == 3; then setenv boot_count 4;saveenv;else if itest $&#123;boot_count&#125; == 4; then run recovery_from_flash;fi;fi;fi;fi;fi</span><br><span class="line">bootdelay=0</span><br><span class="line">bootfromnand=0</span><br><span class="line">bootfromsd=mmcinfo; if fatload mmc 0 $&#123;loadaddr&#125; kernel.img; then run sddtb; setenv bootargs $&#123;bootargs&#125; bootfromsd; bootm; fi</span><br><span class="line">bootfromusb=usb start 0; if fatload usb 0 $&#123;loadaddr&#125; kernel.img; then run usbdtb; setenv bootargs $&#123;bootargs&#125; bootfromusb; bootm; fi</span><br><span class="line">bootmode_check=get_rebootmode; echo reboot_mode=$&#123;reboot_mode&#125;;if test $&#123;reboot_mode&#125; = factory_reset; then defenv_reserv;setenv upgrade_step 2; save;fi;</span><br><span class="line">cmdline_keys=if keyman init 0x1234; then if sec_keyunify read mac $&#123;loadaddr&#125; str; then setenv bootargs $&#123;bootargs&#125; mac=$&#123;mac&#125; androidboot.mac=$&#123;mac&#125;;fi;fi;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到其中的 bootfromnand 变量是用于控制设备的启动顺序, 如果值为1, 那么从nand(设备内部存储, eMMC等), 如果值为0, 那么依次从sd, 从usb启动, 在这个过程中如果某个介质可以启动了, 就把这个方式加到bootargs变量的值当中去, 例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs $&#123;bootargs&#125; bootfromsd;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EmuELEC-笔记&quot;&gt;&lt;a href=&quot;#EmuELEC-笔记&quot; class=&quot;headerlink&quot; title=&quot;EmuELEC 笔记&quot;&gt;&lt;/a&gt;EmuELEC 笔记&lt;/h1&gt;&lt;p&gt;后续关于 EmuELEC 的笔记和知识点都会在这里更新，假定看到这篇文章的人</summary>
      
    
    
    
    
    <category term="linux" scheme="http://zhangguanzhang.github.io/tags/linux/"/>
    
    <category term="EmuELEC" scheme="http://zhangguanzhang.github.io/tags/EmuELEC/"/>
    
  </entry>
  
  <entry>
    <title>openwrt 的在线升级固件和扩容的研究</title>
    <link href="http://zhangguanzhang.github.io/2021/12/19/openwrt-update/"/>
    <id>http://zhangguanzhang.github.io/2021/12/19/openwrt-update/</id>
    <published>2021-12-19T21:28:30.000Z</published>
    <updated>2021-12-19T21:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>手上有 r2s、N1 和 x86_64 的固件维护，r2s 的参照别人的脚本搞了在线升级固件的脚本，别人的脚本只支持 ext4 升级，而后面我也把 squashfs 格式的固件升级搞出来了。恩山上有的人的固件我也看 x86_64 也可以在线升级，后面我也会去测下 x86_64 的，理论上是通用的。</p><h2 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h2><p>以 r2s 为例讲解。参照目前看到的的 <a href="https://github.com/klever1988/nanopi-openwrt/raw/master/scripts/autoupdate.sh">1988 的升级脚本</a> ，最初的人不知道是谁搞的在线升级，因为很久之前就看到有些人的固件能在线升级了。</p><h3 id="升级前准备"><a href="#升级前准备" class="headerlink" title="升级前准备"></a>升级前准备</h3><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><p>确保固件有下面命令：</p><table><thead><tr><th align="left">command</th><th align="left">package name</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">parted</td><td align="left">parted</td><td align="left">修改分区和获取分区信息</td></tr><tr><td align="left">losetup</td><td align="left">losetup</td><td align="left">loop device 命令，用于挂载固件里的文件分区</td></tr><tr><td align="left">resize2fs</td><td align="left">resize2fs</td><td align="left">resize ext4 需要</td></tr><tr><td align="left">truncate</td><td align="left">coreutils-truncate</td><td align="left">填充和清空文件，这里是填充扩容</td></tr><tr><td align="left">curl</td><td align="left">curl</td><td align="left">下载，以及http 调用一些 api</td></tr><tr><td align="left">wget</td><td align="left">wget</td><td align="left">下载命令</td></tr><tr><td align="left">mksquashfs</td><td align="left">squashfs-tools-mksquashfs</td><td align="left">squashfs格式需要</td></tr><tr><td align="left">unsquashfs</td><td align="left">squashfs-tools-unsquashfs</td><td align="left">squashfs格式需要</td></tr></tbody></table><h4 id="KERNEL-PARTSIZE-和-ROOTFS-PARTSIZE"><a href="#KERNEL-PARTSIZE-和-ROOTFS-PARTSIZE" class="headerlink" title="KERNEL_PARTSIZE 和 ROOTFS_PARTSIZE"></a>KERNEL_PARTSIZE 和 ROOTFS_PARTSIZE</h4><p><code>CONFIG_TARGET_KERNEL_PARTSIZE</code> 和 <code>CONFIG_TARGET_ROOTFS_PARTSIZE</code> 是 <code>.config</code> 文件里的，单位是 <code>M</code>，前者是类似常规大型 linux os 里的 <code>/boot</code> 分区，openwrt 默认就只有这两个分区。</p><p>r2s 的话 <code>KERNEL_PARTSIZE</code> 一般 <code>12M</code> 就够用了，但是很多网上互相抄的人在 r2s 的 <code>.config</code> 里给 32、64 之类的非常浪费。<code>ROOTFS_PARTSIZE</code> 是最终的根分区大小，给小了因为编译带很多插件，导致最终的打包镜像容量不够，我的固件是 <code>635</code>。然后 r2s 是内存卡，一般现在内存大大小都是 4G 以上，也就是刷完固件后，根分区就是 635M ，卡的剩下空间都没使用，当然，x86_64 也是一样的问题。所以就有了这个升级顺带扩容的步骤。</p><h4 id="提前的容量存储新固件"><a href="#提前的容量存储新固件" class="headerlink" title="提前的容量存储新固件"></a>提前的容量存储新固件</h4><p>1988 的固件非常小，下载 300M，从一个新手初次尝试来说，很可能尴尬的情况就是卡刷后 rootfs 是 600M，然后可用就200M，固件压缩后350M，所以我固件在初次扩容升级会暂时新建一个分区，用于存储下载升级的固件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一般很多固件 /opt 单独挂载，或者属于 / ，所以如果已经在升级阶段扩容了，固件就存 /opt下，没扩容过，就存挂载点 /tmp/update/download</span></span><br><span class="line">if [ $(df  -m /opt | awk &#x27;NR==2&#123;print $4&#125;&#x27;) -lt 2400 ];then</span><br><span class="line">    NEED_GROW=1</span><br><span class="line">    mkdir -p /tmp/update/download</span><br><span class="line">    warning &#x27;检测到当前未扩容，先借用初版固件扩容，后续请再执行升级脚本&#x27;</span><br><span class="line">    df -h</span><br><span class="line">    parted /dev/$block_device p</span><br><span class="line">    # 该文件存 part_num ，防止机器重启后重复新建了分区表</span><br><span class="line">    if [ ! -f &#x27;/opt/.parted&#x27; ];then</span><br><span class="line">        start_sec=$(parted /dev/$block_device unit s print free | awk &#x27;$1~&quot;s&quot;&#123;a=$1&#125;END&#123;print a&#125;&#x27;)</span><br><span class="line">        parted /dev/$block_device mkpart p ext4 $&#123;start_sec&#125; 4G</span><br><span class="line">        part_num=$( parted /dev/$block_device p | awk &#x27;$5==&quot;primary&quot;&#123;a=$1&#125;END&#123;print a&#125;&#x27; )</span><br><span class="line">        sleep 3 # 此处会自动挂载造成蛋疼</span><br><span class="line">        if grep -E /dev/$&#123;block_device&#125;p$&#123;part_num&#125; /proc/mounts;then</span><br><span class="line">            if mountpoint -q  /mnt/$&#123;block_device&#125;p$&#123;part_num&#125;;then</span><br><span class="line">                touch /mnt/$&#123;block_device&#125;p$&#123;part_num&#125;/test &amp;&gt;/dev/null || NEED_MKFS=1</span><br><span class="line">                umount /mnt/$&#123;block_device&#125;p$&#123;part_num&#125;</span><br><span class="line">            fi</span><br><span class="line">            [ -n &quot;$NEED_MKFS&quot; ] &amp;&amp; mkfs.ext4 -F /dev/$&#123;block_device&#125;p$&#123;part_num&#125;</span><br><span class="line">        else</span><br><span class="line">            mkfs.ext4 -F /dev/$&#123;block_device&#125;p$&#123;part_num&#125;</span><br><span class="line">        fi</span><br><span class="line">        echo $&#123;part_num&#125; &gt; /opt/.parted</span><br><span class="line">    else</span><br><span class="line">        part_num=$(cat /opt/.parted)</span><br><span class="line">    fi</span><br><span class="line">    mountpoint -q  /tmp/update/download || mount /dev/$&#123;block_device&#125;p$&#123;part_num&#125; /tmp/update/download</span><br><span class="line">    USER_FILE=/tmp/update/download/openwrt.img.gz</span><br><span class="line">    rm -f $&#123;USER_FILE&#125;</span><br><span class="line">    # 因为初次没扩容，我的固件是存放在 docker 镜像里的，可能拉取 docker 镜像就容量满了，所以我单独有个release 存放编译好的固件，直接下载，用于初次</span><br><span class="line">    wget https://ghproxy.com/https://github.com/zhangguanzhang/Actions-OpenWrt/releases/download/fs/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-ext4-sysupgrade.img.gz -O $&#123;USER_FILE&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>对于后面的下载新版本固件，1988 的脚本我看他是 github action 每天定时编译发布存 release，感觉后面他可能会被 github 给 ban了。 我脚本里是存 docker hub 的镜像里，我的固件都自带 docker，docker 拉取镜像后提取镜像文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;$&#123;BUILD_DIR&#125;/Dockerfile &lt;&lt; EOF</span><br><span class="line">FROM alpine</span><br><span class="line">LABEL FILE=$file</span><br><span class="line">LABEL NUM=$&#123;GITHUB_RUN_NUMBER&#125;</span><br><span class="line">COPY * /</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>github action 上利用 buildx 构建存储这个镜像，用 LABEL 指定文件路径名，直接 copy 出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull zhangguanzhang/r2s:$&#123;VER&#125;</span><br><span class="line">CTR_PATH=$( docker inspect zhangguanzhang/r2s:$&#123;VER&#125; --format &#x27;&#123;&#123; .Config.Labels &#125;&#125;&#x27; | grep -Eo &#x27;openwrt-.+img.gz&#x27; )</span><br><span class="line">docker create --name update zhangguanzhang/r2s:$&#123;VER&#125;</span><br><span class="line">docker cp update:/$&#123;CTR_PATH&#125; $&#123;USER_FILE&#125;</span><br><span class="line">docker rm update</span><br><span class="line">docker rmi zhangguanzhang/r2s:$&#123;VER&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容和升级"><a href="#扩容和升级" class="headerlink" title="扩容和升级"></a>扩容和升级</h3><p>固件分为两个文件系统，SquashFS 和 Ext4。</p><p>SquashFS（推荐）：固件文件名带有 “squashfs”，SquashFS 为只读文件系统，支持系统还原（支持物理 Reset按钮 还原），支持后台固件升级，更能避免 SD 卡文件系统触发写保护，适合绝大部分用户使用。</p><p>Ext4：固件文件名带有 “ext4”，Ext4 文件系统具备整个分区可读写性质，更适合熟悉 Linux 系统的用户使用，但意外断电有几率造成分区写入保护。</p><h4 id="ext4"><a href="#ext4" class="headerlink" title="ext4"></a>ext4</h4><p>前面两个章节是下载和存放固件 img.gz ，现在开始扩容和升级，扩容就是利用 truncate 下固件文件的大小，然后修复固件文件里的第二个分区。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为最终会把修改后的固件写入到根分区所在的块设备，所以固件需要存放在 /tmp 目录下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大小和内存挂钩，所以不要size太大</span></span><br><span class="line">mount -t tmpfs -o remount,size=870m tmpfs /tmp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后面的 <span class="literal">true</span> 是因为 github action 的打包会影响解压，虽然最终报错，但是解压的固件还是能用的</span></span><br><span class="line">gzip -dc openwrt.img.gz &gt; /tmp/update/openwrt.img || true</span><br><span class="line"></span><br><span class="line">block_device=&#x27;mmcblk0&#x27;</span><br><span class="line">[ ! -d /sys/block/$block_device ] &amp;&amp; block_device=&#x27;mmcblk1&#x27;</span><br><span class="line">bs=`expr $(cat /sys/block/$block_device/size) \* 512`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件大小</span></span><br><span class="line">truncate -s $bs /tmp/update/openwrt.img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改第二个分区大小，1988用的是 <span class="built_in">echo</span> <span class="string">&quot;, +&quot;</span> | sfdisk -N 2 /tmp/update/openwrt.img 可读性不好</span></span><br><span class="line">parted /tmp/update/openwrt.img resizepart 2 100%</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将镜像文件虚拟成块设备，类似于 windows 的那种双击 iso 后的装载 iso ，对于块设备的操作都会时刻写入到 img 文件里</span></span><br><span class="line">lodev=$(losetup -f)</span><br><span class="line">losetup -P $lodev /tmp/update/openwrt.img</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载 rootfs 解压备份文件</span></span><br><span class="line">mkdir -p /mnt/img</span><br><span class="line">mount -t ext4 $&#123;lodev&#125;p2 /mnt/img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">op 的备份命令</span></span><br><span class="line">sysupgrade -b back.tar.gz</span><br><span class="line">tar zxf back.tar.gz -C /mnt/img</span><br><span class="line">    if ! grep -q macaddr /etc/config/network; then</span><br><span class="line">        warning &#x27;注意：由于已知的问题，“网络接口”配置无法继承，重启后需要重新设置WAN拨号和LAN网段信息&#x27;</span><br><span class="line">        rm /mnt/img/etc/config/network;</span><br><span class="line">    fi</span><br><span class="line">mountpoint -q  /mnt/img &amp;&amp; umount /mnt/img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">openwrt 存在 auto mount，此处取消挂载</span></span><br><span class="line">grep -q $&#123;lodev&#125;p1 /proc/mounts &amp;&amp; umount $&#123;lodev&#125;p1</span><br><span class="line">grep -q $&#123;lodev&#125;p2 /proc/mounts &amp;&amp; umount $&#123;lodev&#125;p2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修复固件里扩容的分区</span></span><br><span class="line">e2fsck -yf $&#123;lodev&#125;p2 || true</span><br><span class="line">resize2fs $&#123;lodev&#125;p2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消 img 文件的挂载</span></span><br><span class="line">losetup -d $lodev</span><br><span class="line"></span><br><span class="line">echo 1 &gt; /proc/sys/kernel/sysrq</span><br><span class="line">echo u &gt; /proc/sysrq-trigger &amp;&amp; umount / || true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个 ddnz 命令从他那里复制的</span></span><br><span class="line">/tmp/ddnz /tmp/update/openwrt.img /dev/$block_device</span><br><span class="line">printf &#x27;%b\n&#x27; &quot;\033[1;32m[SUCCESS] 刷机完毕，正在重启...\033[0m&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">echo b &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure><h4 id="squashfs"><a href="#squashfs" class="headerlink" title="squashfs"></a>squashfs</h4><p>openwrt 的另一种文件系统固件，就是一个只可读写的压缩的 rootfs 解压开作为 <code>overlay</code> 的 lower dir 只读，提供给用户的是 overlay 的 upper dir 去写入，长按设备上的 reset 按钮恢复出厂设置就是把 overlay 的上层丢弃掉，所以 squashfs 类型的固件带快照功能。当然市面上搜了下也没找到 squashfs 类型的固件在升级的时候扩容的步骤，自己研究了下搞出来了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载 rootfs 解压备份文件</span></span><br><span class="line">mkdir -p /mnt/img</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里会报错 wrong fs <span class="built_in">type</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount -t ext4 <span class="variable">$&#123;lodev&#125;</span>p2 /mnt/img</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">被我改成这样</span></span><br><span class="line">mount $&#123;lodev&#125;p2 /mnt/img</span><br><span class="line">IMG_FSTYPE=$(df -T /mnt/img | awk &#x27;NR==2&#123;print $2&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>取到了 <code>IMG_FSTYPE</code> 后走不同的逻辑，这里它的值是 <code>squashfs</code> ，而挂载后的 <code>/mnt/img</code> 是无法写入任何文件的。然后搜了下 <code>squashfs</code> 相关，自己折腾的话需要 <code>mksquashfs</code> 和 <code>unsquashfs</code> 的两个命令玩。一开始是尝试解压 <code>$&#123;lodev&#125;p2</code> ，结果经常 oom ，去找 squashfs-tools 源码作者询问如何限制内存得到下面信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/plougher/squashfs-tools/issues/139#issuecomment-991779738</span><br><span class="line">unsquashfs -da 10 -fr 10 $&#123;lodev&#125;p2</span><br></pre></td></tr></table></figure><p>基本一直卡着，毕竟最后肯定要重新 <code>mksquashfs</code> 打包的，然后直接 cp 得了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$IMG_FSTYPE&quot; = &#x27;squashfs&#x27; ];then</span><br><span class="line">    info &quot;检测到使用 squashfs 固件，开始导出文件系统&quot;</span><br><span class="line">    # https://github.com/plougher/squashfs-tools/issues/139#issuecomment-991779738</span><br><span class="line">    # unsquashfs -da 10 -fr 10 /dev/loop0p2</span><br><span class="line">    # 这个解压太耗时了，只能拷贝整了</span><br><span class="line">    mkdir -p /mnt/img_sq</span><br><span class="line">    cp -a /mnt/img/* /mnt/img_sq</span><br><span class="line">    umount /mnt/img/</span><br><span class="line">    rm -rf /mnt/img</span><br><span class="line">    mv /mnt/img_sq /mnt/img</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后这个目录写入备份文件，然后就打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mksquashfs /mnt/img /opt/op.squashfs</span><br></pre></td></tr></table></figure><p>结果打包也经常 oom ，看了下命令的帮助，发现有内存限制的，加上也偶尔 oom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mksquashfs /mnt/img /opt/op.squashfs -mem 20M </span><br></pre></td></tr></table></figure><p>最后逼我用 <code>oom_score_adj</code> 调整 oom 优先级了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -998 &gt; /proc/$$/oom_score_adj 2&gt;/dev/null || true</span><br></pre></td></tr></table></figure><p>当然，实际打包很多选项的，可以先利用 <code>unsquashfs</code> 看下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unsquashfs -s $&#123;lodev&#125;p2 &gt; squashfs.info</span><br><span class="line"></span><br><span class="line">comp=$(awk &#x27;$1==&quot;Compression&quot;&#123;print $2&#125;&#x27; squashfs.info)</span><br><span class="line">sq_block_size=$(awk &#x27;$1==&quot;Block&quot;&#123;print $NF&#125;&#x27; squashfs.info)</span><br><span class="line">xattrs=&#x27;-xattrs&#x27; # CONFIG_SELINUX=y</span><br><span class="line">grep -Eq &#x27;Xattrs.+?not&#x27; squashfs.info &amp;&amp; xattrs=&#x27;-no-xattrs&#x27;</span><br><span class="line"></span><br><span class="line">echo -998 &gt; /proc/$$/oom_score_adj 2&gt;/dev/null || true</span><br><span class="line"></span><br><span class="line">mksquashfs /mnt/img /opt/op.squashfs -comp $&#123;comp&#125; \</span><br><span class="line">    -b $[sq_block_size/1024]k $xattrs -mem 20M</span><br></pre></td></tr></table></figure><p>然后写入到块设备上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/opt/op.squashfs of=$&#123;lodev&#125;p2</span><br></pre></td></tr></table></figure><p>然后卸载 ${lodev} 刷入固件发现无法开机，在 lede 的源码里 find grep 后找到了 mksquashfs 参数来源于源码下 <code>./include/image.mk</code> 的 <code>SQUASHFSOPT</code> 和 <code>define Image/mkfs/squashfs-common</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=1024k</span><br><span class="line">SQUASHFS_BLOCKSIZE := <span class="variable">$(CONFIG_TARGET_SQUASHFS_BLOCK_SIZE)</span>k</span><br><span class="line">SQUASHFSOPT := -b <span class="variable">$(SQUASHFS_BLOCKSIZE)</span></span><br><span class="line">SQUASHFSOPT += -p &#x27;/dev d 755 0 0&#x27; -p &#x27;/dev/console c 600 0 0 5 1&#x27;</span><br><span class="line">SQUASHFSOPT += <span class="variable">$(<span class="built_in">if</span> <span class="variable">$(CONFIG_SELINUX)</span>,-xattrs,-no-xattrs)</span></span><br><span class="line">SQUASHFSCOMP := gzip</span><br><span class="line">LZMA_XZ_OPTIONS := -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2</span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(CONFIG_SQUASHFS_XZ)</span>,y)</span><br><span class="line">  <span class="keyword">ifneq</span> (<span class="variable">$(<span class="built_in">filter</span> arm x86 powerpc sparc,<span class="variable">$(LINUX_KARCH)</span>)</span>,)</span><br><span class="line">    BCJ_FILTER:=-Xbcj <span class="variable">$(LINUX_KARCH)</span>   <span class="comment"># 例如此处  -Xbcj x86</span></span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line">  SQUASHFSCOMP := xz <span class="variable">$(LZMA_XZ_OPTIONS)</span> <span class="variable">$(BCJ_FILTER)</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>本地搞个编译 openwrt 的时候 make 带上 <code>-V=s</code> 开详细信息看到下面信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">/home/guanzhang/lede/staging_dir/host/bin/mksquashfs4 /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/root-rockchip /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/root.squashfs -nopad -noappend -root-owned -comp xz -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2  -b 1024k -p <span class="string">&#x27;/dev d 755 0 0&#x27;</span> -p <span class="string">&#x27;/dev/console c 600 0 0 5 1&#x27;</span> -no-xattrs -processors 6</span></span><br><span class="line">Pseudo file &quot;/dev&quot; exists in source filesystem &quot;/home/guanzhang/lede/build_dir/target-aarch64_generic_musl/root-rockchip/dev&quot;.</span><br><span class="line">Ignoring, exclude it (-e/-ef) to override.</span><br><span class="line">Parallel mksquashfs: Using 6 processors</span><br><span class="line">Creating 4.0 filesystem on /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/root.squashfs, block size 1048576.</span><br><span class="line">[=============================================================-] 8430/8430 100%</span><br><span class="line"></span><br><span class="line">Exportable Squashfs 4.0 filesystem, xz compressed, data block size 1048576</span><br><span class="line">compressed data, compressed metadata, compressed fragments,</span><br><span class="line">no xattrs, compressed ids</span><br><span class="line">duplicates are removed</span><br><span class="line">Filesystem size 135525.99 Kbytes (132.35 Mbytes)</span><br><span class="line">25.39% of uncompressed filesystem size (533693.75 Kbytes)</span><br><span class="line">Inode table size 60908 bytes (59.48 Kbytes)</span><br><span class="line">20.00% of uncompressed inode table size (304503 bytes)</span><br><span class="line">Directory table size 85796 bytes (83.79 Kbytes)</span><br><span class="line">38.42% of uncompressed directory table size (223339 bytes)</span><br><span class="line">Number of duplicate files found 1164</span><br><span class="line">Number of inodes 9212</span><br><span class="line">Number of files 8077</span><br><span class="line">Number of fragments 123</span><br><span class="line">Number of symbolic links  647</span><br><span class="line">Number of device nodes 1</span><br><span class="line">Number of fifo nodes 0</span><br><span class="line">Number of socket nodes 0</span><br><span class="line">Number of directories 487</span><br><span class="line">Number of ids (unique uids + gids) 1</span><br><span class="line">Number of uids 1</span><br><span class="line">root (0)</span><br><span class="line">Number of gids 1</span><br><span class="line">root (0)</span><br></pre></td></tr></table></figure><p>大致参数就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-nopad -noappend -root-owned -comp xz -Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2  -b 1024k -p &#x27;/dev d 755 0 0&#x27; -p &#x27;/dev/console c 600 0 0 5 1&#x27; -no-xattrs -processors 6</span><br></pre></td></tr></table></figure><p>但是 openwrt 和 Centos 上安装的 <code>squashfs-tools</code> 的 mksquashfs xz 压缩时候都没有 <code>-Xpreset 9 -Xe -Xlc 0 -Xlp 2 -Xpb 2</code> 这些参数，后面发现了是 openwrt 编译的时候下载 squashfs-tools 后打了 patch 编译后才有的，不过后面测试这几个选项不影响。同时看到了打包的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PADDING=1 /home/guanzhang/lede/scripts/gen_image_generic.sh /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/tmp/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz 18 /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/tmp/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz.boot 635 /home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/root.squashfs 32768</span><br></pre></td></tr></table></figure><p>得到了参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ dd if=/dev/zero of=/home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/tmp/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz bs=512 seek=131072 conv=notrunc count=1300480</span><br><span class="line">1300480+0 records in</span><br><span class="line">1300480+0 records out</span><br><span class="line">665845760 bytes (666 MB, 635 MiB) copied, 2.12896 s, 313 MB/s</span><br><span class="line">+ dd if=/home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/root.squashfs of=/home/guanzhang/lede/build_dir/target-aarch64_generic_musl/linux-rockchip_armv8/tmp/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz bs=512 seek=131072 conv=notrunc</span><br></pre></td></tr></table></figure><p>可以看到是直接写 img 文件的，这里虽然显示的是 img.gz ，但是如果压缩后的文件的话，那 seek 大小就不对。实际上后面才压缩的，所以我的参数为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">part2_seek=$(parted /tmp/update/openwrt.img u s p | awk &#x27;$1==2&#123;print +$2&#125;&#x27;)</span><br><span class="line">mksquashfs /mnt/img /opt/op.squashfs -nopad -noappend -root-owned \</span><br><span class="line">    -comp $&#123;comp&#125; $&#123;LZMA_XZ_OPTIONS&#125; \</span><br><span class="line">    -b $[sq_block_size/1024]k \</span><br><span class="line">    -p &#x27;/dev d 755 0 0&#x27; -p &#x27;/dev/console c 600 0 0 5 1&#x27; \</span><br><span class="line">    $xattrs -mem 20M </span><br><span class="line"></span><br><span class="line">losetup -l -O NAME -n | grep -Eqw $lodev &amp;&amp; losetup -d $lodev</span><br><span class="line">dd if=/opt/op.squashfs of=/tmp/update/openwrt.img bs=512 seek=$&#123;part2_seek&#125; conv=notrunc</span><br></pre></td></tr></table></figure><p>然后写入即可</p><h2 id="最终参考"><a href="#最终参考" class="headerlink" title="最终参考"></a>最终参考</h2><p>我的脚本当前存放在 test 分支，可能后续切到 main 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">https://github.com/zhangguanzhang/Actions-OpenWrt/blob/test/build/scripts/update.sh</span><br><span class="line"></span><br><span class="line">https://github.com/zhangguanzhang/Actions-OpenWrt/blob/main/build/scripts/update.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/klever1988/nanopi-openwrt/raw/master/scripts/autoupdate.sh">1988 的升级脚本</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;手上有 r2s、N1 和 x86_64 的固件维护，r2s 的参照别人的脚本搞了在线升级固件的脚本，别人的脚本只支持 ext4 升级，而后面</summary>
      
    
    
    
    
    <category term="openwrt" scheme="http://zhangguanzhang.github.io/tags/openwrt/"/>
    
    <category term="squashfs" scheme="http://zhangguanzhang.github.io/tags/squashfs/"/>
    
  </entry>
  
  <entry>
    <title>docker数据盘损坏后启动报错 Error starting daemon: Error initializing network controller: Error creating default &quot;bridge&quot; network: package not installed</title>
    <link href="http://zhangguanzhang.github.io/2021/12/12/mod-rejected-by-service/"/>
    <id>http://zhangguanzhang.github.io/2021/12/12/mod-rejected-by-service/</id>
    <published>2021-12-12T23:28:30.000Z</published>
    <updated>2021-12-12T23:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>客户现场的数据盘损坏了，修复启动机器后 docker 无法启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@db1 docker]# /data/kube/bin/dockerd</span><br><span class="line">WARN[0000] The &quot;graph&quot; config file option is deprecated. Please use &quot;data-root&quot; instead. </span><br><span class="line">WARN[2021-12-11T21:16:07.917969366+08:00] could not change group /var/run/docker.sock to docker: group docker not found </span><br><span class="line">WARN[2021-12-11T21:16:07.942745757+08:00] failed to load plugin io.containerd.snapshotter.v1.btrfs  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.btrfs must be a btrfs filesystem to be used with the btrfs snapshotter&quot;</span><br><span class="line">WARN[2021-12-11T21:16:07.944020734+08:00] failed to load plugin io.containerd.snapshotter.v1.aufs  error=&quot;modprobe aufs failed: &quot;modprobe: FATAL: Module aufs not found.\n&quot;: exit status 1&quot;</span><br><span class="line">WARN[2021-12-11T21:16:07.944275670+08:00] failed to load plugin io.containerd.snapshotter.v1.zfs  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter&quot;</span><br><span class="line">WARN[2021-12-11T21:16:07.944314186+08:00] could not use snapshotter btrfs in metadata plugin  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.btrfs must be a btrfs filesystem to be used with the btrfs snapshotter&quot;</span><br><span class="line">WARN[2021-12-11T21:16:07.944324941+08:00] could not use snapshotter aufs in metadata plugin  error=&quot;modprobe aufs failed: &quot;modprobe: FATAL: Module aufs not found.\n&quot;: exit status 1&quot;</span><br><span class="line">WARN[2021-12-11T21:16:07.944333098+08:00] could not use snapshotter zfs in metadata plugin  error=&quot;path /data/kube/docker/containerd/daemon/io.containerd.snapshotter.v1.zfs must be a zfs filesystem to be used with the zfs snapshotter&quot;</span><br><span class="line">WARN[2021-12-11T21:16:09.131994686+08:00] Running modprobe bridge br_netfilter failed with message: modprobe: ERROR: could not insert &#x27;bridge&#x27;: Key was rejected by service</span><br><span class="line">modprobe: ERROR: could not insert &#x27;br_netfilter&#x27;: Key was rejected by service</span><br><span class="line">insmod /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko </span><br><span class="line">insmod /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko </span><br><span class="line">, error: exit status 1 </span><br><span class="line">Error starting daemon: Error initializing network controller: Error creating default &quot;bridge&quot; network: package not installed</span><br></pre></td></tr></table></figure><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><h3 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ dockerd --version</span><br><span class="line">Docker version 18.09.3, build 774a1f4</span><br><span class="line">$ uname -a </span><br><span class="line">Linux db1 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">$ cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br></pre></td></tr></table></figure><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p>先看下是不是把内核模块禁止了，发现没禁止，手动加载也报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ grep -r black /etc/modprobe.d/*.conf</span><br><span class="line">$ modprobe overlay</span><br><span class="line">$ modprobe bridge</span><br><span class="line">modprobe: ERROR: could not insert &#x27;bridge&#x27;: Key was rejected by service</span><br></pre></td></tr></table></figure><p>查看下也没开启 <code>enforcemodulesig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dmesg | grep enforcemodulesig=1</span><br><span class="line">$ cat /proc/cmdline </span><br><span class="line">BOOT_IMAGE=/vmlinuz-3.10.0-514.el7.x86_64 root=UUID=5ab681a0-7e5c-4ab7-9c88-27d788f725b3 ro crashkernel=auto rhgb quiet LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>但是能查看到内核模块信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ modinfo bridge</span><br><span class="line">filename:       /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br><span class="line">alias:          rtnl-link-bridge</span><br><span class="line">version:        2.3</span><br><span class="line">license:        GPL</span><br><span class="line">rhelversion:    7.3</span><br><span class="line">srcversion:     FF0448CD85C271287DE1963</span><br><span class="line">depends:        stp,llc</span><br><span class="line">intree:         Y</span><br><span class="line">vermagic:       3.10.0-514.el7.x86_64 SMP mod_unload modversions </span><br><span class="line">signer:         CentOS Linux kernel signing key</span><br><span class="line">sig_key:        D4:88:63:A7:C1:6F:CC:27:41:23:E6:29:8F:74:F0:57:AF:19:FC:54</span><br><span class="line">sig_hashalgo:   sha256</span><br></pre></td></tr></table></figure><p>感觉是内核签名对不上，查看下模块哈希</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br><span class="line">62001928100a30bace9bc6493b956e2f  /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br></pre></td></tr></table></figure><p>找了另一台机器对比下，发现模块损坏了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux db2 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">$ modinfo bridge</span><br><span class="line">filename:       /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br><span class="line">alias:          rtnl-link-bridge</span><br><span class="line">version:        2.3</span><br><span class="line">license:        GPL</span><br><span class="line">rhelversion:    7.3</span><br><span class="line">srcversion:     FF0448CD85C271287DE1963</span><br><span class="line">depends:        stp,llc</span><br><span class="line">intree:         Y</span><br><span class="line">vermagic:       3.10.0-514.el7.x86_64 SMP mod_unload modversions </span><br><span class="line">signer:         CentOS Linux kernel signing key</span><br><span class="line">sig_key:        D4:88:63:A7:C1:6F:CC:27:41:23:E6:29:8F:74:F0:57:AF:19:FC:54</span><br><span class="line">sig_hashalgo:   sha256</span><br><span class="line">$ md5sum /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br><span class="line">41c62afa67e66d107cc2a9e471910726  /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko</span><br></pre></td></tr></table></figure><p>修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/</span><br><span class="line">cp bridge.ko bridge.ko.bak</span><br><span class="line">scp root@xxxx:/lib/modules/3.10.0-514.el7.x86_64/kernel/net/bridge/bridge.ko .</span><br></pre></td></tr></table></figure><p>然后能启动了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.oracle.com/technical-resources/articles/linux/signed-kernel-modules.html">https://www.oracle.com/technical-resources/articles/linux/signed-kernel-modules.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;客户现场的数据盘损坏了，修复启动机器后 docker 无法启动&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext</summary>
      
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>1.15 kubelet 在 nodefs 容量富裕下循环 reclaim ephemeral-storage</title>
    <link href="http://zhangguanzhang.github.io/2021/10/29/kubelet-ephemeral-storage-loop-evicted/"/>
    <id>http://zhangguanzhang.github.io/2021/10/29/kubelet-ephemeral-storage-loop-evicted/</id>
    <published>2021-10-29T14:08:06.000Z</published>
    <updated>2021-10-29T14:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><p>现场 k8s node 很多 pod 都被硬性驱逐显示 <code>Evicted</code> ，现场人员查看分区容量和 inode 都正常，但是一直 <code>reclaim ephemeral-storage</code>。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux xxx-2 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">$ cat /etc/os-release</span><br><span class="line">CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">$ kubectl version -o json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;clientVersion&quot;: &#123;</span><br><span class="line">    &quot;major&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;minor&quot;: &quot;15&quot;,</span><br><span class="line">    &quot;gitVersion&quot;: &quot;v1.15.5&quot;,</span><br><span class="line">    &quot;gitCommit&quot;: &quot;20c265fef0741dd71a66480e35bd69f18351daea&quot;,</span><br><span class="line">    &quot;gitTreeState&quot;: &quot;clean&quot;,</span><br><span class="line">    &quot;buildDate&quot;: &quot;2019-10-15T19:16:51Z&quot;,</span><br><span class="line">    &quot;goVersion&quot;: &quot;go1.12.10&quot;,</span><br><span class="line">    &quot;compiler&quot;: &quot;gc&quot;,</span><br><span class="line">    &quot;platform&quot;: &quot;linux/amd64&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;serverVersion&quot;: &#123;</span><br><span class="line">    &quot;major&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;minor&quot;: &quot;15&quot;,</span><br><span class="line">    &quot;gitVersion&quot;: &quot;v1.15.5&quot;,</span><br><span class="line">    &quot;gitCommit&quot;: &quot;20c265fef0741dd71a66480e35bd69f18351daea&quot;,</span><br><span class="line">    &quot;gitTreeState&quot;: &quot;clean&quot;,</span><br><span class="line">    &quot;buildDate&quot;: &quot;2019-10-15T19:07:57Z&quot;,</span><br><span class="line">    &quot;goVersion&quot;: &quot;go1.12.10&quot;,</span><br><span class="line">    &quot;compiler&quot;: &quot;gc&quot;,</span><br><span class="line">    &quot;platform&quot;: &quot;linux/amd64&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ docker info</span><br><span class="line">Containers: 5</span><br><span class="line"> Running: 4</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 1</span><br><span class="line">Images: 40</span><br><span class="line">Server Version: 18.09.3</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: xfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: local</span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: e6b3f5632f50dbc4e9cb6288d911bf4f5e95b18e</span><br><span class="line">runc version: 6635b4f0c6af3810594d2770f662f34ddc15b40d</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 3.10.0-693.el7.x86_64</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPUs: 32</span><br><span class="line">Total Memory: 62.91GiB</span><br><span class="line">Name: SCJY-2</span><br><span class="line">ID: XZ33:PHUQ:U2CI:7PXH:SYFG:Y6LK:3K3U:XXM6:QJWP:U3B3:MW4M:XPJS</span><br><span class="line">Docker Root Dir: /data/kube/docker</span><br><span class="line">Debug Mode (client): false</span><br><span class="line">Debug Mode (server): false</span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: false</span><br><span class="line">Insecure Registries:</span><br><span class="line"> reg.xxx.lan:5000</span><br><span class="line"> treg.yun.xxx.cn</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br><span class="line"> https://docker.mirrors.ustc.edu.cn/</span><br><span class="line">Live Restore Enabled: false</span><br><span class="line">Product License: Community Engine</span><br></pre></td></tr></table></figure><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>向日葵远程上去看了下，根分区容量都是正常的，inode 也是。看了下 <code>uptime -s</code> 重启过，现场说重启过还是没用。重启 kubelet 的话，看了下还是一直 <code>reclaim ephemeral-storage</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -h</span><br><span class="line">Filesystem                 Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/rootvg-lvroot   30G  5.2G   25G  18% /</span><br><span class="line">devtmpfs                    32G     0   32G   0% /dev</span><br><span class="line">tmpfs                       32G  160K   32G   1% /dev/shm</span><br><span class="line">tmpfs                       32G   26M   32G   1% /run</span><br><span class="line">tmpfs                       32G     0   32G   0% /sys/fs/cgroup</span><br><span class="line">/dev/sdb                   600G   36G  565G   6% /data</span><br><span class="line">/dev/sda1                 1014M  160M  855M  16% /boot</span><br><span class="line">/dev/mapper/rootvg-lvopt    10G   33M   10G   1% /opt</span><br><span class="line">/dev/mapper/rootvg-lvhome 1014M   39M  976M   4% /home</span><br><span class="line">/dev/mapper/rootvg-lvvar   2.0G  1.2G  888M  57% /var</span><br><span class="line">overlay                    600G   36G  565G   6% /data/kube/docker/overlay2/788ee4620da0a3f76ef5f4b24755a68de0e66c8f2425d8332d5a792116d7659f/merged</span><br><span class="line">overlay                    600G   36G  565G   6% /data/kube/docker/overlay2/d2b5f08e9873f5c9365aaf57eeca492734631a3842ccb2f379aa89998b0c7304/merged</span><br><span class="line">overlay                    600G   36G  565G   6% /data/kube/docker/overlay2/c4793b6c3f774cc960ef23e18b61405040698be698306ee993d4d501bdcf485a/merged</span><br><span class="line">overlay                    600G   36G  565G   6% /data/kube/docker/overlay2/b5a0fc544935db77c92bd978db9c1c7018e5e09bba9d2bf53bd300e96c656cec/merged</span><br><span class="line">shm                         64M     0   64M   0% /data/kube/docker/containers/ad86ab9b01e1ce0d62e1f98249274d9bfe75eca6efd8ce0e8f1c591d5570d75f/mounts/shm</span><br><span class="line">shm                         64M     0   64M   0% /data/kube/docker/containers/e3ebeac9a82264869429f44ea6834bcbc94b79013621490c071ef002b4b8e90e/mounts/shm</span><br><span class="line">shm                         64M     0   64M   0% /data/kube/docker/containers/a917bd3b8006198a58900efb5c82c6e162cfc4e732c7e588eaadfb59294ea22b/mounts/shm</span><br><span class="line">shm                         64M     0   64M   0% /data/kube/docker/containers/aa52df1894ad495f4f269d77ddd90954fdc7bbd0fbf25d9d4aa0674a76ff6a6c/mounts/shm</span><br><span class="line">tmpfs                      6.3G   12K  6.3G   1% /run/user/42</span><br><span class="line">tmpfs                      6.3G     0  6.3G   0% /run/user/1003</span><br><span class="line">tmpfs                      6.3G     0  6.3G   0% /run/user/1000</span><br><span class="line"></span><br><span class="line">$ dh -i</span><br><span class="line">Filesystem                   Inodes  IUsed     IFree IUse% Mounted on</span><br><span class="line">/dev/mapper/rootvg-lvroot  15726592 184878  15541714    2% /</span><br><span class="line">devtmpfs                    8242230    527   8241703    1% /dev</span><br><span class="line">tmpfs                       8246150     41   8246109    1% /dev/shm</span><br><span class="line">tmpfs                       8246150    735   8245415    1% /run</span><br><span class="line">tmpfs                       8246150     16   8246134    1% /sys/fs/cgroup</span><br><span class="line">/dev/sdb                  314572800 303816 314268984    1% /data</span><br><span class="line">/dev/sda1                    524288    327    523961    1% /boot</span><br><span class="line">/dev/mapper/rootvg-lvopt    5242880      7   5242873    1% /opt</span><br><span class="line">/dev/mapper/rootvg-lvhome    524288    397    523891    1% /home</span><br><span class="line">/dev/mapper/rootvg-lvvar    1048576  10179   1038397    1% /var</span><br><span class="line">overlay                   314572800 303816 314268984    1% /data/kube/docker/overlay2/788ee4620da0a3f76ef5f4b24755a68de0e66c8f2425d8332d5a792116d7659f/merged</span><br><span class="line">overlay                   314572800 303816 314268984    1% /data/kube/docker/overlay2/d2b5f08e9873f5c9365aaf57eeca492734631a3842ccb2f379aa89998b0c7304/merged</span><br><span class="line">overlay                   314572800 303816 314268984    1% /data/kube/docker/overlay2/c4793b6c3f774cc960ef23e18b61405040698be698306ee993d4d501bdcf485a/merged</span><br><span class="line">overlay                   314572800 303816 314268984    1% /data/kube/docker/overlay2/b5a0fc544935db77c92bd978db9c1c7018e5e09bba9d2bf53bd300e96c656cec/merged</span><br><span class="line">shm                         8246150      1   8246149    1% /data/kube/docker/containers/ad86ab9b01e1ce0d62e1f98249274d9bfe75eca6efd8ce0e8f1c591d5570d75f/mounts/shm</span><br><span class="line">shm                         8246150      1   8246149    1% /data/kube/docker/containers/e3ebeac9a82264869429f44ea6834bcbc94b79013621490c071ef002b4b8e90e/mounts/shm</span><br><span class="line">shm                         8246150      1   8246149    1% /data/kube/docker/containers/a917bd3b8006198a58900efb5c82c6e162cfc4e732c7e588eaadfb59294ea22b/mounts/shm</span><br><span class="line">shm                         8246150      1   8246149    1% /data/kube/docker/containers/aa52df1894ad495f4f269d77ddd90954fdc7bbd0fbf25d9d4aa0674a76ff6a6c/mounts/shm</span><br><span class="line">tmpfs                       8246150      9   8246141    1% /run/user/42</span><br><span class="line">tmpfs                       8246150      1   8246149    1% /run/user/1003</span><br><span class="line">tmpfs                       8246150      1   8246149    1% /run/user/1000</span><br><span class="line"></span><br><span class="line">$ kubectl describe node xx.xx.112.135</span><br><span class="line">...</span><br><span class="line">Capacity:</span><br><span class="line"> cpu:                32</span><br><span class="line"> ephemeral-storage:  2038Mi</span><br><span class="line"> hugepages-2Mi:      0</span><br><span class="line"> memory:             65969200Ki</span><br><span class="line"> pods:               110</span><br><span class="line">Allocatable:</span><br><span class="line"> cpu:                31800m</span><br><span class="line"> ephemeral-storage:  1014Mi</span><br><span class="line"> hugepages-2Mi:      0</span><br><span class="line"> memory:             65469200Ki</span><br><span class="line"> pods:               110</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason                   Age                      From                    Message</span><br><span class="line">  ----     ------                   ----                     ----                    -------</span><br><span class="line">  Warning  EvictionThresholdMet     3m57s (x1434 over 4h3m)  kubelet, xx.xx.112.135  Attempting to reclaim ephemeral-storage</span><br><span class="line">  Normal   Starting                 37s                      kubelet, xx.xx.112.135  Starting kubelet.</span><br><span class="line">  Normal   NodeHasSufficientMemory  37s                      kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeHasSufficientMemory</span><br><span class="line">  Normal   NodeHasNoDiskPressure    37s (x2 over 37s)        kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeHasNoDiskPressure</span><br><span class="line">  Normal   NodeHasSufficientPID     37s                      kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeHasSufficientPID</span><br><span class="line">  Normal   NodeNotReady             37s                      kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeNotReady</span><br><span class="line">  Normal   NodeAllocatableEnforced  37s                      kubelet, xx.xx.112.135  Updated Node Allocatable <span class="built_in">limit</span> across pods</span><br><span class="line">  Normal   NodeReady                37s                      kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeReady</span><br><span class="line">  Normal   NodeHasDiskPressure      27s                      kubelet, xx.xx.112.135  Node xx.xx.112.135 status is now: NodeHasDiskPressure</span><br><span class="line">  Warning  EvictionThresholdMet     7s (x4 over 37s)         kubelet, xx.xx.112.135  Attempting to reclaim ephemeral-storage</span><br></pre></td></tr></table></figure><p>看了一会儿后发现上面的 <code>ephemeral-storage</code> 不对，<code>Capacity</code> 居然是 <code>2038Mi</code> 。</p><h3 id="源码的一些探索"><a href="#源码的一些探索" class="headerlink" title="源码的一些探索"></a>源码的一些探索</h3><p>本地开发环境起了下 kubelet 调试了下，一些信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">./build/run.sh make kubelet GOFLAGS=&quot;-v -tags=nokmem&quot; GOGCFLAGS=&quot;all=-N -l&quot;  KUBE_BUILD_PLATFORMS=linux/amd64</span><br><span class="line"></span><br><span class="line">cp  _output/dockerized/bin/linux/amd64/kubelet .</span><br><span class="line"></span><br><span class="line">dlv exec --check-go-version=false ./kubelet  -- --cgroup-driver=systemd</span><br><span class="line"></span><br><span class="line"># 推荐下面两个断点</span><br><span class="line">vendor/github.com/google/cadvisor/container/docker/handler.go#L421</span><br><span class="line"></span><br><span class="line">vendor/github.com/google/cadvisor/container/docker/handler.go:364</span><br><span class="line"></span><br><span class="line">   724:func (self *manager) GetFsInfo(label string) ([]v2.FsInfo, error) &#123;</span><br><span class="line">=&gt; 725:var empty time.Time</span><br><span class="line">   726:// Get latest data from filesystems hanging off root container.</span><br><span class="line">   727:stats, err := self.memoryCache.RecentStats(&quot;/&quot;, empty, empty, 1)</span><br><span class="line">   728:if err != nil &#123;</span><br><span class="line">   729:return nil, err</span><br><span class="line">   730:&#125;</span><br><span class="line">(dlv) so</span><br><span class="line">&gt; k8s.io/kubernetes/vendor/github.com/google/cadvisor/manager.(*manager).getFsInfoByDeviceName() _output/dockerized/go/src/k8s.io/kubernetes/vendor/github.com/google/cadvisor/manager/manager.go:1311 (PC: 0x1fc7180)</span><br><span class="line">Values returned:</span><br><span class="line">~r1: []k8s.io/kubernetes/vendor/github.com/google/cadvisor/info/v2.FsInfo len: 2, cap: 2, [</span><br><span class="line">&#123;</span><br><span class="line">Timestamp: (*time.Time)(0xc0002262d0),</span><br><span class="line">Device: &quot;/dev/sda1&quot;,</span><br><span class="line">Mountpoint: &quot;/&quot;,</span><br><span class="line">Capacity: 75150372864,</span><br><span class="line">Available: 36613033984,</span><br><span class="line">Usage: 38537338880,</span><br><span class="line">Labels: []string len: 2, cap: 2, [</span><br><span class="line">&quot;docker-images&quot;,</span><br><span class="line">&quot;root&quot;,</span><br><span class="line">],</span><br><span class="line">Inodes: *36699584,</span><br><span class="line">InodesFree: *35850609,&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Timestamp: (*time.Time)(0xc000226348),</span><br><span class="line">Device: &quot;tmpfs&quot;,</span><br><span class="line">Mountpoint: &quot;/dev/shm&quot;,</span><br><span class="line">Capacity: 1986203648,</span><br><span class="line">Available: 1986203648,</span><br><span class="line">Usage: 0,</span><br><span class="line">Labels: []string len: 0, cap: 0, [],</span><br><span class="line">Inodes: *484913,</span><br><span class="line">InodesFree: *484912,&#125;,</span><br><span class="line">]</span><br><span class="line">~r2: error nil</span><br></pre></td></tr></table></figure><p>容量这部分我现场通过特性 <code>--feature-gates=LocalStorageCapacityIsolation=false</code> 后删掉 node restart 后 describe 看不到 <code>ephemeral-storage</code> 了，但是还是问题还在，看了下源码，这个容量大小是 <code>vendor/github.com/google/cadvisor/container/docker</code> 下从 docker 获取的，嵌套的 interface 太多了，查看麻烦。现场是已经重启过机器了，docker 我重启和查看日志也没啥有用的地方。</p><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p><code>ephemeral-storage</code> 这个 limit 是 1.15 alpha 的，暂时不想折腾了。 尝试换下 kubelet 的 root 目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl cat kubelet</span><br><span class="line"># /etc/systemd/system/kubelet.service</span><br><span class="line">[Unit]</span><br><span class="line">...</span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/lib/kubelet</span><br><span class="line">ExecStart=/data/kube/bin/kubelet \</span><br><span class="line">  ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要修改 <code>WorkingDirectory</code> 和给 kubelet 增加参数 <code>--root-dir</code> 以及 <code>--docker-root</code> ，现场 <code>/data</code> 是单独分区的，切到 <code>/data/kube/kubelet</code> 下，<code>--docker-root</code> 则是 docker 的 <code>data-root</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/systemd/system/kubelet.service</span><br><span class="line">...</span><br><span class="line">WorkingDirectory=/data/kube/kubelet</span><br><span class="line">ExecStart=/data/kube/bin/kubelet \</span><br><span class="line">  --root-dir=/data/kube/kubelet \</span><br><span class="line">  --docker-root=/data/kube/docker \</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><p>问题解决。后面才发现 &#x2F;var 是单独分区的，客户现场动过分区表，之前是 &#x2F;var 没有单独分区，后面他们创建了个 lv 并写在 &#x2F;etc&#x2F;fstab 里，并没有挂载和重启。一周前他们重启了下，而且有一些服务在 &#x2F;var&#x2F;log 输出日志，所以造成了这次故障。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/google/cadvisor/manager/manager.go#L724">https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/google/cadvisor/manager/manager.go#L724</a></li><li><a href="https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/google/cadvisor/container/libcontainer/handler.go">https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/google/cadvisor/container/libcontainer/handler.go</a></li><li><a href="https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/docker/docker/pkg/mount/mountinfo_linux.go">https://github.com/kubernetes/kubernetes/tree/v1.15.5/vendor/github.com/docker/docker/pkg/mount/mountinfo_linux.go</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;故障&quot;&gt;&lt;a href=&quot;#故障&quot; class=&quot;headerlink&quot; title=&quot;故障&quot;&gt;&lt;/a&gt;故障&lt;/h2&gt;&lt;p&gt;现场 k8s node 很多 pod 都被硬性驱逐显示 &lt;code&gt;Evicted&lt;/code&gt; ，现场人员查看分区容量和 inode 都正</summary>
      
    
    
    
    
    <category term="kubelet" scheme="http://zhangguanzhang.github.io/tags/kubelet/"/>
    
  </entry>
  
  <entry>
    <title>在非容器环境上实现散装的 IPVS SVC</title>
    <link href="http://zhangguanzhang.github.io/2021/09/28/ipvs-svc/"/>
    <id>http://zhangguanzhang.github.io/2021/09/28/ipvs-svc/</id>
    <published>2021-09-28T19:28:30.000Z</published>
    <updated>2021-09-28T19:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>内部有非 K8S 环境上需要类似 SVC 的负载实现，一开始是用 NGINX 做的，所有 SVC 域名都解析成一个 dummy IP ，然后 NGINX 根据 <code>server_name</code> 去 proxy 不同的 upstream 。 开始还是能用的，结果后面很多服务依赖 <code>host</code> 这个 header ，报错签名错误，而且毕竟这样是在用户态，效率不如内核态高。于是打算搞下之前的打算：把 IPVS 的 <code>ClusterIP</code> 的 SVC 扣到非 K8S 环境上使用。</p><p>kube-proxy 的 SVC 简单讲就是 node 上任何进程访问 <code>SVC IP:SVC PORT</code> 会被 dnat 成 <code>endpoint</code> ，是工作在内核态的四层负载，不会在机器上看到端口监听，而默认非集群的机器是无法访问 SVC IP 。在 K8S 里，endpoint 的 ip 无非就是 <code>POD IP</code>，<code>host IP</code>。前者就是 SVC 选中 POD ，后者例如 <code>kubernetes</code> 这个 SVC ，会 DNAT 成每个 <code>kube-apiserver</code> 的 <code>host IP:6443</code> 端口，也可能是 <code>ExternalName</code> 或者手动创建的 endpoint 。既然 <code>kubernetes</code> 这个 SVC 可以。那我的打算应该也是可以实现的。但是一开始实际按照思路试了下发现不行，网上的文章基本都是在单机 docker 或者现有的 K8S 环境上搞的，漏掉了很多精华和核心思想，这里记录下我的思路和实现过程。</p><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><p>前面说的 SVC 现象是和 <code>kube-proxy</code> 的模式无关的。<code>iptables</code> 模式排查不直观，我更倾向于 <code>IPVS</code> 去搞，它更直观，而且支持更多的调度算法。管理 IPVS 规则的话我们需要安装 <code>ipvsadm</code> ，这里我是两台干净的 CentOS 7.8 来做环境。</p><table><thead><tr><th align="left">IP</th></tr></thead><tbody><tr><td align="left">192.168.2.111</td></tr><tr><td align="left">192.168.2.222</td></tr></tbody></table><p>先安装下基础需要的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ipvsadm curl wget tcpdump ipset conntrack-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启转发</span></span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认 iptables 规则清空</span></span><br><span class="line">$ iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">$ iptables -t nat -S</span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-P POSTROUTING ACCEPT</span><br></pre></td></tr></table></figure><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>先思考下 kube-proxy 的 IPVS ，因为 SVC 端口和 POD 的端口不一样，所以 kube-proxy 使用的 <code>nat</code> 模式。暂且打算添加一个下面类似的 SVC ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IP:                169.254.11.2</span><br><span class="line">Port:              https  80/TCP</span><br><span class="line">TargetPort:        8080/TCP</span><br><span class="line">Endpoints:         192.168.2.111:8080,192.168.2.222:8080</span><br><span class="line">Session Affinity:  None</span><br></pre></td></tr></table></figure><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>web 的话我是使用的 golang 的一个简单 web 二进制起的 <a href="https://github.com/m3ng9i/ran">ran</a> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/m3ng9i/ran/releases/download/v0.1.6/ran_linux_amd64.zip</span><br><span class="line">unzip -x ran_linux_amd64.zip</span><br><span class="line"><span class="built_in">mkdir</span> www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个机器创建不同的 index 文件</span></span><br><span class="line"><span class="built_in">echo</span> 192.168.2.111 &gt; www/test</span><br><span class="line"><span class="built_in">echo</span> 192.168.2.222 &gt; www/test</span><br><span class="line"></span><br><span class="line">./ran_linux_amd64 -port 8080 -listdir www</span><br></pre></td></tr></table></figure><p>两个机器的这个 web 都起来后我们开个窗口去 <code>192.168.2.111</code> 上继续后面的操作。</p><h3 id="lvs-nat"><a href="#lvs-nat" class="headerlink" title="lvs nat"></a>lvs nat</h3><p>kube-proxy 并没有像 lvs nat 那样有单独的机器做 <code>NAT GW</code>，或者认为每个 node 都是自己的 <code>NAT GW</code>。现在来添加 <code>169.254.11.2:80</code> 这个 SVC ，使用 ipvsadm 添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm --add-service --tcp-service 169.254.11.2:80 --scheduler rr</span><br></pre></td></tr></table></figure><p>先添加本地的 web 作为 real server ，下面含义是添加为一个 nat 类型的 real server ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm --add-server --tcp-service 169.254.11.2:80 \</span><br><span class="line">  --real-server 192.168.2.111:8080 --masquerading --weight 1</span><br></pre></td></tr></table></figure><p>查看下当前列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ipvsadm -<span class="built_in">ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  169.254.11.2:80 rr</span><br><span class="line">  -&gt; 192.168.2.111:8080           Masq    1      0          0 </span><br></pre></td></tr></table></figure><p>因为是自己的 <code>NAT GW</code>，所以 VIP 配置在自己身上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr add 169.254.11.2/32 dev eth0</span><br></pre></td></tr></table></figure><p>测试下访问看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br></pre></td></tr></table></figure><p>添加上另一个节点的 8080：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ipvsadm --add-server --tcp-service 169.254.11.2:80 \</span><br><span class="line">  --real-server 192.168.2.222:8080 --masquerading --weight 1</span><br><span class="line"></span><br><span class="line">$ ipvsadm -<span class="built_in">ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  169.254.11.2:80 rr</span><br><span class="line">  -&gt; 192.168.2.111:8080           Masq    1      0          0         </span><br><span class="line">  -&gt; 192.168.2.222:8080           Masq    1      0          0</span><br></pre></td></tr></table></figure><p>测试下访问看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现 curl 在卡住和能访问返回 <code>192.168.2.111</code> 之间切换，没有返回 <code>192.168.2.222</code> 的。查看下 IPVS 的 connection ，发现调度到非本机才会卡住：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ipvsadm -lnc</span><br><span class="line">IPVS connection entries</span><br><span class="line">pro expire state       <span class="built_in">source</span>             virtual            destination</span><br><span class="line">TCP 00:48  SYN_RECV    169.254.11.2:50698 169.254.11.2:80    192.168.2.222:8080</span><br></pre></td></tr></table></figure><p>在 <code>192.168.2.222</code> 上抓包看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn -i eth0 port 8080</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">07:38:26.360716 IP 169.254.11.2.50710 &gt; 192.168.2.222.8080: Flags [S], <span class="built_in">seq</span> 768065283, win 43690, options [mss 65495,sackOK,TS val 12276183 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:38:26.360762 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676518144 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:27.362848 IP 169.254.11.2.50710 &gt; 192.168.2.222.8080: Flags [S], <span class="built_in">seq</span> 768065283, win 43690, options [mss 65495,sackOK,TS val 12277186 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:38:27.362884 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676519146 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:28.562629 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676520346 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:29.368811 IP 169.254.11.2.50710 &gt; 192.168.2.222.8080: Flags [S], <span class="built_in">seq</span> 768065283, win 43690, options [mss 65495,sackOK,TS val 12279192 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:38:29.368853 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676521152 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:31.562633 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676523346 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:33.376829 IP 169.254.11.2.50710 &gt; 192.168.2.222.8080: Flags [S], <span class="built_in">seq</span> 768065283, win 43690, options [mss 65495,sackOK,TS val 12283200 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:38:33.376869 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676525160 ecr 12276183,nop,wscale 7], length 0</span><br><span class="line">07:38:37.562632 IP 192.168.2.222.8080 &gt; 169.254.11.2.50710: Flags [S.], <span class="built_in">seq</span> 2142784980, ack 768065284, win 28960, options [mss 1460,sackOK,TS val 676529346 ecr 12276183,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><p>从 <code>Flags</code> 看，就是 tcp 重传，并且 <code>SRC IP</code> 是 VIP 。节点 <code>192.168.2.222.8080</code> 给 <code>169.254.11.2.50710</code> 回包会走到网关上去。网关上抓包也看到确实如此：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -nn -i eth0 host 169.254.11.2</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">19:39:47.487362 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676599263 ecr 12357303,nop,wscale 7], length 0</span><br><span class="line">19:39:47.487405 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676599263 ecr 12357303,nop,wscale 7], length 0</span><br><span class="line">19:39:48.487838 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676600264 ecr 12357303,nop,wscale 7], length 0</span><br><span class="line">19:39:48.487868 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676600264 ecr 12357303,nop,wscale 7], length 0</span><br><span class="line">19:39:49.569667 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676601346 ecr 12357303,nop,wscale 7], length 0</span><br><span class="line">19:39:49.569699 IP 192.168.2.222.8080 &gt; 169.254.11.2.50714: Flags [S.], <span class="built_in">seq</span> 4149799699, ack 251479303, win 28960, options [mss 1460,sackOK,TS val 676601346 ecr 12357303,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><h4 id="lvs-和-netfilter"><a href="#lvs-和-netfilter" class="headerlink" title="lvs 和 netfilter"></a>lvs 和 netfilter</h4><p>在介绍 lvs 的实现之前，我们需要了解 netfilter ，Linux 的所有数据包都会经过它，而我们使用的 iptables 是用户态提供的操作工具之一。Linux 内核处理进出的数据包分为了 5 个阶段。netfilter 在这 5 个阶段提供了 hook 点，来让注册的 hook 函数来实现对包的过滤和修改。下图的 local process 就是上层的协议栈。</p><p>下面是 IPVS 在 netfilter 里的模型图，IPVS 也是基于 netfilter 框架的，但只工作在 <code>INPUT</code> 链上，通过注册 <code>ip_vs_in</code> 钩子函数来处理请求。因为 VIP 我们配置在机器上（常规的 lvs nat 的 VIP 是在 NAT GW 上，我们这里是自己），我们 curl 的时候就会进到 <code>INPUT</code> 链，<code>ip_vs_in</code> 会匹配然后直接跳转触发 <code>POSTROUTING</code> 链，跳过 iptables 规则。</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/picgo/lvs-netfilter.png" alt="lvs-netfilter"></p><p>所以请求流程是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># CIP: client IP    # RIP: real server IP</span><br><span class="line"></span><br><span class="line">CLIENT</span><br><span class="line">   | CIP:CPORT -&gt; VIP:VPORT</span><br><span class="line">   |||</span><br><span class="line">   |\/</span><br><span class="line">       | CIP:CPORT -&gt; VIP:VPORT</span><br><span class="line">   LVS DNAT</span><br><span class="line">      | CIP:CPORT -&gt; RIP:RPORT</span><br><span class="line">      |||</span><br><span class="line">   |\/</span><br><span class="line">   | CIP:CPORT -&gt; RIP:RPORT</span><br><span class="line">   +</span><br><span class="line">REAL SERVER</span><br></pre></td></tr></table></figure><p>lvs 做了 DNAT 并没有做 SNAT ，所以我们利用 iptables 做 SNAT ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -m ipvs --vaddr 169.254.11.2 --vport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>访问看看还是不通，抓包看还是没生效，nat 是依赖 <code>conntrack</code> 的，而 IPVS 默认不会记录 conntrack，我们需要开启 IPVS 的 conntrack 才可以让 MASQUERADE 生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让 Netfilter 的 conntrack 状态管理功能也能应用于 IPVS 模块</span></span><br><span class="line">$ <span class="built_in">echo</span> 1 &gt;  /proc/sys/net/ipv4/vs/conntrack</span><br><span class="line">$  curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.222</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.222</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.222</span><br></pre></td></tr></table></figure><p>现在实现了单个 SVC 的，但是仔细思考下还是有问题，如果后续增加另一个 SVC 又得增加一个 iptables 规则了，那就又回到 iptables 的匹配复杂度耗时长上去了。所以我们可以利用 iptables 的 mark 和 ipset 配合减少 iptables 规则。</p><h3 id="利用-ipset-和-iptable-的-mark"><a href="#利用-ipset-和-iptable-的-mark" class="headerlink" title="利用 ipset 和 iptable 的 mark"></a>利用 ipset 和 iptable 的 mark</h3><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/picgo/iptables_netfilter.png" alt="iptables_netfilter"></p><p>iptables 的五链四表如上图所示，我们先删掉原有的规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -D POSTROUTING -m ipvs --vaddr 169.254.11.2 --vport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>平时自己家里使用了 openwrt ，之前看了下上面的 iptables 规则设计挺好的，特别是预留了很多链专门给用户在合适的位置插入规则，比如下面的 <code>INPUT</code> 规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -i eth0 -m comment --comment <span class="string">&quot;!fw3&quot;</span> -j zone_lan_input</span><br><span class="line">...</span><br><span class="line">-A zone_lan_input -m comment --comment <span class="string">&quot;!fw3: Custom lan input rule chain&quot;</span> -j input_lan_rule</span><br><span class="line">-A zone_lan_input -m conntrack --ctstate DNAT -m comment --comment <span class="string">&quot;!fw3: Accept port redirections&quot;</span> -j ACCEPT</span><br><span class="line">-A zone_lan_input -m comment --comment <span class="string">&quot;!fw3&quot;</span> -j zone_lan_src_ACCEPT</span><br></pre></td></tr></table></figure><p><code>zone_lan_src_ACCEPT</code> 是最后面，<code>zone_lan_input</code> 是最开始，那用户向 <code>input_lan_rule</code> 链里插入规则即可，利用多个链来设计也方便别人。<br>规则设计我们先逆着来思考下，最后肯定是 <code>MASQUERADE</code> 的，得在 nat 表的 <code>POSTROUTING</code> 链创建 <code>MASQUERADE</code> 的规则。</p><p>但是添加之前先思考下，lvs 做了 DNAT 后，最后包走向了 <code>POSTROUTING</code> 链，而且后面我们是有多个 SVC 的。此刻包的 <code>SRC IP</code> 会是 <code>VIP</code>，见上面抓包的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 假设没做 masq 的时候(刚好调度到非本地的 real server 上</span><br><span class="line">#也就是上面之前不通在目标机器上抓包)包的阶段</span><br><span class="line"></span><br><span class="line">SRC:169.254.11.2:xxxx</span><br><span class="line">DST:169.254.11.2:80</span><br><span class="line">      ||</span><br><span class="line">      || 没经过 POSTROUTING masq snat 的时候</span><br><span class="line">      \/</span><br><span class="line">SRC:169.254.11.2:xxxx</span><br><span class="line">DST:192.168.2.222:80</span><br></pre></td></tr></table></figure><p>而且后续可能是在 docker 环境上部署，可能默认桥接网络下的容器也会去访问 <code>SVC</code>，此刻的 <code>SRC IP</code> 就不会是网卡上的 <code>VIP</code> 了，所以我们在 PREROUTING 阶段 dest IP,dest Port 是 svc 信息则做 masq snat。<br>可以在此刻利用一个 ipset 存储所有的 <code>SVC_IP:SVC_PORT</code> 匹配，然后打上 mark，然后在 <code>POSTROUTING</code> 链去根据 mark 去做 <code>MASQUERADE</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PREROUTING 阶段处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供一个入口链，而不是直接添加在 PREROUTING 链上</span></span><br><span class="line">iptables -t nat -N ZGZ-SERVICES</span><br><span class="line">iptables -t nat -A PREROUTING -m comment --comment <span class="string">&quot;zgz service portals&quot;</span> -j ZGZ-SERVICES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 PREROUTING 子链里去 ipset 匹配，跳转到我们打 mark 的链</span></span><br><span class="line">iptables -t nat -N ZGZ-MARK-MASQ</span><br><span class="line"><span class="comment"># 创建存储所有 `SVC_IP:SVC_PORT` 的 ipset </span></span><br><span class="line">ipset create ZGZ-CLUSTER-IP <span class="built_in">hash</span>:ip,port -exist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 专门 mark 的链</span></span><br><span class="line">iptables -t nat -A ZGZ-MARK-MASQ -j MARK --set-xmark 0x2000/0x2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 svc ip：svc port 的才跳转到打 mark 的链里</span></span><br><span class="line">iptables -t nat -A ZGZ-SERVICES -m comment --comment <span class="string">&quot;zgz service cluster ip + port for masquerade purpose&quot;</span> -m <span class="built_in">set</span> --match-set ZGZ-CLUSTER-IP dst,dst -j ZGZ-MARK-MASQ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># POSTROUTING 阶段处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供一个入口链，而不是直接添加在 POSTROUTING 链上</span></span><br><span class="line">iptables -t nat -N ZGZ-SERVICES-POSTROUTING</span><br><span class="line">iptables -t nat -A POSTROUTING -m comment --comment <span class="string">&quot;zgz postrouting rules&quot;</span> -j ZGZ-SERVICES-POSTROUTING</span><br><span class="line"><span class="comment"># 在 POSTROUTING 阶段，有 mark 标记的就做 snat</span></span><br><span class="line">iptables -t nat -A ZGZ-SERVICES-POSTROUTING -m comment --comment <span class="string">&quot;zgz service traffic requiring SNAT&quot;</span> -m mark --mark 0x2000/0x2000 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>然后添加下 <code>SVC_IP:SVC_PORT</code> 到我们的 ipset 里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipset add ZGZ-CLUSTER-IP 169.254.11.2,tcp:80 -exist</span><br></pre></td></tr></table></figure><p>上面我们创建的 ipset 里 <code>ip,port</code> 和 iptables 里 <code>--match-set</code> 后面的 <code>dst,dst</code> 组合在一起就是 <code>DEST IP</code> 和 <code>DEST PORT</code> 同时匹配，下面是一些举例：</p><table><thead><tr><th align="left">ipset type</th><th align="left">iptables match-set</th><th align="left">Packet fields</th></tr></thead><tbody><tr><td align="left">hash:net,port,net</td><td align="left">src,dst,dst</td><td align="left">src IP CIDR address, dst port, dst IP CIDR address</td></tr><tr><td align="left">hash:net,port,net</td><td align="left">dst,src,src</td><td align="left">dst IP CIDR address, src port, src IP CIDR address</td></tr><tr><td align="left">hash:ip,port,ip</td><td align="left">src,dst,dst</td><td align="left">src IP address, dst port, dst IP address</td></tr><tr><td align="left">hash:ip,port,ip</td><td align="left">dst,src,src</td><td align="left">dst IP address, src port, src ip address</td></tr><tr><td align="left">hash:mac</td><td align="left">src</td><td align="left">src mac address</td></tr><tr><td align="left">hash:mac</td><td align="left">dst</td><td align="left">dst mac address</td></tr><tr><td align="left">hash:ip,mac</td><td align="left">src,src</td><td align="left">src IP address, src mac address</td></tr><tr><td align="left">hash:ip,mac</td><td align="left">dst,dst</td><td align="left">dst IP address, dst mac address</td></tr><tr><td align="left">hash:ip,mac</td><td align="left">dst,src</td><td align="left">dst IP address, src mac address</td></tr></tbody></table><p>然后访问下还是不通，通过两台机器轮询负载均衡的 curl html 返回内容看到了访问不通的时候都是调度到非本机，也就是此刻的 curl 只经过 <code>OUTPUT</code> 链，过 <code>POSTROUTING</code> 的时候并没有 mark 也就不会做 masq ， 调试了下发现确实会走 <code>OUTPUT</code> 链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;kern.warning /var/log/iptables.log&#x27;</span> &gt;&gt; /etc/rsyslog.conf</span><br><span class="line">$ systemctl restart rsyslog</span><br><span class="line">$ iptables -t nat -I OUTPUT -m <span class="built_in">set</span> --match-set ZGZ-CLUSTER-IP dst,dst  -j LOG --log-prefix <span class="string">&#x27;**log-test**&#x27;</span></span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">^C</span><br><span class="line">$ <span class="built_in">cat</span> /var/log/iptables.log</span><br><span class="line">Sep 27 23:17:51 centos7 kernel: **log-test**IN= OUT=lo SRC=169.254.11.2 DST=169.254.11.2 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=44864 DF PROTO=TCP SPT=50794 DPT=80 WINDOW=43690 RES=0x00 SYN URGP=0 </span><br><span class="line">Sep 27 23:17:52 centos7 kernel: **log-test**IN= OUT=lo SRC=169.254.11.2 DST=169.254.11.2 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=2010 DF PROTO=TCP SPT=50796 DPT=80 WINDOW=43690 RES=0x00 SYN URGP=0 </span><br></pre></td></tr></table></figure><p>需要添加下面规则，让它也进下 svc 判断和打 mark：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -m comment --comment <span class="string">&quot;zgz service portals&quot;</span> -j ZGZ-SERVICES</span><br></pre></td></tr></table></figure><h3 id="keepalived-的自动化实现"><a href="#keepalived-的自动化实现" class="headerlink" title="keepalived 的自动化实现"></a>keepalived 的自动化实现</h3><p>到目前为止都是手动挡，而且没健康检查，其实我们可以利用 keepalived 做个自动挡的。</p><h4 id="安装-keepalived-2"><a href="#安装-keepalived-2" class="headerlink" title="安装 keepalived 2"></a>安装 keepalived 2</h4><p>CentOS7 自带的源里 <code>keepalived</code> 版本很低，我们安装下比自带新的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y http://www.nosuchhost.net/~cheese/fedora/packages/epel-7/x86_64/cheese-release-7-1.noarch.rpm</span><br><span class="line">yum install -y keepalived</span><br><span class="line"><span class="comment"># 备份下自带的配置文件</span></span><br><span class="line"><span class="built_in">cp</span> /etc/keepalived/keepalived.conf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-keepalived"><a href="#配置-keepalived" class="headerlink" title="配置 keepalived"></a>配置 keepalived</h4><p>我们需要配置下 keepalived ，修改之前先看下默认相关的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">cat</span> keepalived</span><br><span class="line"><span class="comment"># /usr/lib/systemd/system/keepalived.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=LVS and VRRP High Availability Monitor</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/keepalived</span><br><span class="line">ExecStart=/usr/sbin/keepalived <span class="variable">$KEEPALIVED_OPTIONS</span></span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">$ <span class="built_in">cat</span> /etc/sysconfig/keepalived</span><br><span class="line"><span class="comment"># Options for keepalived. See `keepalived --help&#x27; output and keepalived(8) and</span></span><br><span class="line"><span class="comment"># keepalived.conf(5) man pages for a list of all options. Here are the most</span></span><br><span class="line"><span class="comment"># common ones :</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --vrrp               -P    Only run with VRRP subsystem.</span></span><br><span class="line"><span class="comment"># --check              -C    Only run with Health-checker subsystem.</span></span><br><span class="line"><span class="comment"># --dont-release-vrrp  -V    Dont remove VRRP VIPs &amp; VROUTEs on daemon stop.</span></span><br><span class="line"><span class="comment"># --dont-release-ipvs  -I    Dont remove IPVS topology on daemon stop.</span></span><br><span class="line"><span class="comment"># --dump-conf          -d    Dump the configuration data.</span></span><br><span class="line"><span class="comment"># --log-detail         -D    Detailed log messages.</span></span><br><span class="line"><span class="comment"># --log-facility       -S    0-7 Set local syslog facility (default=LOG_DAEMON)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">KEEPALIVED_OPTIONS=<span class="string">&quot;-D&quot;</span></span><br></pre></td></tr></table></figure><p><code>/etc/sysconfig/keepalived</code> 里修改为下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEEPALIVED_OPTIONS=&quot;-D --log-console --log-detail --use-file=/etc/keepalived/keepalived.conf&quot;</span><br></pre></td></tr></table></figure><p>我们选择在主配置文件里去 include 子配置文件，keepalivd 接收 <code>kill -HUP</code> 信号触发 reload ，后续自动化添加 SVC 的时候添加子配置文件后发送信号即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/keepalived/keepalived.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">! Configuration File for keepalived</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">global_defs &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"># 记住 keepalived 的任何配置文件不能有 x 权限</span></span><br><span class="line"><span class="string">include /etc/keepalived/conf.d/*.conf</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/keepalived/conf.d/</span><br></pre></td></tr></table></figure><p>我们写一个脚本，一个是用来添加一个子配置文件里的相关信息到 ipset 里，另一方面也让它在重启或者启动 keepalived 的时候每次能初始化，先添加 systemd 的部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/lib/systemd/system/keepalived.service.d</span><br><span class="line"><span class="built_in">cat</span> &gt; /usr/lib/systemd/system/keepalived.service.d/10.keepalived.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStartPre=/etc/keepalived/ipvs.sh</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>然后编写脚本 <code>/etc/keepalived/ipvs.sh</code> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">dummy_if=svc</span><br><span class="line">CONF_DIR=/etc/keepalived/conf.d/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ipset_init</span></span>()&#123;</span><br><span class="line">    ipset create ZGZ-CLUSTER-IP <span class="built_in">hash</span>:ip,port -exist</span><br><span class="line">    ipset flush ZGZ-CLUSTER-IP</span><br><span class="line">    <span class="built_in">local</span> f ip port protocol</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> $(find  <span class="variable">$&#123;CONF_DIR&#125;</span> -maxdepth 1 -<span class="built_in">type</span> f -name <span class="string">&#x27;*.conf&#x27;</span>);<span class="keyword">do</span></span><br><span class="line">        awk <span class="string">&#x27;&#123;if($1==&quot;virtual_server&quot;)&#123;printf $2&quot; &quot;$3&quot; &quot;;flag=1;&#125;;if(flag==1 &amp;&amp; $1==&quot;protocol&quot;)&#123;print $2;flag=0&#125;&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> ip port protocol;<span class="keyword">do</span></span><br><span class="line">            <span class="comment"># SVC IP port 插入 ipset 里</span></span><br><span class="line">            ipset add ZGZ-CLUSTER-IP <span class="variable">$&#123;ip&#125;</span>,<span class="variable">$&#123;protocol,,&#125;</span>:<span class="variable">$&#123;port&#125;</span> -exist</span><br><span class="line">            <span class="comment"># 添加 SVC IP 到 dummy 接口上</span></span><br><span class="line">            <span class="keyword">if</span> ! ip r g <span class="variable">$&#123;ip&#125;</span> | grep -qw lo;<span class="keyword">then</span></span><br><span class="line">                ip addr add <span class="variable">$&#123;ip&#125;</span>/32 dev <span class="variable">$&#123;dummy_if&#125;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_Chain_in_nat</span></span>()&#123;</span><br><span class="line">    <span class="comment"># delete use -X</span></span><br><span class="line">    <span class="built_in">local</span> Chain option</span><br><span class="line">    option=<span class="string">&quot;-t nat --wait&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> Chain <span class="keyword">in</span> <span class="variable">$@</span>;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> ! iptables <span class="variable">$option</span> -S | grep -Eq -- <span class="string">&quot;-N\s+<span class="variable">$&#123;Chain&#125;</span>$&quot;</span>;<span class="keyword">then</span></span><br><span class="line">        iptables <span class="variable">$option</span> -N <span class="variable">$&#123;Chain&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_Rule_in_nat</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> cmd=<span class="string">&#x27;iptables -t nat --wait &#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="variable">$&#123;cmd&#125;</span>  --check <span class="string">&quot;<span class="variable">$@</span>&quot;</span> 2&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;cmd&#125;</span> -A <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">iptables_init</span></span>()&#123;</span><br><span class="line">    create_Chain_in_nat ZGZ-SERVICES  ZGZ-SERVICES-POSTROUTING ZGZ-SERVICES-MARK-MASQ</span><br><span class="line"></span><br><span class="line">    create_Rule_in_nat ZGZ-SERVICES-MARK-MASQ -j MARK --set-xmark 0x2000/0x2000</span><br><span class="line"></span><br><span class="line">    create_Rule_in_nat ZGZ-SERVICES -m comment --comment <span class="string">&quot;zgz service cluster ip + port for masquerade purpose&quot;</span> -m <span class="built_in">set</span> --match-set ZGZ-CLUSTER-IP dst,dst -j ZGZ-SERVICES-MARK-MASQ</span><br><span class="line"></span><br><span class="line">    create_Rule_in_nat PREROUTING -m comment --comment <span class="string">&quot;zgz service portals&quot;</span> -j ZGZ-SERVICES</span><br><span class="line">    create_Rule_in_nat OUTPUT -m comment --comment <span class="string">&quot;zgz service portals&quot;</span> -j ZGZ-SERVICES</span><br><span class="line"></span><br><span class="line">    create_Rule_in_nat ZGZ-SERVICES-POSTROUTING -m comment --comment <span class="string">&quot;zgz service traffic requiring SNAT&quot;</span> -m mark --mark 0x2000/0x2000 -j MASQUERADE</span><br><span class="line">    create_Rule_in_nat POSTROUTING -m comment --comment <span class="string">&quot;zgz postrouting rules&quot;</span> -j ZGZ-SERVICES-POSTROUTING</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ipvs_svc_run</span></span>()&#123;</span><br><span class="line">  ip addr flush dev <span class="variable">$&#123;dummy_if&#125;</span></span><br><span class="line">  ipset_init</span><br><span class="line">  iptables_init</span><br><span class="line">  <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/vs/conntrack</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 无参数则是 keepalived 启动，也可以接收单个配置文件参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> [ ! -d /proc/sys/net/ipv4/conf/<span class="variable">$&#123;dummy_if&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">    ip <span class="built_in">link</span> add <span class="variable">$&#123;dummy_if&#125;</span> <span class="built_in">type</span> dummy</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    ipvs_svc_run</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">local</span> file fullFile ip port protocol</span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$@</span>;<span class="keyword">do</span></span><br><span class="line">    fullFile=<span class="variable">$&#123;CONF_DIR&#125;</span>/<span class="variable">$file</span></span><br><span class="line">      awk <span class="string">&#x27;&#123;if($1==&quot;virtual_server&quot;)&#123;printf $2&quot; &quot;$3&quot; &quot;;flag=1;&#125;;if(flag==1 &amp;&amp; $1==&quot;protocol&quot;)&#123;print $2;flag=0&#125;&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> ip port protocol;<span class="keyword">do</span></span><br><span class="line">          <span class="comment"># SVC IP port 插入 ipset 里</span></span><br><span class="line">          ipset add ZGZ-CLUSTER-IP <span class="variable">$&#123;ip&#125;</span>,<span class="variable">$&#123;protocol,,&#125;</span>:<span class="variable">$&#123;port&#125;</span> -exist</span><br><span class="line">          <span class="comment"># 添加 SVC IP 到 dummy 接口上</span></span><br><span class="line">          <span class="keyword">if</span> ! ip r g <span class="variable">$&#123;ip&#125;</span> | grep -qw lo;<span class="keyword">then</span></span><br><span class="line">              ip addr add <span class="variable">$&#123;ip&#125;</span>/32 dev <span class="variable">$&#123;dummy_if&#125;</span></span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="comment"># 重新 reload </span></span><br><span class="line">  pkill --signal HUP keepalived</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="variable">$@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本就如上面所示，读取 keepalived 的 lvs 文件，把 <code>VIP:PORT</code> 加到 ipset 里，VIP 加到 <code>dummy</code> 接口上，之前是加到 eth0 上，但是业务网卡可能会重启影响，dummy 接口和 loopback 类似，它总是 up 的，除非你 down 掉它，SVC 地址配置在它上面不会随着物理接口状态变化而受到影响。删除掉之前 eth0 上的 VIP <code>ip addr del 169.254.11.2/32 dev eth0</code>，然后把前面的转成 keepalived 的配置文件测试下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x /etc/keepalived/ipvs.sh</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/keepalived/conf.d/test.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">virtual_server 169.254.11.2 80 &#123;</span></span><br><span class="line"><span class="string">    delay_loop 3</span></span><br><span class="line"><span class="string">    lb_algo rr</span></span><br><span class="line"><span class="string">    lb_kind NAT</span></span><br><span class="line"><span class="string">    protocol TCP</span></span><br><span class="line"><span class="string">    alpha #默认是禁用，会导致在启动daemon时，所有rs都会上来，开启此选项下则是所有的RS在daemon启动的时候是down状态，healthcheck健康检查failed。这有助于其启动时误报错误</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    real_server  192.168.2.111 8080 &#123;</span></span><br><span class="line"><span class="string">        weight 1</span></span><br><span class="line"><span class="string">        HTTP_GET  &#123;</span></span><br><span class="line"><span class="string">            url &#123;</span></span><br><span class="line"><span class="string">              path /404</span></span><br><span class="line"><span class="string">              status_code 404</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            connect_port    8080</span></span><br><span class="line"><span class="string">            connect_timeout 2</span></span><br><span class="line"><span class="string">            retry 2</span></span><br><span class="line"><span class="string">            delay_before_retry 2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    real_server  192.168.2.222 8080 &#123;</span></span><br><span class="line"><span class="string">        weight 1</span></span><br><span class="line"><span class="string">        HTTP_GET  &#123;</span></span><br><span class="line"><span class="string">            url &#123;</span></span><br><span class="line"><span class="string">              path /404</span></span><br><span class="line"><span class="string">              status_code 404</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            connect_port    8080</span></span><br><span class="line"><span class="string">            connect_timeout 2</span></span><br><span class="line"><span class="string">            retry 2</span></span><br><span class="line"><span class="string">            delay_before_retry 2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 先清理掉之前手动添加的</span><br><span class="line">ipvsadm --clear</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart keepalived</span><br><span class="line"></span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.222</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.222</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ ip a s svc</span><br><span class="line">4: svc: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether e6:a3:29:07:fa:57 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 169.254.11.2/32 scope global svc</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>停掉一个 web 后在我们配置的健康检查几秒也剔除了 rs ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">curl: (7) Failed connect to 169.254.11.2:80; Connection refused</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br><span class="line">$ curl 169.254.11.2/www/test</span><br><span class="line">192.168.2.111</span><br></pre></td></tr></table></figure><h4 id="系统的相关配置"><a href="#系统的相关配置" class="headerlink" title="系统的相关配置"></a>系统的相关配置</h4><p>后面重启后发现不通，发现内核模块没加载，使用 <code>systemd-modules-load</code> 去开机加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>  &gt; /etc/modules-load.d/ipvs.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">ip_vs</span></span><br><span class="line"><span class="string">ip_vs_rr</span></span><br><span class="line"><span class="string">ip_vs_wrr</span></span><br><span class="line"><span class="string">ip_vs_sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/90.ipvs.conf &lt;&lt; <span class="string">EOF </span></span><br><span class="line"><span class="string"># https://github.com/moby/moby/issues/31208 </span></span><br><span class="line"><span class="string"># ipvsadm -l --timout</span></span><br><span class="line"><span class="string"># 修复ipvs模式下长连接timeout问题 小于900即可</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time=600</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl=30</span></span><br><span class="line"><span class="string">net.ipv4.vs.conntrack=1</span></span><br><span class="line"><span class="string"># https://github.com/kubernetes/kubernetes/issues/70747 https://github.com/kubernetes/kubernetes/pull/71114</span></span><br><span class="line"><span class="string">net.ipv4.vs.conn_reuse_mode=0</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="docker-运行的方案"><a href="#docker-运行的方案" class="headerlink" title="docker 运行的方案"></a>docker 运行的方案</h3><p><code>docker-compose</code> 文件如下，自己把脚本挂载进去即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">keepalived:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;registry.aliyuncs.com/zhangguanzhang/keepalived:v2.2.0&#x27;</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;keepalived-ipvs&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;keepalived-ipvs&quot;</span></span><br><span class="line">    <span class="attr">labels:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">app=keepalived</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cap_drop:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/lib/modules:/lib/modules</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/run/xtables.lock:/run/xtables.lock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf.d/:/etc/keepalived/conf.d/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./keepalived.conf:/etc/keepalived/keepalived.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./always-initsh.d:/always-initsh.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tools:/etc/tools/</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">--dont-fork</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-console</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-detail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--use-file=/etc/keepalived/keepalived.conf</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">json-file</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-file:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">20m</span></span><br></pre></td></tr></table></figure><p>容器运行方案注意一个国产化的问题，uos 的 iptables 是 nf_tables 模式，会没锁文件 <code>/run/xtables.lock</code>，需要切成 <code>iptables-legacy</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -V</span><br><span class="line">iptables v1.8.2 (nf_tables)</span><br><span class="line"></span><br><span class="line">update-alternatives --set iptables /usr/sbin/iptables-legacy</span><br><span class="line">update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy</span><br><span class="line">update-alternatives --set arptables /usr/sbin/arptables-legacy</span><br><span class="line">update-alternatives --set ebtables /usr/sbin/ebtables-legacy</span><br><span class="line"></span><br><span class="line">$ iptables -V</span><br><span class="line">iptables v1.8.2 (legacy)</span><br></pre></td></tr></table></figure><h3 id="根据节点-ip-扩容"><a href="#根据节点-ip-扩容" class="headerlink" title="根据节点 ip 扩容"></a>根据节点 ip 扩容</h3><p>后续我们有个需求，根据节点 IP 扩容，因为配置都是 ansible 渲染的，而不可能让 ansible 重新渲染所有的文件，也不想造轮子，突然想到用脚本解决得了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">: $&#123;node_file:=/etc/tools/node_list.txt&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较 index ， 来修改 keepalived 配置文件里的 ip</span></span><br><span class="line">: $&#123;new_node_file:=/etc/tools/node_list.txt.new&#125;</span><br><span class="line">: $&#123;CONF_DIR:=/etc/keepalived/conf.d&#125;</span><br><span class="line">: $&#123;DT:=date  +&#x27;%Y-%m-%dT%H:%M:%S%z&#x27;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logging <span class="built_in">functions</span></span></span><br><span class="line">log() &#123;</span><br><span class="line">local type=&quot;$1&quot;; shift</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">accept argument string or stdin</span></span><br><span class="line">local text=&quot;$*&quot;; if [ &quot;$#&quot; -eq 0 ]; then text=&quot;$(cat)&quot;; fi</span><br><span class="line">local dt; dt=&quot;$($DT)&quot;</span><br><span class="line">printf &#x27;%s [%s] [scale.sh]: %s\n&#x27; &quot;$dt&quot; &quot;$type&quot; &quot;$text&quot;</span><br><span class="line">&#125;</span><br><span class="line">log_note() &#123;</span><br><span class="line">log Note &quot;$@&quot;</span><br><span class="line">&#125;</span><br><span class="line">log_warn() &#123;</span><br><span class="line">log Warn &quot;$@&quot; &gt;&amp;2</span><br><span class="line">&#125;</span><br><span class="line">log_error() &#123;</span><br><span class="line">log ERROR &quot;$@&quot; &gt;&amp;2</span><br><span class="line">exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generated_new()&#123;</span><br><span class="line">    local file=$1 print_flag=0 rs_port= end_block=0 start_block=0 block_str= </span><br><span class="line">    local new_file=$&#123;file&#125;.new h line</span><br><span class="line"></span><br><span class="line">    # 没有注释 node_scale=true 则跳过，因为所有keepalive 配置文件都在一个目录</span><br><span class="line">    # 部分配置文件对应的服务不是在每个节点上，所以 apps 类需要扩容的应用需要在配置文件里注释表明可以扩容</span><br><span class="line">    grep -Eqw &#x27;node_scale=true&#x27; $file || return 0</span><br><span class="line">    rm -f $&#123;new_file&#125;;touch $&#123;new_file&#125;</span><br><span class="line">    # IFS 保持原样输出</span><br><span class="line">    while IFS= read line;do</span><br><span class="line"></span><br><span class="line">        # 注释和空行输出</span><br><span class="line">        if echo &quot;$line&quot; | grep -Eq &#x27;^\s*$|^\s*#&#x27;;then</span><br><span class="line">            echo &quot;$line&quot; &gt;&gt; $&#123;new_file&#125;</span><br><span class="line">            continue</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        echo &quot;$line&quot; | grep -Eq &#x27;^\s*virtual_server&#x27; &amp;&amp; &#123;</span><br><span class="line">            print_flag=1</span><br><span class="line">            block_str=</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 跳过剩下的 real_server，因为所有 real server 的内部属性一样</span><br><span class="line">        [ $print_flag -eq 5 ] &amp;&amp; continue</span><br><span class="line"></span><br><span class="line">        echo &quot;$line&quot; | grep -Eq &#x27;^\s*real_server&#x27; &amp;&amp; &#123;</span><br><span class="line">            print_flag=2</span><br><span class="line">            rs_port=$( echo $line | awk &#x27;&#123;print $3&#125;&#x27; )</span><br><span class="line">            continue</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if [ $print_flag -eq 2 ];then</span><br><span class="line">            (( start_block+=$(echo &quot;$line&quot; | sed &#x27;s@#.+@@&#x27; | grep -Eo &#x27;\&#123;&#x27; | wc -l) ))</span><br><span class="line">            (( end_block+=$(echo &quot;$line&quot; | sed &#x27;s@#.+@@&#x27; | grep -Eo &#x27;\&#125;&#x27; | wc -l) ))</span><br><span class="line">            [ -z &quot;$block_str&quot; ] &amp;&amp; block_str=&quot;$&#123;line&#125;&quot; || block_str=&quot;$&#123;block_str&#125;</span><br><span class="line">    $&#123;line&#125;&quot;</span><br><span class="line"></span><br><span class="line">            if [ &quot;$end_block&quot; -ne 0 ] &amp;&amp; [ &quot;$start_block&quot; -eq &quot;$end_block&quot; ];then</span><br><span class="line"></span><br><span class="line">                for h in $&#123;node_array[@]&#125;;do</span><br><span class="line">                    printf &quot;    real_server %s %s &#123;\n%s\n    &#125;\n&quot; $h $rs_port &quot;$block_str&quot; &gt;&gt; $&#123;new_file&#125;</span><br><span class="line">                done</span><br><span class="line">                echo &#x27;&#125;&#x27; &gt;&gt; $&#123;new_file&#125;</span><br><span class="line">                start_block=0</span><br><span class="line">                end_block=0</span><br><span class="line">                print_flag=5</span><br><span class="line">            fi</span><br><span class="line"></span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $print_flag -eq 1 ];then</span><br><span class="line">            echo &quot;$line&quot; &gt;&gt; $&#123;new_file&#125;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">    done &lt; $file</span><br><span class="line">    cat $&#123;new_file&#125; &gt; $file</span><br><span class="line">    rm -f $&#123;new_file&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$&#123;CONF_DIR&#125;&quot; ] || [ ! -f &quot;$node_file&quot; ];then</span><br><span class="line">        return 0</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    read -a node_array &lt; &quot;$node_file&quot;</span><br><span class="line"></span><br><span class="line">    if [ -f &quot;$new_node_file&quot; ];then</span><br><span class="line">        read -a new_node_array &lt; &quot;$new_node_file&quot;</span><br><span class="line">        if [ &quot;$&#123;#node_array[@]&#125;&quot; -ne $&#123;#new_node_array[@]&#125; ];then</span><br><span class="line">            log_error &quot;新老 node_list 文件里 IP 数量不匹配，无法执行更改 IP 操作&quot;</span><br><span class="line">        fi</span><br><span class="line">        for((i=0;i&lt;$&#123;#node_array[@]&#125;;i++))</span><br><span class="line">        do</span><br><span class="line">            #echo sed -ri &quot;s#$&#123;node_array[$i]&#125;#$&#123;new_node_array[$i]&#125;#&quot; $&#123;CONF_DIR&#125;/*.conf</span><br><span class="line">            # 替换成新的 IP</span><br><span class="line">            sed -ri &quot;s#$&#123;node_array[$i]&#125;#$&#123;new_node_array[$i]&#125;#&quot; $&#123;CONF_DIR&#125;/*.conf</span><br><span class="line">        done</span><br><span class="line">        cat &quot;$new_node_file&quot; &gt; &quot;$node_file&quot;</span><br><span class="line">        rm -f &quot;$new_node_file&quot;</span><br><span class="line">    else</span><br><span class="line">        export -f generated_new</span><br><span class="line">        if [ &quot;$&#123;#node_array[@]&#125;&quot; -le 2 ];then</span><br><span class="line">            # 透传 node_array</span><br><span class="line">            find $&#123;CONF_DIR&#125; -type f -name &#x27;*.conf&#x27; | xargs -n1 -I &#123;&#125; -P 0 bash -c &quot;`declare -p node_array`; generated_new &#123;&#125;&quot;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>上面脚本存在容器里的 <code>/etc/tools/sacle.sh</code> ，然后所有的节点 IP 存在 <code>tools/node_list.txt</code> ，让 <code>sacle.sh</code> 读取进来形成 array ，然后对每个配置文件执行上面脚本。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/LVS-HOWTO.filter_rules.html">Interaction between LVS and netfilter</a></li><li><a href="http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/LVS-HOWTO.LVS-NAT.html#lvs_nat_intro">lvs nat</a></li><li><a href="https://github.com/liexusong/linux-source-code-analyze/blob/master/lvs-principle-and-source-analysis-part2.md">lvs-principle-and-source-analysis</a></li><li><a href="https://www.zsythink.net/archives/1199">朱双印大佬的 iptables 技术系列</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;内部有非 K8S 环境上需要类似 SVC 的负载实现，一开始是用 NGINX 做的，所有 SVC 域名都解析成一个 dummy IP ，然后</summary>
      
    
    
    
    
    <category term="lvs" scheme="http://zhangguanzhang.github.io/tags/lvs/"/>
    
    <category term="ipvsadm" scheme="http://zhangguanzhang.github.io/tags/ipvsadm/"/>
    
    <category term="kube-proxy" scheme="http://zhangguanzhang.github.io/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>解决 docker 的 read unix @-&gt;/run/containerd/s/xxx read: connection reset by peer: unknown</title>
    <link href="http://zhangguanzhang.github.io/2021/09/16/read-containerd-con-reset/"/>
    <id>http://zhangguanzhang.github.io/2021/09/16/read-containerd-con-reset/</id>
    <published>2021-09-16T18:14:06.000Z</published>
    <updated>2021-09-16T18:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>为了测试关机对集群的影响，关机了几台机器后很多 pod 一直 <code>CrashLoopBackOff</code> 和 <code>RunContainerError</code> 或者一直无法就绪</p><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS76 ~]# docker info</span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 404</span><br><span class="line">  Running: 258</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 146</span><br><span class="line"> Images: 110</span><br><span class="line"> Server Version: 19.03.14</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: ea765aba0d05254012b0b9e595e995c09186427f</span><br><span class="line"> runc version: v1.0.0-0-g84113eef6fc2</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 3.10.0-1160.36.2.el7.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 16</span><br><span class="line"> Total Memory: 62.76GiB</span><br><span class="line"> Name: CentOS76</span><br><span class="line"> ID: BJ2X:EX7H:SCME:Q3AD:IP2M:IB2D:E4RL:XA4C:EOMQ:7S3F:DIA6:WQ2C</span><br><span class="line"> Docker Root Dir: /data/kube/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  reg.xxx.lan:5000</span><br><span class="line">  treg.yun.xxx.cn</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://registry.docker-cn.com/</span><br><span class="line">  https://docker.mirrors.ustc.edu.cn/</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>日志查看如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RunContainerError: failed to start container &quot;90353b19ae6c7209ba1785286c292f2362fa069b578f2e2731e93747c5ba1912&quot;: Error response from daemon: OCI runtime create failed: unable to retrieve OCI runtime error (open /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/90353b19ae6c7209ba1785286c292f2362fa069b578f2e2731e93747c5ba1912/log.json: no such file or directory): runc did not terminate sucessfully: unknown</span><br></pre></td></tr></table></figure><p>还有下面日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runc did not terminate sucessfully: runtime/cgo: pthread_create failed: Resource temporarily unavailable</span><br><span class="line"></span><br><span class="line">container 9853a196008b92033a299e098d73d4268a76ce58faecfe40ca3411857d44a776: unknown error after kill: fork/exec /data/kube/bin/runc: resource temporarily unavailable: : unknown&quot;</span><br></pre></td></tr></table></figure><p>应该资源限制了，看了下默认的 <code>kernel.pid_max</code> 太小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -n kernel.pid_max</span><br><span class="line">32768</span><br></pre></td></tr></table></figure><p>后面陆陆续续调整了一些下面的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/security/limits.d/21-custom.conf&lt;&lt;EOF</span><br><span class="line">*       soft    nproc   131072</span><br><span class="line">*       hard    nproc   131072</span><br><span class="line">*       soft    nofile  131072</span><br><span class="line">*       hard    nofile  131072</span><br><span class="line">root    soft    nproc   131072</span><br><span class="line">root    hard    nproc   131072</span><br><span class="line">root    soft    nofile  131072</span><br><span class="line">root    hard    nofile  131072</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed -ri &#x27;s/^#(DefaultLimitCORE)=/\1=100000/&#x27; /etc/systemd/system.conf</span><br><span class="line">sed -ri &#x27;s/^#(DefaultLimitNOFILE)=/\1=100000/&#x27; /etc/systemd/system.conf</span><br></pre></td></tr></table></figure><p>然后重启后 pod 还没有好转，启动一直处于 Create 的容器会有下面错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS76 ~]# docker start 034f</span><br><span class="line">Error response from daemon: read unix @-&gt;/run/containerd/s/2ac09cf054eb19b79336b25efe1aeeaf22bcf0d9559ca79b8459c3490cd6034f: read: connection reset by peer: unknown</span><br><span class="line">Error: failed to start containers: 034f</span><br></pre></td></tr></table></figure><p>手动起容器报错下面的，调整参数后更多是上面的报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm nginx:1.19-alpine</span><br><span class="line">docker: Errpr response from daemon: failed to start shim: fork/exec /usr/bin/containerd-shim: resource temporarily unavailable: unknown.</span><br></pre></td></tr></table></figure><p><code> read unix @-&gt;/run/containerd/s</code> 这个按照流程走就是 contained 的问题了，可以从 <a href="https://github.com/docker/docker-ce/blob/d7080c17a580919f5340a15a8e5e013133089680/components/engine/libcontainerd/remote_daemon.go#L244">源码</a> 得知，如果没启动 containerd ，docker 则会 os.Exec 起一个 <code>containerd</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep &#x27;\scontainerd\s&#x27;</span><br><span class="line">root     147580  2.4  0.1 10375568 104588 ?     Ssl  17:06   3:15 containerd --config /var/run/docker/containerd/containerd.toml --log-level warn</span><br></pre></td></tr></table></figure><p>我们的 docker 是官方的 static 二进制安装的，去看了下 rpm 安装的话会分离开，也就是有个 containerd 的 rpm，有一个 <code>containerd.service</code> 服务。 想着看下我们环境上的 containerd 的输出日志，但是源码看的话命令的输出都是绑定到 docker 的输出的。而且命令行参数固定的、无法改为 debug level。</p><p>手动杀掉启动下试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 147580 &amp;&amp; containerd --config /var/run/docker/containerd/containerd.toml --log-level debug</span><br></pre></td></tr></table></figure><p>另外开个 ssh 窗口发现 pod 状态都正常了。说明了 systemd 启动的 docker 有限制，去 dockerd 的 proc 目录啥的查找了下看没达到文件啥的限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS76 ~]# pgrep dockerd</span><br><span class="line">113233</span><br><span class="line">[root@CentOS76 ~]# lsof -p 113233  | wc -l</span><br><span class="line">956</span><br></pre></td></tr></table></figure><p>最后找到问题所在，下面的<code>Tasks: 2043 (limit: 2048)</code> 限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS76 ~]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 四 2021-09-16 16:53:21 CST; 4min 16s ago</span><br><span class="line">     Docs: http://docs.docker.io</span><br><span class="line">  Process: 113228 ExecStopPost=/bin/sh -c /sbin/iptables --wait -D INPUT -i cni0 -j ACCEPT &amp;&gt; /dev/null || : (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 113225 ExecStopPost=/bin/sh -c /sbin/iptables --wait -D FORWARD -s 0.0.0.0/0 -j ACCEPT &amp;&gt; /dev/null || : (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 113236 ExecStartPost=/sbin/iptables --wait -I INPUT -i cni0 -j ACCEPT (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 113234 ExecStartPost=/sbin/iptables --wait -I FORWARD -s 0.0.0.0/0 -j ACCEPT (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 113231 ExecStartPre=/bin/bash -c test -d /var/run/docker.sock &amp;&amp; rmdir /var/run/docker.sock || true (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 113233 (dockerd)</span><br><span class="line">    Tasks: 2043 (limit: 2048)</span><br><span class="line">   Memory: 1.1G</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─ 89710 containerd-shim -namespace</span><br></pre></td></tr></table></figure><p>systemd 的 <code>DefaultTasksMax</code> 是 <code>2048</code> ，另外对比了官方的 <code>docker.service</code> 是不限制 Tasks 的，我们没加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl cat docker</span><br><span class="line">..</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加了后重启 docker 就好了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/systemd/system/docker.service</span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://plpan.github.io/docker-exec-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E6%97%85/">https://plpan.github.io/docker-exec-%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E6%97%85/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;为了测试关机对集群的影响，关机了几台机器后很多 pod 一直 &lt;code&gt;CrashLoopBackOff&lt;/code&gt; 和 &lt;code&gt;R</summary>
      
    
    
    
    
    <category term="docker" scheme="http://zhangguanzhang.github.io/tags/docker/"/>
    
    <category term="containerd" scheme="http://zhangguanzhang.github.io/tags/containerd/"/>
    
  </entry>
  
</feed>
